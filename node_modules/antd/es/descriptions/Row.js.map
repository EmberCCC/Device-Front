{"version":3,"sources":["descriptions/Row.jsx"],"names":["React","Cell","renderCells","items","colon","prefixCls","bordered","component","type","showLabel","showContent","map","index","props","label","children","itemPrefixCls","className","style","span","key","Row","vertical"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AACA,SAASC,WAAT,CAAqBC,KAArB,eAAyG;AAAA,MAA3EC,KAA2E,QAA3EA,KAA2E;AAAA,MAApEC,SAAoE,QAApEA,SAAoE;AAAA,MAAzDC,QAAyD,QAAzDA,QAAyD;AAAA,MAA3CC,SAA2C,SAA3CA,SAA2C;AAAA,MAAhCC,IAAgC,SAAhCA,IAAgC;AAAA,MAA1BC,SAA0B,SAA1BA,SAA0B;AAAA,MAAfC,WAAe,SAAfA,WAAe;AACrG,SAAOP,KAAK,CAACQ,GAAN,CAAU,iBAA0GC,KAA1G,EAAoH;AAAA,4BAAjHC,KAAiH;AAAA,QAAxGC,KAAwG,eAAxGA,KAAwG;AAAA,QAAjGC,QAAiG,eAAjGA,QAAiG;AAAA,4CAAvFV,SAAuF;AAAA,QAA5EW,aAA4E,sCAA5DX,SAA4D;AAAA,QAAjDY,SAAiD,eAAjDA,SAAiD;AAAA,QAAtCC,KAAsC,eAAtCA,KAAsC;AAAA,uCAA/BC,IAA+B;AAAA,QAA/BA,IAA+B,iCAAxB,CAAwB;AAAA,QAAlBC,GAAkB,SAAlBA,GAAkB;;AACjI,QAAI,OAAOb,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,aAAQ,oBAAC,IAAD;AAAM,QAAA,GAAG,YAAKC,IAAL,cAAaY,GAAG,IAAIR,KAApB,CAAT;AAAsC,QAAA,SAAS,EAAEK,SAAjD;AAA4D,QAAA,KAAK,EAAEC,KAAnE;AAA0E,QAAA,IAAI,EAAEC,IAAhF;AAAsF,QAAA,KAAK,EAAEf,KAA7F;AAAoG,QAAA,SAAS,EAAEG,SAA/G;AAA0H,QAAA,aAAa,EAAES,aAAzI;AAAwJ,QAAA,QAAQ,EAAEV,QAAlK;AAA4K,QAAA,KAAK,EAAEG,SAAS,GAAGK,KAAH,GAAW,IAAvM;AAA6M,QAAA,OAAO,EAAEJ,WAAW,GAAGK,QAAH,GAAc;AAA/O,QAAR;AACH;;AACD,WAAQ,0CACN,oBAAC,IAAD;AAAM,MAAA,GAAG,kBAAWK,GAAG,IAAIR,KAAlB,CAAT;AAAoC,MAAA,SAAS,EAAEK,SAA/C;AAA0D,MAAA,KAAK,EAAEC,KAAjE;AAAwE,MAAA,IAAI,EAAE,CAA9E;AAAiF,MAAA,KAAK,EAAEd,KAAxF;AAA+F,MAAA,SAAS,EAAEG,SAAS,CAAC,CAAD,CAAnH;AAAwH,MAAA,aAAa,EAAES,aAAvI;AAAsJ,MAAA,QAAQ,EAAEV,QAAhK;AAA0K,MAAA,KAAK,EAAEQ;AAAjL,MADM,EAEN,oBAAC,IAAD;AAAM,MAAA,GAAG,oBAAaM,GAAG,IAAIR,KAApB,CAAT;AAAsC,MAAA,SAAS,EAAEK,SAAjD;AAA4D,MAAA,KAAK,EAAEC,KAAnE;AAA0E,MAAA,IAAI,EAAEC,IAAI,GAAG,CAAP,GAAW,CAA3F;AAA8F,MAAA,SAAS,EAAEZ,SAAS,CAAC,CAAD,CAAlH;AAAuH,MAAA,aAAa,EAAES,aAAtI;AAAqJ,MAAA,QAAQ,EAAEV,QAA/J;AAAyK,MAAA,OAAO,EAAES;AAAlL,MAFM,CAAR;AAIH,GARM,CAAP;AASH;;AACD,IAAMM,GAAG,GAAG,SAANA,GAAM,CAAAR,KAAK,EAAI;AAAA,MACTR,SADS,GAC0CQ,KAD1C,CACTR,SADS;AAAA,MACEiB,QADF,GAC0CT,KAD1C,CACES,QADF;AAAA,MACYP,QADZ,GAC0CF,KAD1C,CACYE,QADZ;AAAA,MACsBH,KADtB,GAC0CC,KAD1C,CACsBD,KADtB;AAAA,MAC6BN,QAD7B,GAC0CO,KAD1C,CAC6BP,QAD7B;;AAEjB,MAAIgB,QAAJ,EAAc;AACV,WAAQ,0CACR;AAAI,MAAA,GAAG,kBAAWV,KAAX,CAAP;AAA2B,MAAA,SAAS,YAAKP,SAAL;AAApC,OACGH,WAAW,CAACa,QAAD,EAAWF,KAAX,EAAkB;AAAEN,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,IAAI,EAAE,OAAzB;AAAkCC,MAAAA,SAAS,EAAE;AAA7C,KAAlB,CADd,CADQ,EAIR;AAAI,MAAA,GAAG,oBAAaG,KAAb,CAAP;AAA6B,MAAA,SAAS,YAAKP,SAAL;AAAtC,OACGH,WAAW,CAACa,QAAD,EAAWF,KAAX,EAAkB;AAC5BN,MAAAA,SAAS,EAAE,IADiB;AAE5BC,MAAAA,IAAI,EAAE,SAFsB;AAG5BE,MAAAA,WAAW,EAAE;AAHe,KAAlB,CADd,CAJQ,CAAR;AAYH;;AACD,SAAQ;AAAI,IAAA,GAAG,EAAEE,KAAT;AAAgB,IAAA,SAAS,YAAKP,SAAL;AAAzB,KACLH,WAAW,CAACa,QAAD,EAAWF,KAAX,EAAkB;AAC5BN,IAAAA,SAAS,EAAED,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,CAAH,GAAkB,IADT;AAE5BE,IAAAA,IAAI,EAAE,MAFsB;AAG5BC,IAAAA,SAAS,EAAE,IAHiB;AAI5BC,IAAAA,WAAW,EAAE;AAJe,GAAlB,CADN,CAAR;AAQH,CAxBD;;AAyBA,eAAeW,GAAf","sourcesContent":["import * as React from 'react';\nimport Cell from './Cell';\nfunction renderCells(items, { colon, prefixCls, bordered }, { component, type, showLabel, showContent }) {\n    return items.map(({ props: { label, children, prefixCls: itemPrefixCls = prefixCls, className, style, span = 1, }, key, }, index) => {\n        if (typeof component === 'string') {\n            return (<Cell key={`${type}-${key || index}`} className={className} style={style} span={span} colon={colon} component={component} itemPrefixCls={itemPrefixCls} bordered={bordered} label={showLabel ? label : null} content={showContent ? children : null}/>);\n        }\n        return (<>\n          <Cell key={`label-${key || index}`} className={className} style={style} span={1} colon={colon} component={component[0]} itemPrefixCls={itemPrefixCls} bordered={bordered} label={label}/>\n          <Cell key={`content-${key || index}`} className={className} style={style} span={span * 2 - 1} component={component[1]} itemPrefixCls={itemPrefixCls} bordered={bordered} content={children}/>\n        </>);\n    });\n}\nconst Row = props => {\n    const { prefixCls, vertical, children, index, bordered } = props;\n    if (vertical) {\n        return (<>\n        <tr key={`label-${index}`} className={`${prefixCls}-row`}>\n          {renderCells(children, props, { component: 'th', type: 'label', showLabel: true })}\n        </tr>\n        <tr key={`content-${index}`} className={`${prefixCls}-row`}>\n          {renderCells(children, props, {\n            component: 'td',\n            type: 'content',\n            showContent: true,\n        })}\n        </tr>\n      </>);\n    }\n    return (<tr key={index} className={`${prefixCls}-row`}>\n      {renderCells(children, props, {\n        component: bordered ? ['th', 'td'] : 'td',\n        type: 'item',\n        showLabel: true,\n        showContent: true,\n    })}\n    </tr>);\n};\nexport default Row;\n"],"file":"Row.js"}