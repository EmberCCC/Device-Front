{"version":3,"sources":["table/hooks/useSorter.jsx"],"names":["React","classNames","CaretDownOutlined","CaretUpOutlined","getColumnKey","getColumnPos","renderColumnTitle","getMultiplePriority","column","sorter","multiple","getSortFunction","compare","nextSortDirection","sortDirections","current","indexOf","collectSortStates","columns","init","pos","sortStates","forEach","index","columnPos","children","push","key","multiplePriority","sortOrder","defaultSortOrder","injectSorter","prefixCls","sorterSates","triggerSorter","defaultSortDirections","map","newColumn","columnKey","sorterState","find","sorterOrder","upNode","includes","active","downNode","className","title","renderProps","onHeaderCell","col","cell","originOnClick","onClick","event","stateToInfo","sorterStates","order","field","dataIndex","generateSorterInfo","list","filter","length","undefined","getSortData","data","childrenColumnName","innerSorterStates","slice","sort","a","b","cloneData","runningSorters","record1","record2","i","compareFn","compareResult","record","subRecords","useFilterSorter","onSorterChange","useState","setSortStates","mergedSorterStates","useMemo","validate","collectedStates","validateStates","patchStates","state","multipleMode","columnTitleSorterProps","sortColumns","sortColumn","sortState","newSorterStates","transformColumns","innerColumns","getSorters"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { CaretDownOutlined, CaretUpOutlined } from '@ant-design/icons';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../util';\nfunction getMultiplePriority(column) {\n    if (typeof column.sorter === 'object' && typeof column.sorter.multiple === 'number') {\n        return column.sorter.multiple;\n    }\n    return false;\n}\nfunction getSortFunction(sorter) {\n    if (typeof sorter === 'function') {\n        return sorter;\n    }\n    if (sorter && typeof sorter === 'object' && sorter.compare) {\n        return sorter.compare;\n    }\n    return false;\n}\nfunction nextSortDirection(sortDirections, current) {\n    if (!current) {\n        return sortDirections[0];\n    }\n    return sortDirections[sortDirections.indexOf(current) + 1];\n}\nfunction collectSortStates(columns, init, pos) {\n    let sortStates = [];\n    (columns || []).forEach((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        if ('children' in column) {\n            sortStates = [...sortStates, ...collectSortStates(column.children, init, columnPos)];\n        }\n        else if (column.sorter) {\n            if ('sortOrder' in column) {\n                // Controlled\n                sortStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    multiplePriority: getMultiplePriority(column),\n                    sortOrder: column.sortOrder,\n                });\n            }\n            else if (init && column.defaultSortOrder) {\n                // Default sorter\n                sortStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    multiplePriority: getMultiplePriority(column),\n                    sortOrder: column.defaultSortOrder,\n                });\n            }\n        }\n    });\n    return sortStates;\n}\nfunction injectSorter(prefixCls, columns, sorterSates, triggerSorter, defaultSortDirections, pos) {\n    return (columns || []).map((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        let newColumn = column;\n        if (newColumn.sorter) {\n            const sortDirections = newColumn.sortDirections || defaultSortDirections;\n            const columnKey = getColumnKey(newColumn, columnPos);\n            const sorterState = sorterSates.find(({ key }) => key === columnKey);\n            const sorterOrder = sorterState ? sorterState.sortOrder : null;\n            const upNode = sortDirections.includes('ascend') && (<CaretUpOutlined className={classNames(`${prefixCls}-column-sorter-up`, {\n                active: sorterOrder === 'ascend',\n            })}/>);\n            const downNode = sortDirections.includes('descend') && (<CaretDownOutlined className={classNames(`${prefixCls}-column-sorter-down`, {\n                active: sorterOrder === 'descend',\n            })}/>);\n            newColumn = Object.assign(Object.assign({}, newColumn), { className: classNames(newColumn.className, { [`${prefixCls}-column-sort`]: sorterOrder }), title: (renderProps) => (<div className={`${prefixCls}-column-sorters`}>\n            <span>{renderColumnTitle(column.title, renderProps)}</span>\n            <span className={classNames(`${prefixCls}-column-sorter`, {\n                    [`${prefixCls}-column-sorter-full`]: upNode && downNode,\n                })}>\n              <span className={`${prefixCls}-column-sorter-inner`}>\n                {upNode}\n                {downNode}\n              </span>\n            </span>\n          </div>), onHeaderCell: col => {\n                    const cell = (column.onHeaderCell && column.onHeaderCell(col)) || {};\n                    const originOnClick = cell.onClick;\n                    cell.onClick = (event) => {\n                        triggerSorter({\n                            column,\n                            key: columnKey,\n                            sortOrder: nextSortDirection(sortDirections, sorterOrder),\n                            multiplePriority: getMultiplePriority(column),\n                        });\n                        if (originOnClick) {\n                            originOnClick(event);\n                        }\n                    };\n                    cell.className = classNames(cell.className, `${prefixCls}-column-has-sorters`);\n                    return cell;\n                } });\n        }\n        if ('children' in newColumn) {\n            newColumn = Object.assign(Object.assign({}, newColumn), { children: injectSorter(prefixCls, newColumn.children, sorterSates, triggerSorter, defaultSortDirections, columnPos) });\n        }\n        return newColumn;\n    });\n}\nfunction stateToInfo(sorterStates) {\n    const { column, sortOrder } = sorterStates;\n    return { column, order: sortOrder, field: column.dataIndex, columnKey: column.key };\n}\nfunction generateSorterInfo(sorterStates) {\n    const list = sorterStates.filter(({ sortOrder }) => sortOrder).map(stateToInfo);\n    // =========== Legacy compatible support ===========\n    // https://github.com/ant-design/ant-design/pull/19226\n    if (list.length === 0 && sorterStates.length) {\n        return Object.assign(Object.assign({}, stateToInfo(sorterStates[0])), { column: undefined });\n    }\n    if (list.length <= 1) {\n        return list[0] || {};\n    }\n    return list;\n}\nexport function getSortData(data, sortStates, childrenColumnName) {\n    const innerSorterStates = sortStates\n        .slice()\n        .sort((a, b) => b.multiplePriority - a.multiplePriority);\n    const cloneData = data.slice();\n    const runningSorters = innerSorterStates.filter(({ column: { sorter }, sortOrder }) => {\n        return getSortFunction(sorter) && sortOrder;\n    });\n    // Skip if no sorter needed\n    if (!runningSorters.length) {\n        return cloneData;\n    }\n    return cloneData\n        .sort((record1, record2) => {\n        for (let i = 0; i < runningSorters.length; i += 1) {\n            const sorterState = runningSorters[i];\n            const { column: { sorter }, sortOrder, } = sorterState;\n            const compareFn = getSortFunction(sorter);\n            if (compareFn && sortOrder) {\n                const compareResult = compareFn(record1, record2, sortOrder);\n                if (compareResult !== 0) {\n                    return sortOrder === 'ascend' ? compareResult : -compareResult;\n                }\n            }\n        }\n        return 0;\n    })\n        .map(record => {\n        const subRecords = record[childrenColumnName];\n        if (subRecords) {\n            return Object.assign(Object.assign({}, record), { [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName) });\n        }\n        return record;\n    });\n}\nexport default function useFilterSorter({ prefixCls, columns, onSorterChange, sortDirections, }) {\n    const [sortStates, setSortStates] = React.useState(collectSortStates(columns, true));\n    const mergedSorterStates = React.useMemo(() => {\n        let validate = true;\n        const collectedStates = collectSortStates(columns, false);\n        // Return if not controlled\n        if (!collectedStates.length) {\n            return sortStates;\n        }\n        const validateStates = [];\n        function patchStates(state) {\n            if (validate) {\n                validateStates.push(state);\n            }\n            else {\n                validateStates.push(Object.assign(Object.assign({}, state), { sortOrder: null }));\n            }\n        }\n        let multipleMode = null;\n        collectedStates.forEach(state => {\n            if (multipleMode === null) {\n                patchStates(state);\n                if (state.sortOrder) {\n                    if (state.multiplePriority === false) {\n                        validate = false;\n                    }\n                    else {\n                        multipleMode = true;\n                    }\n                }\n            }\n            else if (multipleMode && state.multiplePriority !== false) {\n                patchStates(state);\n            }\n            else {\n                validate = false;\n                patchStates(state);\n            }\n        });\n        return validateStates;\n    }, [columns, sortStates]);\n    // Get render columns title required props\n    const columnTitleSorterProps = React.useMemo(() => {\n        const sortColumns = mergedSorterStates.map(({ column, sortOrder }) => ({\n            column,\n            order: sortOrder,\n        }));\n        return {\n            sortColumns,\n            // Legacy\n            sortColumn: sortColumns[0] && sortColumns[0].column,\n            sortOrder: sortColumns[0] && sortColumns[0].order,\n        };\n    }, [mergedSorterStates]);\n    function triggerSorter(sortState) {\n        let newSorterStates;\n        if (sortState.multiplePriority === false ||\n            !mergedSorterStates.length ||\n            mergedSorterStates[0].multiplePriority === false) {\n            newSorterStates = [sortState];\n        }\n        else {\n            newSorterStates = [\n                ...mergedSorterStates.filter(({ key }) => key !== sortState.key),\n                sortState,\n            ];\n        }\n        setSortStates(newSorterStates);\n        onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);\n    }\n    const transformColumns = (innerColumns) => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections);\n    const getSorters = () => {\n        return generateSorterInfo(mergedSorterStates);\n    };\n    return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];\n}\n"],"file":"useSorter.js"}