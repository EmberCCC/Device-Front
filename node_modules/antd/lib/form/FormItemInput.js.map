{"version":3,"sources":["form/FormItemInput.jsx"],"names":["iconMap","success","CheckCircleFilled","warning","ExclamationCircleFilled","error","CloseCircleFilled","validating","LoadingOutlined","FormItemInput","prefixCls","wrapperCol","children","help","errors","onDomErrorVisibleChange","hasFeedback","validateStatus","extra","React","useState","forceUpdate","baseClassName","formContext","useContext","FormContext","mergedWrapperCol","className","changedVisible","visible","cacheErrors","memoErrors","_","nextVisible","IconNode","icon","subFormContext","labelCol","motionClassName","map","index"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { LoadingOutlined, CloseCircleFilled, CheckCircleFilled, ExclamationCircleFilled, } from '@ant-design/icons';\nimport useMemo from 'rc-util/lib/hooks/useMemo';\nimport CSSMotion from 'rc-animate/lib/CSSMotion';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport { useCacheErrors } from './util';\nconst iconMap = {\n    success: CheckCircleFilled,\n    warning: ExclamationCircleFilled,\n    error: CloseCircleFilled,\n    validating: LoadingOutlined,\n};\nconst FormItemInput = ({ prefixCls, wrapperCol, children, help, errors, onDomErrorVisibleChange, hasFeedback, validateStatus, extra, }) => {\n    const [, forceUpdate] = React.useState({});\n    const baseClassName = `${prefixCls}-item`;\n    const formContext = React.useContext(FormContext);\n    const mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n    const className = classNames(`${baseClassName}-control`, mergedWrapperCol.className);\n    const [visible, cacheErrors] = useCacheErrors(errors, changedVisible => {\n        if (changedVisible) {\n            onDomErrorVisibleChange(true);\n        }\n        forceUpdate({});\n    }, !!help);\n    const memoErrors = useMemo(() => cacheErrors, visible, (_, nextVisible) => nextVisible);\n    // Should provides additional icon if `hasFeedback`\n    const IconNode = validateStatus && iconMap[validateStatus];\n    const icon = hasFeedback && IconNode ? (<span className={`${baseClassName}-children-icon`}>\n        <IconNode />\n      </span>) : null;\n    // Pass to sub FormItem should not with col info\n    const subFormContext = Object.assign({}, formContext);\n    delete subFormContext.labelCol;\n    delete subFormContext.wrapperCol;\n    return (<FormContext.Provider value={subFormContext}>\n      <Col {...mergedWrapperCol} className={className}>\n        <div className={`${baseClassName}-control-input`}>\n          <div className={`${baseClassName}-control-input-content`}>{children}</div>\n          {icon}\n        </div>\n        <CSSMotion visible={visible} motionName=\"show-help\" onLeaveEnd={() => {\n        onDomErrorVisibleChange(false);\n    }} motionAppear removeOnLeave>\n          {({ className: motionClassName }) => {\n        return (<div className={classNames(`${baseClassName}-explain`, motionClassName)} key=\"help\">\n                {memoErrors.map((error, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={index}>{error}</div>))}\n              </div>);\n    }}\n        </CSSMotion>\n        {extra && <div className={`${baseClassName}-extra`}>{extra}</div>}\n      </Col>\n    </FormContext.Provider>);\n};\nexport default FormItemInput;\n"],"file":"FormItemInput.js"}