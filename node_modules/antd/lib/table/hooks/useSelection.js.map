{"version":3,"sources":["table/hooks/useSelection.jsx"],"names":["EMPTY_LIST","SELECTION_ALL","SELECTION_INVERT","getFixedType","column","fixed","flattenData","data","childrenColumnName","list","forEach","record","push","useSelection","rowSelection","config","selectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectMultiple","columnWidth","selectionColWidth","selectionType","type","selections","React","useContext","ConfigContext","locale","defaultLocale","tableLocale","Table","prefixCls","pageData","getRecordByKey","getRowKey","expandType","useState","innerSelectedKeys","setInnerSelectedKeys","mergedSelectedKeys","mergedSelectedKeySet","useMemo","keys","slice","Set","lastSelectedKey","setLastSelectedKey","useEffect","setSelectedKeys","useCallback","records","map","key","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","index","selectInvert","keySet","has","add","Array","from","transformColumns","columns","flattedData","checkboxPropsMap","Map","checkboxProps","set","process","env","NODE_ENV","recordKeys","filter","get","disabled","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","onSelectionClick","allDisabled","length","renderCell","_","nativeEvent","hasKey","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","selectionColumn","width","className","columnTitle","render","expandColumn","restColumns"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,UAAU,GAAG,EAAnB,C,CACA;;AACO,IAAMC,aAAa,GAAG,YAAtB;;AACA,IAAMC,gBAAgB,GAAG,eAAzB;;;AACP,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAOA,MAAM,IAAIA,MAAM,CAACC,KAAxB;AACH;;AACD,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,kBAA3B,EAA+C;AAC3C,MAAIC,IAAI,GAAG,EAAX;AACA,GAACF,IAAI,IAAI,EAAT,EAAaG,OAAb,CAAqB,UAAAC,MAAM,EAAI;AAC3BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,MAAV;;AACA,QAAIH,kBAAkB,IAAIG,MAA1B,EAAkC;AAC9BF,MAAAA,IAAI,gCACGA,IADH,sBAEGH,WAAW,CAACK,MAAM,CAACH,kBAAD,CAAP,EAA6BA,kBAA7B,CAFd,EAAJ;AAIH;AACJ,GARD;AASA,SAAOC,IAAP;AACH;;AACc,SAASI,YAAT,CAAsBC,YAAtB,EAAoCC,MAApC,EAA4C;AAAA,aAC2JD,YAAY,IAAI,EAD3K;AAAA,MAC/CE,eAD+C,QAC/CA,eAD+C;AAAA,MAC9BC,gBAD8B,QAC9BA,gBAD8B;AAAA,MACFC,iBADE,QACZC,QADY;AAAA,MACiBC,QADjB,QACiBA,QADjB;AAAA,MAC2BC,WAD3B,QAC2BA,WAD3B;AAAA,MACwCC,cADxC,QACwCA,cADxC;AAAA,MACwDC,gBADxD,QACwDA,gBADxD;AAAA,8BAC0EC,WAD1E;AAAA,MACuFC,iBADvF,iCAC2G,EAD3G;AAAA,MACqHC,aADrH,QAC+GC,IAD/G;AAAA,MACoIC,UADpI,QACoIA,UADpI;AAAA,MACgJvB,KADhJ,QACgJA,KADhJ;;AAAA,0BAEpBwB,KAAK,CAACC,UAAN,CAAiBC,6BAAjB,CAFoB;AAAA,gDAE/CC,MAF+C;AAAA,MAE/CA,MAF+C,sCAEtCC,iBAFsC;;AAGvD,MAAMC,WAAW,GAAIF,MAAM,CAACG,KAAP,IAAgB,EAArC;AAHuD,MAI/CC,SAJ+C,GAI2CrB,MAJ3C,CAI/CqB,SAJ+C;AAAA,MAIpC7B,IAJoC,GAI2CQ,MAJ3C,CAIpCR,IAJoC;AAAA,MAI9B8B,QAJ8B,GAI2CtB,MAJ3C,CAI9BsB,QAJ8B;AAAA,MAIpBC,cAJoB,GAI2CvB,MAJ3C,CAIpBuB,cAJoB;AAAA,MAIJC,SAJI,GAI2CxB,MAJ3C,CAIJwB,SAJI;AAAA,MAIOC,UAJP,GAI2CzB,MAJ3C,CAIOyB,UAJP;AAAA,MAImBhC,kBAJnB,GAI2CO,MAJ3C,CAImBP,kBAJnB;;AAAA,wBAKLqB,KAAK,CAACY,QAAN,EALK;AAAA;AAAA,MAKhDC,iBALgD;AAAA,MAK7BC,oBAL6B;;AAMvD,MAAMC,kBAAkB,GAAG5B,eAAe,IAAI0B,iBAAnB,IAAwC1C,UAAnE;AACA,MAAM6C,oBAAoB,GAAGhB,KAAK,CAACiB,OAAN,CAAc,YAAM;AAC7C,QAAMC,IAAI,GAAGrB,aAAa,KAAK,OAAlB,GAA4BkB,kBAAkB,CAACI,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAA5B,GAA6DJ,kBAA1E;AACA,WAAO,IAAIK,GAAJ,CAAQF,IAAR,CAAP;AACH,GAH4B,EAG1B,CAACH,kBAAD,EAAqBlB,aAArB,CAH0B,CAA7B,CAPuD,CAWvD;;AAXuD,yBAYTG,KAAK,CAACY,QAAN,CAAe,IAAf,CAZS;AAAA;AAAA,MAYhDS,eAZgD;AAAA,MAY/BC,kBAZ+B,wBAavD;;;AACAtB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAM;AAClB,QAAI,CAACtC,YAAL,EAAmB;AACf6B,MAAAA,oBAAoB,CAAC,EAAD,CAApB;AACH;AACJ,GAJD,EAIG,CAAC,CAAC,CAAC7B,YAAH,CAJH;AAKA,MAAMuC,eAAe,GAAGxB,KAAK,CAACyB,WAAN,CAAkB,UAACP,IAAD,EAAU;AAChDJ,IAAAA,oBAAoB,CAACI,IAAD,CAApB;AACA,QAAMQ,OAAO,GAAGR,IAAI,CAACS,GAAL,CAAS,UAAAC,GAAG;AAAA,aAAInB,cAAc,CAACmB,GAAD,CAAlB;AAAA,KAAZ,CAAhB;;AACA,QAAIvC,iBAAJ,EAAuB;AACnBA,MAAAA,iBAAiB,CAAC6B,IAAD,EAAOQ,OAAP,CAAjB;AACH;AACJ,GANuB,EAMrB,CAACZ,oBAAD,EAAuBL,cAAvB,EAAuCpB,iBAAvC,CANqB,CAAxB,CAnBuD,CA0BvD;;AACA,MAAMwC,sBAAsB,GAAG7B,KAAK,CAACyB,WAAN,CAAkB,UAACG,GAAD,EAAME,QAAN,EAAgBZ,IAAhB,EAAsBa,KAAtB,EAAgC;AAC7E,QAAIxC,QAAJ,EAAc;AACV,UAAMyC,IAAI,GAAGd,IAAI,CAACS,GAAL,CAAS,UAAAM,CAAC;AAAA,eAAIxB,cAAc,CAACwB,CAAD,CAAlB;AAAA,OAAV,CAAb;AACA1C,MAAAA,QAAQ,CAACkB,cAAc,CAACmB,GAAD,CAAf,EAAsBE,QAAtB,EAAgCE,IAAhC,EAAsCD,KAAtC,CAAR;AACH;;AACDP,IAAAA,eAAe,CAACN,IAAD,CAAf;AACH,GAN8B,EAM5B,CAAC3B,QAAD,EAAWkB,cAAX,EAA2Be,eAA3B,CAN4B,CAA/B;AAOA,MAAMU,gBAAgB,GAAGlC,KAAK,CAACiB,OAAN,CAAc,YAAM;AACzC,QAAI,CAAClB,UAAL,EAAiB;AACb,aAAO,IAAP;AACH;;AACD,QAAMoC,aAAa,GAAGpC,UAAU,KAAK,IAAf,GAAsB,CAAC3B,aAAD,EAAgBC,gBAAhB,CAAtB,GAA0D0B,UAAhF;AACA,WAAOoC,aAAa,CAACR,GAAd,CAAkB,UAACS,SAAD,EAAe;AACpC,UAAIA,SAAS,KAAKhE,aAAlB,EAAiC;AAC7B,eAAO;AACHwD,UAAAA,GAAG,EAAE,KADF;AAEHS,UAAAA,IAAI,EAAEhC,WAAW,CAACiC,YAFf;AAGH/C,UAAAA,QAHG,sBAGQ;AACPiC,YAAAA,eAAe,CAAC9C,IAAI,CAACiD,GAAL,CAAS,UAAC7C,MAAD,EAASyD,KAAT;AAAA,qBAAmB7B,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAA5B;AAAA,aAAT,CAAD,CAAf;AACH;AALE,SAAP;AAOH;;AACD,UAAIH,SAAS,KAAK/D,gBAAlB,EAAoC;AAChC,eAAO;AACHuD,UAAAA,GAAG,EAAE,QADF;AAEHS,UAAAA,IAAI,EAAEhC,WAAW,CAACmC,YAFf;AAGHjD,UAAAA,QAHG,sBAGQ;AACP,gBAAMkD,MAAM,GAAG,IAAIrB,GAAJ,CAAQJ,oBAAR,CAAf;AACAR,YAAAA,QAAQ,CAAC3B,OAAT,CAAiB,UAACC,MAAD,EAASyD,KAAT,EAAmB;AAChC,kBAAMX,GAAG,GAAGlB,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAArB;;AACA,kBAAIE,MAAM,CAACC,GAAP,CAAWd,GAAX,CAAJ,EAAqB;AACjBa,gBAAAA,MAAM,UAAN,CAAcb,GAAd;AACH,eAFD,MAGK;AACDa,gBAAAA,MAAM,CAACE,GAAP,CAAWf,GAAX;AACH;AACJ,aARD;AASA,gBAAMV,IAAI,GAAG0B,KAAK,CAACC,IAAN,CAAWJ,MAAX,CAAb;AACAjB,YAAAA,eAAe,CAACN,IAAD,CAAf;;AACA,gBAAIzB,cAAJ,EAAoB;AAChB,uCAAQ,KAAR,EAAe,OAAf,EAAwB,4EAAxB;AACAA,cAAAA,cAAc,CAACyB,IAAD,CAAd;AACH;AACJ;AApBE,SAAP;AAsBH;;AACD,aAAOkB,SAAP;AACH,KAnCM,CAAP;AAoCH,GAzCwB,EAyCtB,CAACrC,UAAD,EAAaiB,oBAAb,EAAmCR,QAAnC,EAA6CE,SAA7C,CAzCsB,CAAzB;AA0CA,MAAMoC,gBAAgB,GAAG9C,KAAK,CAACyB,WAAN,CAAkB,UAACsB,OAAD,EAAa;AACpD,QAAI,CAAC9D,YAAL,EAAmB;AACf,aAAO8D,OAAP;AACH,KAHmD,CAIpD;;;AACA,QAAMC,WAAW,GAAGvE,WAAW,CAAC+B,QAAD,EAAW7B,kBAAX,CAA/B,CALoD,CAMpD;;AACA,QAAM8D,MAAM,GAAG,IAAIrB,GAAJ,CAAQJ,oBAAR,CAAf,CAPoD,CAQpD;;AACA,QAAMiC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;AACAF,IAAAA,WAAW,CAACnE,OAAZ,CAAoB,UAACC,MAAD,EAASyD,KAAT,EAAmB;AACnC,UAAMX,GAAG,GAAGlB,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAArB;AACA,UAAMY,aAAa,GAAG,CAAC/D,gBAAgB,GAAGA,gBAAgB,CAACN,MAAD,CAAnB,GAA8B,IAA/C,KAAwD,EAA9E;AACAmE,MAAAA,gBAAgB,CAACG,GAAjB,CAAqBxB,GAArB,EAA0BuB,aAA1B;;AACA,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,KACC,aAAaJ,aAAb,IAA8B,oBAAoBA,aADnD,CAAJ,EACuE;AACnE,iCAAQ,KAAR,EAAe,OAAf,EAAwB,uGAAxB;AACH;AACJ,KARD,EAVoD,CAmBpD;;AACA,QAAMK,UAAU,GAAGR,WAAW,CACzBrB,GADc,CACVjB,SADU,EAEd+C,MAFc,CAEP,UAAA7B,GAAG;AAAA,aAAI,CAACqB,gBAAgB,CAACS,GAAjB,CAAqB9B,GAArB,EAA0B+B,QAA/B;AAAA,KAFI,CAAnB;AAGA,QAAMC,iBAAiB,GAAGJ,UAAU,CAACK,KAAX,CAAiB,UAAAjC,GAAG;AAAA,aAAIa,MAAM,CAACC,GAAP,CAAWd,GAAX,CAAJ;AAAA,KAApB,CAA1B;AACA,QAAMkC,kBAAkB,GAAGN,UAAU,CAACO,IAAX,CAAgB,UAAAnC,GAAG;AAAA,aAAIa,MAAM,CAACC,GAAP,CAAWd,GAAX,CAAJ;AAAA,KAAnB,CAA3B;;AACA,QAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,UAAMC,UAAU,GAAG,EAAnB;;AACA,UAAIL,iBAAJ,EAAuB;AACnBJ,QAAAA,UAAU,CAAC3E,OAAX,CAAmB,UAAA+C,GAAG,EAAI;AACtBa,UAAAA,MAAM,UAAN,CAAcb,GAAd;AACAqC,UAAAA,UAAU,CAAClF,IAAX,CAAgB6C,GAAhB;AACH,SAHD;AAIH,OALD,MAMK;AACD4B,QAAAA,UAAU,CAAC3E,OAAX,CAAmB,UAAA+C,GAAG,EAAI;AACtBa,UAAAA,MAAM,CAACE,GAAP,CAAWf,GAAX;AACAqC,UAAAA,UAAU,CAAClF,IAAX,CAAgB6C,GAAhB;AACH,SAHD;AAIH;;AACD,UAAMV,IAAI,GAAG0B,KAAK,CAACC,IAAN,CAAWJ,MAAX,CAAb;AACAjB,MAAAA,eAAe,CAACN,IAAD,CAAf;;AACA,UAAI1B,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAAC,CAACoE,iBAAF,EAAqB1C,IAAI,CAACS,GAAL,CAAS,UAAAM,CAAC;AAAA,iBAAIxB,cAAc,CAACwB,CAAD,CAAlB;AAAA,SAAV,CAArB,EAAuDgC,UAAU,CAACtC,GAAX,CAAe,UAAAM,CAAC;AAAA,iBAAIxB,cAAc,CAACwB,CAAD,CAAlB;AAAA,SAAhB,CAAvD,CAAX;AACH;AACJ,KAnBD,CAzBoD,CA6CpD;AACA;;;AACA,QAAIiC,KAAJ;;AACA,QAAIrE,aAAa,KAAK,OAAtB,EAA+B;AAC3B,UAAIsE,mBAAJ;;AACA,UAAIjC,gBAAJ,EAAsB;AAClB,YAAMkC,IAAI,GAAI,oBAAC,gBAAD,QACflC,gBAAgB,CAACP,GAAjB,CAAqB,UAACS,SAAD,EAAYG,KAAZ,EAAsB;AAAA,cAC9BX,GAD8B,GACYQ,SADZ,CAC9BR,GAD8B;AAAA,cACzBS,IADyB,GACYD,SADZ,CACzBC,IADyB;AAAA,cACTgC,gBADS,GACYjC,SADZ,CACnB7C,QADmB;AAEtC,iBAAQ,oBAAC,gBAAD,CAAM,IAAN;AAAW,YAAA,GAAG,EAAEqC,GAAG,IAAIW,KAAvB;AAA8B,YAAA,OAAO,EAAE,mBAAM;AACjD,kBAAI8B,gBAAJ,EAAsB;AAClBA,gBAAAA,gBAAgB,CAACb,UAAD,CAAhB;AACH;AACJ;AAJO,aAKPnB,IALO,CAAR;AAOH,SATF,CADe,CAAd;AAYA8B,QAAAA,mBAAmB,GAAI;AAAK,UAAA,SAAS,YAAK5D,SAAL;AAAd,WACzB,oBAAC,oBAAD;AAAU,UAAA,OAAO,EAAE6D;AAAnB,WACE,kCACE,oBAAC,mBAAD,OADF,CADF,CADyB,CAAvB;AAOH;;AACD,UAAME,WAAW,GAAGtB,WAAW,CAACa,KAAZ,CAAkB,UAAC/E,MAAD,EAASyD,KAAT,EAAmB;AACrD,YAAMX,GAAG,GAAGlB,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAArB;AACA,YAAMY,aAAa,GAAGF,gBAAgB,CAACS,GAAjB,CAAqB9B,GAArB,KAA6B,EAAnD;AACA,eAAOuB,aAAa,CAACQ,QAArB;AACH,OAJmB,CAApB;AAKAO,MAAAA,KAAK,GAAI;AAAK,QAAA,SAAS,YAAK3D,SAAL;AAAd,SACT,oBAAC,oBAAD;AAAU,QAAA,OAAO,EAAE,CAAC+D,WAAD,IAAgB,CAAC,CAACtB,WAAW,CAACuB,MAA9B,IAAwCX,iBAA3D;AAA8E,QAAA,aAAa,EAAE,CAACA,iBAAD,IAAsBE,kBAAnH;AAAuI,QAAA,QAAQ,EAAEE,iBAAjJ;AAAoK,QAAA,QAAQ,EAAEhB,WAAW,CAACuB,MAAZ,KAAuB,CAAvB,IAA4BD;AAA1M,QADS,EAERH,mBAFQ,CAAT;AAIH,KAhFmD,CAiFpD;;;AACA,QAAIK,UAAJ;;AACA,QAAI3E,aAAa,KAAK,OAAtB,EAA+B;AAC3B2E,MAAAA,UAAU,GAAG,oBAACC,CAAD,EAAI3F,MAAJ,EAAYyD,KAAZ,EAAsB;AAC/B,YAAMX,GAAG,GAAGlB,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAArB;AACA,eAAQ,oBAAC,iBAAD,eAAWU,gBAAgB,CAACS,GAAjB,CAAqB9B,GAArB,CAAX;AAAsC,UAAA,OAAO,EAAEa,MAAM,CAACC,GAAP,CAAWd,GAAX,CAA/C;AAAgE,UAAA,QAAQ,EAAE,kBAAAG,KAAK,EAAI;AACvF,gBAAI,CAACU,MAAM,CAACC,GAAP,CAAWd,GAAX,CAAL,EAAsB;AAClBC,cAAAA,sBAAsB,CAACD,GAAD,EAAM,IAAN,EAAY,CAACA,GAAD,CAAZ,EAAmBG,KAAK,CAAC2C,WAAzB,CAAtB;AACH;AACJ;AAJO,WAAR;AAKH,OAPD;AAQH,KATD,MAUK;AACDF,MAAAA,UAAU,GAAG,oBAACC,CAAD,EAAI3F,MAAJ,EAAYyD,KAAZ,EAAsB;AAC/B,YAAMX,GAAG,GAAGlB,SAAS,CAAC5B,MAAD,EAASyD,KAAT,CAArB;AACA,YAAMoC,MAAM,GAAGlC,MAAM,CAACC,GAAP,CAAWd,GAAX,CAAf,CAF+B,CAG/B;;AACA,eAAQ,oBAAC,oBAAD,eAAcqB,gBAAgB,CAACS,GAAjB,CAAqB9B,GAArB,CAAd;AAAyC,UAAA,OAAO,EAAE+C,MAAlD;AAA0D,UAAA,QAAQ,EAAE,yBAAqB;AAAA,gBAAlBD,WAAkB,SAAlBA,WAAkB;AAAA,gBACrFE,QADqF,GACxEF,WADwE,CACrFE,QADqF;AAE7F,gBAAIC,UAAU,GAAG,CAAC,CAAlB;AACA,gBAAIC,QAAQ,GAAG,CAAC,CAAhB,CAH6F,CAI7F;;AACA,gBAAIF,QAAJ,EAAc;AACV,kBAAMG,SAAS,GAAG,IAAI3D,GAAJ,CAAQ,CAACC,eAAD,EAAkBO,GAAlB,CAAR,CAAlB;AACA4B,cAAAA,UAAU,CAACO,IAAX,CAAgB,UAACiB,SAAD,EAAYC,WAAZ,EAA4B;AACxC,oBAAIF,SAAS,CAACrC,GAAV,CAAcsC,SAAd,CAAJ,EAA8B;AAC1B,sBAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnBA,oBAAAA,UAAU,GAAGI,WAAb;AACH,mBAFD,MAGK;AACDH,oBAAAA,QAAQ,GAAGG,WAAX;AACA,2BAAO,IAAP;AACH;AACJ;;AACD,uBAAO,KAAP;AACH,eAXD;AAYH;;AACD,gBAAIH,QAAQ,KAAK,CAAC,CAAd,IAAmBD,UAAU,KAAKC,QAAtC,EAAgD;AAC5C;AACA,kBAAMI,SAAS,GAAG1B,UAAU,CAACrC,KAAX,CAAiB0D,UAAjB,EAA6BC,QAAQ,GAAG,CAAxC,CAAlB;AACA,kBAAMK,WAAW,GAAG,EAApB;;AACA,kBAAIR,MAAJ,EAAY;AACRO,gBAAAA,SAAS,CAACrG,OAAV,CAAkB,UAAAmG,SAAS,EAAI;AAC3B,sBAAIvC,MAAM,CAACC,GAAP,CAAWsC,SAAX,CAAJ,EAA2B;AACvBG,oBAAAA,WAAW,CAACpG,IAAZ,CAAiBiG,SAAjB;AACAvC,oBAAAA,MAAM,UAAN,CAAcuC,SAAd;AACH;AACJ,iBALD;AAMH,eAPD,MAQK;AACDE,gBAAAA,SAAS,CAACrG,OAAV,CAAkB,UAAAmG,SAAS,EAAI;AAC3B,sBAAI,CAACvC,MAAM,CAACC,GAAP,CAAWsC,SAAX,CAAL,EAA4B;AACxBG,oBAAAA,WAAW,CAACpG,IAAZ,CAAiBiG,SAAjB;AACAvC,oBAAAA,MAAM,CAACE,GAAP,CAAWqC,SAAX;AACH;AACJ,iBALD;AAMH;;AACD,kBAAM9D,IAAI,GAAG0B,KAAK,CAACC,IAAN,CAAWJ,MAAX,CAAb;AACAjB,cAAAA,eAAe,CAACN,IAAD,CAAf;;AACA,kBAAIxB,gBAAJ,EAAsB;AAClBA,gBAAAA,gBAAgB,CAAC,CAACiF,MAAF,EAAUzD,IAAI,CAACS,GAAL,CAAS,UAAAqD,SAAS;AAAA,yBAAIvE,cAAc,CAACuE,SAAD,CAAlB;AAAA,iBAAlB,CAAV,EAA4DG,WAAW,CAACxD,GAAZ,CAAgB,UAAAqD,SAAS;AAAA,yBAAIvE,cAAc,CAACuE,SAAD,CAAlB;AAAA,iBAAzB,CAA5D,CAAhB;AACH;AACJ,aAzBD,MA0BK;AACD;AACA,kBAAIL,MAAJ,EAAY;AACRlC,gBAAAA,MAAM,UAAN,CAAcb,GAAd;AACH,eAFD,MAGK;AACDa,gBAAAA,MAAM,CAACE,GAAP,CAAWf,GAAX;AACH;;AACDC,cAAAA,sBAAsB,CAACD,GAAD,EAAM,CAAC+C,MAAP,EAAe/B,KAAK,CAACC,IAAN,CAAWJ,MAAX,CAAf,EAAmCiC,WAAnC,CAAtB;AACH;;AACDpD,YAAAA,kBAAkB,CAACM,GAAD,CAAlB;AACH;AAzDO,WAAR;AA0DH,OA9DD;AA+DH,KA7JmD,CA8JpD;;;AACA,QAAMwD,eAAe,GAAG;AACpBC,MAAAA,KAAK,EAAEzF,iBADa;AAEpB0F,MAAAA,SAAS,YAAK/E,SAAL,sBAFW;AAGpB2D,MAAAA,KAAK,EAAEjF,YAAY,CAACsG,WAAb,IAA4BrB,KAHf;AAIpBsB,MAAAA,MAAM,EAAEhB;AAJY,KAAxB;;AAMA,QAAI7D,UAAU,KAAK,KAAf,IAAwBoC,OAAO,CAACwB,MAApC,EAA4C;AAAA,8BACDxB,OADC;AAAA,UACjC0C,YADiC;AAAA,UAChBC,WADgB;;AAExC,cACID,YADJ,EAEI,SAAc,SAAc,EAAd,EAAkBL,eAAlB,CAAd,EAAkD;AAAE5G,QAAAA,KAAK,EAAEA,KAAK,IAAIF,YAAY,CAACoH,WAAW,CAAC,CAAD,CAAZ;AAA9B,OAAlD,CAFJ,4BAGOA,WAHP;AAKH;;AACD,YAAQ,SAAc,SAAc,EAAd,EAAkBN,eAAlB,CAAd,EAAkD;AAAE5G,MAAAA,KAAK,EAAEA,KAAK,IAAIF,YAAY,CAACyE,OAAO,CAAC,CAAD,CAAR;AAA9B,KAAlD,CAAR,4BAA4GA,OAA5G;AACH,GA9KwB,EA8KtB,CACCrC,SADD,EAECF,QAFD,EAGCvB,YAHD,EAIC4B,iBAJD,EAKCE,kBALD,EAMCnB,iBAND,EAOCsC,gBAPD,EAQCvB,UARD,EASCU,eATD,EAUC3B,gBAVD,EAWCmC,sBAXD,CA9KsB,CAAzB;AA2LA,SAAO,CAACiB,gBAAD,EAAmB9B,oBAAnB,CAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning';\nimport { ConfigContext } from '../../config-provider';\nimport defaultLocale from '../../locale/en_US';\nconst EMPTY_LIST = [];\n// TODO: warning if use ajax!!!\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nfunction getFixedType(column) {\n    return column && column.fixed;\n}\nfunction flattenData(data, childrenColumnName) {\n    let list = [];\n    (data || []).forEach(record => {\n        list.push(record);\n        if (childrenColumnName in record) {\n            list = [\n                ...list,\n                ...flattenData(record[childrenColumnName], childrenColumnName),\n            ];\n        }\n    });\n    return list;\n}\nexport default function useSelection(rowSelection, config) {\n    const { selectedRowKeys, getCheckboxProps, onChange: onSelectionChange, onSelect, onSelectAll, onSelectInvert, onSelectMultiple, columnWidth: selectionColWidth = 60, type: selectionType, selections, fixed, } = rowSelection || {};\n    const { locale = defaultLocale } = React.useContext(ConfigContext);\n    const tableLocale = (locale.Table || {});\n    const { prefixCls, data, pageData, getRecordByKey, getRowKey, expandType, childrenColumnName, } = config;\n    const [innerSelectedKeys, setInnerSelectedKeys] = React.useState();\n    const mergedSelectedKeys = selectedRowKeys || innerSelectedKeys || EMPTY_LIST;\n    const mergedSelectedKeySet = React.useMemo(() => {\n        const keys = selectionType === 'radio' ? mergedSelectedKeys.slice(0, 1) : mergedSelectedKeys;\n        return new Set(keys);\n    }, [mergedSelectedKeys, selectionType]);\n    // Save last selected key to enable range selection\n    const [lastSelectedKey, setLastSelectedKey] = React.useState(null);\n    // Reset if rowSelection reset\n    React.useEffect(() => {\n        if (!rowSelection) {\n            setInnerSelectedKeys([]);\n        }\n    }, [!!rowSelection]);\n    const setSelectedKeys = React.useCallback((keys) => {\n        setInnerSelectedKeys(keys);\n        const records = keys.map(key => getRecordByKey(key));\n        if (onSelectionChange) {\n            onSelectionChange(keys, records);\n        }\n    }, [setInnerSelectedKeys, getRecordByKey, onSelectionChange]);\n    // Trigger single `onSelect` event\n    const triggerSingleSelection = React.useCallback((key, selected, keys, event) => {\n        if (onSelect) {\n            const rows = keys.map(k => getRecordByKey(k));\n            onSelect(getRecordByKey(key), selected, rows, event);\n        }\n        setSelectedKeys(keys);\n    }, [onSelect, getRecordByKey, setSelectedKeys]);\n    const mergedSelections = React.useMemo(() => {\n        if (!selections) {\n            return null;\n        }\n        const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT] : selections;\n        return selectionList.map((selection) => {\n            if (selection === SELECTION_ALL) {\n                return {\n                    key: 'all',\n                    text: tableLocale.selectionAll,\n                    onSelect() {\n                        setSelectedKeys(data.map((record, index) => getRowKey(record, index)));\n                    },\n                };\n            }\n            if (selection === SELECTION_INVERT) {\n                return {\n                    key: 'invert',\n                    text: tableLocale.selectInvert,\n                    onSelect() {\n                        const keySet = new Set(mergedSelectedKeySet);\n                        pageData.forEach((record, index) => {\n                            const key = getRowKey(record, index);\n                            if (keySet.has(key)) {\n                                keySet.delete(key);\n                            }\n                            else {\n                                keySet.add(key);\n                            }\n                        });\n                        const keys = Array.from(keySet);\n                        setSelectedKeys(keys);\n                        if (onSelectInvert) {\n                            warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n                            onSelectInvert(keys);\n                        }\n                    },\n                };\n            }\n            return selection;\n        });\n    }, [selections, mergedSelectedKeySet, pageData, getRowKey]);\n    const transformColumns = React.useCallback((columns) => {\n        if (!rowSelection) {\n            return columns;\n        }\n        // Get flatten data\n        const flattedData = flattenData(pageData, childrenColumnName);\n        // Support selection\n        const keySet = new Set(mergedSelectedKeySet);\n        // Get all checkbox props\n        const checkboxPropsMap = new Map();\n        flattedData.forEach((record, index) => {\n            const key = getRowKey(record, index);\n            const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n            checkboxPropsMap.set(key, checkboxProps);\n            if (process.env.NODE_ENV !== 'production' &&\n                ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n                warning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n            }\n        });\n        // Record key only need check with enabled\n        const recordKeys = flattedData\n            .map(getRowKey)\n            .filter(key => !checkboxPropsMap.get(key).disabled);\n        const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n        const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n        const onSelectAllChange = () => {\n            const changeKeys = [];\n            if (checkedCurrentAll) {\n                recordKeys.forEach(key => {\n                    keySet.delete(key);\n                    changeKeys.push(key);\n                });\n            }\n            else {\n                recordKeys.forEach(key => {\n                    keySet.add(key);\n                    changeKeys.push(key);\n                });\n            }\n            const keys = Array.from(keySet);\n            setSelectedKeys(keys);\n            if (onSelectAll) {\n                onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n            }\n        };\n        // ===================== Render =====================\n        // Title Cell\n        let title;\n        if (selectionType !== 'radio') {\n            let customizeSelections;\n            if (mergedSelections) {\n                const menu = (<Menu>\n              {mergedSelections.map((selection, index) => {\n                    const { key, text, onSelect: onSelectionClick } = selection;\n                    return (<Menu.Item key={key || index} onClick={() => {\n                        if (onSelectionClick) {\n                            onSelectionClick(recordKeys);\n                        }\n                    }}>\n                    {text}\n                  </Menu.Item>);\n                })}\n            </Menu>);\n                customizeSelections = (<div className={`${prefixCls}-selection-extra`}>\n              <Dropdown overlay={menu}>\n                <span>\n                  <DownOutlined />\n                </span>\n              </Dropdown>\n            </div>);\n            }\n            const allDisabled = flattedData.every((record, index) => {\n                const key = getRowKey(record, index);\n                const checkboxProps = checkboxPropsMap.get(key) || {};\n                return checkboxProps.disabled;\n            });\n            title = (<div className={`${prefixCls}-selection`}>\n            <Checkbox checked={!allDisabled && !!flattedData.length && checkedCurrentAll} indeterminate={!checkedCurrentAll && checkedCurrentSome} onChange={onSelectAllChange} disabled={flattedData.length === 0 || allDisabled}/>\n            {customizeSelections}\n          </div>);\n        }\n        // Body Cell\n        let renderCell;\n        if (selectionType === 'radio') {\n            renderCell = (_, record, index) => {\n                const key = getRowKey(record, index);\n                return (<Radio {...checkboxPropsMap.get(key)} checked={keySet.has(key)} onChange={event => {\n                    if (!keySet.has(key)) {\n                        triggerSingleSelection(key, true, [key], event.nativeEvent);\n                    }\n                }}/>);\n            };\n        }\n        else {\n            renderCell = (_, record, index) => {\n                const key = getRowKey(record, index);\n                const hasKey = keySet.has(key);\n                // Record checked\n                return (<Checkbox {...checkboxPropsMap.get(key)} checked={hasKey} onChange={({ nativeEvent }) => {\n                    const { shiftKey } = nativeEvent;\n                    let startIndex = -1;\n                    let endIndex = -1;\n                    // Get range of this\n                    if (shiftKey) {\n                        const pointKeys = new Set([lastSelectedKey, key]);\n                        recordKeys.some((recordKey, recordIndex) => {\n                            if (pointKeys.has(recordKey)) {\n                                if (startIndex === -1) {\n                                    startIndex = recordIndex;\n                                }\n                                else {\n                                    endIndex = recordIndex;\n                                    return true;\n                                }\n                            }\n                            return false;\n                        });\n                    }\n                    if (endIndex !== -1 && startIndex !== endIndex) {\n                        // Batch update selections\n                        const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                        const changedKeys = [];\n                        if (hasKey) {\n                            rangeKeys.forEach(recordKey => {\n                                if (keySet.has(recordKey)) {\n                                    changedKeys.push(recordKey);\n                                    keySet.delete(recordKey);\n                                }\n                            });\n                        }\n                        else {\n                            rangeKeys.forEach(recordKey => {\n                                if (!keySet.has(recordKey)) {\n                                    changedKeys.push(recordKey);\n                                    keySet.add(recordKey);\n                                }\n                            });\n                        }\n                        const keys = Array.from(keySet);\n                        setSelectedKeys(keys);\n                        if (onSelectMultiple) {\n                            onSelectMultiple(!hasKey, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                        }\n                    }\n                    else {\n                        // Single record selected\n                        if (hasKey) {\n                            keySet.delete(key);\n                        }\n                        else {\n                            keySet.add(key);\n                        }\n                        triggerSingleSelection(key, !hasKey, Array.from(keySet), nativeEvent);\n                    }\n                    setLastSelectedKey(key);\n                }}/>);\n            };\n        }\n        // Columns\n        const selectionColumn = {\n            width: selectionColWidth,\n            className: `${prefixCls}-selection-column`,\n            title: rowSelection.columnTitle || title,\n            render: renderCell,\n        };\n        if (expandType === 'row' && columns.length) {\n            const [expandColumn, ...restColumns] = columns;\n            return [\n                expandColumn,\n                Object.assign(Object.assign({}, selectionColumn), { fixed: fixed || getFixedType(restColumns[0]) }),\n                ...restColumns,\n            ];\n        }\n        return [Object.assign(Object.assign({}, selectionColumn), { fixed: fixed || getFixedType(columns[0]) }), ...columns];\n    }, [\n        getRowKey,\n        pageData,\n        rowSelection,\n        innerSelectedKeys,\n        mergedSelectedKeys,\n        selectionColWidth,\n        mergedSelections,\n        expandType,\n        lastSelectedKey,\n        onSelectMultiple,\n        triggerSingleSelection,\n    ]);\n    return [transformColumns, mergedSelectedKeySet];\n}\n"],"file":"useSelection.js"}