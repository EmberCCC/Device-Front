{"version":3,"sources":["table/hooks/useFilter/index.jsx"],"names":["collectFilterStates","columns","init","pos","filterStates","forEach","column","index","columnPos","children","push","key","filteredKeys","filteredValue","defaultFilteredValue","undefined","injectFilter","prefixCls","dropdownPrefixCls","triggerFilter","getPopupContainer","locale","map","filterMultiple","columnKey","filterState","find","title","renderProps","generateFilterInfo","currentFilters","flattenKeys","filters","keys","value","getFilterData","data","reduce","currentData","onFilter","length","filter","record","some","keyIndex","findIndex","k","String","realKey","useFilter","onFilterChange","React","useContext","ConfigContext","defaultLocale","tableLocale","Table","useState","setFilterStates","mergedFilterStates","useMemo","collectedStates","every","getFilters","useCallback","newFilterStates","transformColumns","innerColumns"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getColumnPos, renderColumnTitle, getColumnKey } from '../../util';\nimport FilterDropdown from './FilterDropdown';\nimport { ConfigContext } from '../../../config-provider';\nimport defaultLocale from '../../../locale/en_US';\nfunction collectFilterStates(columns, init, pos) {\n    let filterStates = [];\n    (columns || []).forEach((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        if ('children' in column) {\n            filterStates = [...filterStates, ...collectFilterStates(column.children, init, columnPos)];\n        }\n        else if ('filters' in column || 'filterDropdown' in column) {\n            if ('filteredValue' in column) {\n                // Controlled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: column.filteredValue,\n                });\n            }\n            else {\n                // Uncontrolled\n                filterStates.push({\n                    column,\n                    key: getColumnKey(column, columnPos),\n                    filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n                });\n            }\n        }\n    });\n    return filterStates;\n}\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {\n    return columns.map((column, index) => {\n        const columnPos = getColumnPos(index, pos);\n        const { filterMultiple = true } = column;\n        if ('filters' in column || 'filterDropdown' in column) {\n            const columnKey = getColumnKey(column, columnPos);\n            const filterState = filterStates.find(({ key }) => columnKey === key);\n            return Object.assign(Object.assign({}, column), { title: (renderProps) => (<FilterDropdown prefixCls={`${prefixCls}-filter`} dropdownPrefixCls={dropdownPrefixCls} column={column} columnKey={columnKey} filterState={filterState} filterMultiple={filterMultiple} triggerFilter={triggerFilter} locale={locale} getPopupContainer={getPopupContainer}>\n            {renderColumnTitle(column.title, renderProps)}\n          </FilterDropdown>) });\n        }\n        if ('children' in column) {\n            return Object.assign(Object.assign({}, column), { children: injectFilter(prefixCls, dropdownPrefixCls, column.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos) });\n        }\n        return column;\n    });\n}\nfunction generateFilterInfo(filterStates) {\n    const currentFilters = {};\n    filterStates.forEach(({ key, filteredKeys }) => {\n        currentFilters[key] = filteredKeys || null;\n    });\n    return currentFilters;\n}\nfunction flattenKeys(filters) {\n    let keys = [];\n    (filters || []).forEach(({ value, children }) => {\n        keys.push(value);\n        if (children) {\n            keys = [...keys, ...flattenKeys(children)];\n        }\n    });\n    return keys;\n}\nexport function getFilterData(data, filterStates) {\n    return filterStates.reduce((currentData, filterState) => {\n        const { column: { onFilter, filters }, filteredKeys, } = filterState;\n        if (onFilter && filteredKeys && filteredKeys.length) {\n            return currentData.filter(record => filteredKeys.some(key => {\n                const keys = flattenKeys(filters);\n                const keyIndex = keys.findIndex(k => String(k) === String(key));\n                const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n                return onFilter(realKey, record);\n            }));\n        }\n        return currentData;\n    }, data);\n}\nfunction useFilter({ prefixCls, dropdownPrefixCls = 'ant-dropdown', columns, onFilterChange, getPopupContainer, }) {\n    const { locale = defaultLocale } = React.useContext(ConfigContext);\n    const tableLocale = (locale.Table || {});\n    const [filterStates, setFilterStates] = React.useState(collectFilterStates(columns, true));\n    const mergedFilterStates = React.useMemo(() => {\n        const collectedStates = collectFilterStates(columns, false);\n        // Return if not controlled\n        if (collectedStates.every(({ filteredKeys }) => filteredKeys === undefined)) {\n            return filterStates;\n        }\n        return collectedStates;\n    }, [columns, filterStates]);\n    const getFilters = React.useCallback(() => generateFilterInfo(mergedFilterStates), [\n        mergedFilterStates,\n    ]);\n    const triggerFilter = (filterState) => {\n        const newFilterStates = mergedFilterStates.filter(({ key }) => key !== filterState.key);\n        newFilterStates.push(filterState);\n        setFilterStates(newFilterStates);\n        onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n    };\n    const transformColumns = (innerColumns) => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);\n    return [transformColumns, mergedFilterStates, getFilters];\n}\nexport default useFilter;\n"],"file":"index.js"}