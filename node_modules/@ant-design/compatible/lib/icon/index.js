"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var allIcons = _interopRequireWildcard(require("@ant-design/icons/lib/icons"));

var _icons2 = _interopRequireWildcard(require("@ant-design/icons"));

var _utils = require("./utils");

var _warning = _interopRequireDefault(require("../_util/warning"));

var _upgradeMessage = _interopRequireDefault(require("../_util/upgradeMessage"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconsMap = allIcons;

var LegacyTypeIcon = function LegacyTypeIcon(props) {
  var type = props.type,
      theme = props.theme;

  if (theme) {
    var themeInName = (0, _utils.getThemeFromTypeName)(type);
    (0, _warning.default)(!themeInName || theme === themeInName, 'Icon', "The icon name '".concat(type, "' already specify a theme '").concat(themeInName, "',") + " the 'theme' prop '".concat(theme, "' will be ignored."));
  }

  var computedType = (0, _utils.withThemeSuffix)((0, _utils.removeTypeTheme)((0, _utils.alias)(type)), theme || 'outlined');
  var targetIconComponent = iconsMap[computedType];
  (0, _warning.default)(targetIconComponent, 'Icon', "The icon name '".concat(type, "'").concat(theme ? "with ".concat(theme) : '', " doesn't exist, please check it at https://ant.design/components/icon"));
  return targetIconComponent ? _react.default.createElement(targetIconComponent, props) : null;
};

var Icon = function Icon(props) {
  var type = props.type,
      component = props.component,
      children = props.children;
  (0, _upgradeMessage.default)('Icon');
  (0, _warning.default)(Boolean(type || component || children), 'Icon', 'Should have `type` prop or `component` prop or `children`.');

  if (component || children) {
    return _react.default.createElement(_icons2.default, Object.assign({}, props));
  }

  if (typeof type === 'string') {
    return _react.default.createElement(LegacyTypeIcon, Object.assign({}, props, {
      type: type
    }));
  }

  return _react.default.createElement(_icons2.default, null);
};

Icon.createFromIconfontCN = _icons2.createFromIconfontCN;
Icon.getTwoToneColor = _icons2.getTwoToneColor;
Icon.setTwoToneColor = _icons2.setTwoToneColor;
var _default = Icon;
exports.default = _default;