{"ast":null,"code":"import \"antd/es/tabs/style\";\nimport _Tabs from \"antd/es/tabs\";\nvar _excluded = [\"tabName\", \"type\", \"draggable\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n\nimport React, { useState, useRef } from 'react';\nimport Core from '../../index';\nvar TabPane = _Tabs.TabPane;\nvar dragType = 'DraggableTabNode';\n\nvar DraggableTabNode = function DraggableTabNode(_ref) {\n  var index = _ref.index,\n      children = _ref.children,\n      moveNode = _ref.moveNode;\n  var ref = useRef(null);\n\n  var _useDrop = useDrop({\n    accept: dragType,\n    collect: function collect(monitor) {\n      var _ref2 = monitor.getItem() || {},\n          dragIndex = _ref2.index;\n\n      if (dragIndex === index) {\n        return {};\n      }\n\n      return {\n        isOver: monitor.isOver(),\n        dropClassName: 'dropping'\n      };\n    },\n    drop: function drop(item) {\n      moveNode(item.index, index);\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      _useDrop2$ = _useDrop2[0],\n      isOver = _useDrop2$.isOver,\n      dropClassName = _useDrop2$.dropClassName,\n      drop = _useDrop2[1];\n\n  var _useDrag = useDrag({\n    type: dragType,\n    item: {\n      index: index\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 2),\n      drag = _useDrag2[1];\n\n  drop(drag(ref));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    style: {\n      marginRight: 2\n    },\n    className: isOver ? dropClassName : ''\n  }, children);\n};\n\nvar TabList = function TabList(_ref3) {\n  var _ref3$displayList = _ref3.displayList,\n      displayList = _ref3$displayList === void 0 ? [] : _ref3$displayList,\n      listData = _ref3.listData,\n      changeList = _ref3.changeList,\n      schema = _ref3.schema,\n      deleteItem = _ref3.deleteItem,\n      copyItem = _ref3.copyItem,\n      addItem = _ref3.addItem,\n      moveItemUp = _ref3.moveItemUp,\n      moveItemDown = _ref3.moveItemDown,\n      displayType = _ref3.displayType,\n      getFieldsProps = _ref3.getFieldsProps;\n\n  var _useState = useState('0'),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeKey = _useState2[0],\n      setActiveKey = _useState2[1];\n\n  var _schema$props = schema.props,\n      props = _schema$props === void 0 ? {} : _schema$props,\n      itemProps = schema.itemProps;\n\n  var tabName = props.tabName,\n      type = props.type,\n      _props$draggable = props.draggable,\n      draggable = _props$draggable === void 0 ? false : _props$draggable,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var onEdit = function onEdit(targetKey, action) {\n    if (action === 'add') {\n      var currentKey = addItem();\n      setActiveKey(\"\".concat(currentKey));\n    } else if (action === 'remove') {\n      deleteItem(Number(targetKey));\n      setActiveKey(\"\".concat(targetKey > 1 ? targetKey - 1 : 0));\n    } else {\n      return null;\n    }\n  }; //  如果tabName传数组是可以「自定义」tab页的名字的。表单联动可以使用formrender的watch 配合 setSchemaByPath\n\n\n  var getCurrentTabPaneName = function getCurrentTabPaneName(idx) {\n    return tabName instanceof Array ? tabName[idx] || idx + 1 : \"\".concat(tabName || '项目', \" \").concat(idx + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(_Tabs, _extends({\n    type: type || 'line',\n    onChange: setActiveKey,\n    activeKey: activeKey,\n    onEdit: onEdit\n  }, restProps), displayList.map(function (item, idx) {\n    var fieldsProps = getFieldsProps(idx);\n    fieldsProps.displayType = displayType;\n    return /*#__PURE__*/React.createElement(TabPane, {\n      tab: getCurrentTabPaneName(idx),\n      key: \"\".concat(idx)\n    }, /*#__PURE__*/React.createElement(Core, fieldsProps));\n  }));\n};\n\nexport default TabList;","map":null,"metadata":{},"sourceType":"module"}