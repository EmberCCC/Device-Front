{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport RcSlider from 'rc-slider';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SliderTooltip from './SliderTooltip';\nvar Slider = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction,\n      getPopupContainer = _React$useContext.getPopupContainer;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visibles = _React$useState2[0],\n      setVisibles = _React$useState2[1];\n\n  var toggleTooltipVisible = function toggleTooltipVisible(index, visible) {\n    setVisibles(function (prev) {\n      return _extends(_extends({}, prev), _defineProperty({}, index, visible));\n    });\n  };\n\n  var getTooltipPlacement = function getTooltipPlacement(tooltipPlacement, vertical) {\n    if (tooltipPlacement) {\n      return tooltipPlacement;\n    }\n\n    if (!vertical) {\n      return 'top';\n    }\n\n    return direction === 'rtl' ? 'left' : 'right';\n  };\n\n  var customizePrefixCls = props.prefixCls,\n      customizeTooltipPrefixCls = props.tooltipPrefixCls,\n      range = props.range,\n      className = props.className,\n      restProps = __rest(props, [\"prefixCls\", \"tooltipPrefixCls\", \"range\", \"className\"]);\n\n  var prefixCls = getPrefixCls('slider', customizePrefixCls);\n  var tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls);\n  var cls = classNames(className, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl')); // make reverse default on rtl direction\n\n  if (direction === 'rtl' && !restProps.vertical) {\n    restProps.reverse = !restProps.reverse;\n  } // Range config\n\n\n  var _React$useMemo = React.useMemo(function () {\n    if (!range) {\n      return [false];\n    }\n\n    return _typeof(range) === 'object' ? [true, range.draggableTrack] : [true, false];\n  }, [range]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      mergedRange = _React$useMemo2[0],\n      draggableTrack = _React$useMemo2[1];\n\n  var handleRender = function handleRender(node, info) {\n    var index = info.index,\n        dragging = info.dragging;\n    var rootPrefixCls = getPrefixCls();\n    var tipFormatter = props.tipFormatter,\n        tooltipVisible = props.tooltipVisible,\n        tooltipPlacement = props.tooltipPlacement,\n        getTooltipPopupContainer = props.getTooltipPopupContainer,\n        vertical = props.vertical;\n    var isTipFormatter = tipFormatter ? visibles[index] || dragging : false;\n    var visible = tooltipVisible || tooltipVisible === undefined && isTipFormatter;\n\n    var passedProps = _extends(_extends({}, node.props), {\n      onMouseEnter: function onMouseEnter() {\n        return toggleTooltipVisible(index, true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return toggleTooltipVisible(index, false);\n      }\n    });\n\n    return /*#__PURE__*/React.createElement(SliderTooltip, {\n      prefixCls: tooltipPrefixCls,\n      title: tipFormatter ? tipFormatter(info.value) : '',\n      visible: visible,\n      placement: getTooltipPlacement(tooltipPlacement, vertical),\n      transitionName: \"\".concat(rootPrefixCls, \"-zoom-down\"),\n      key: index,\n      overlayClassName: \"\".concat(prefixCls, \"-tooltip\"),\n      getPopupContainer: getTooltipPopupContainer || getPopupContainer\n    }, /*#__PURE__*/React.cloneElement(node, passedProps));\n  };\n\n  return /*#__PURE__*/React.createElement(RcSlider, _extends({}, restProps, {\n    step: restProps.step,\n    range: mergedRange,\n    draggableTrack: draggableTrack,\n    className: cls,\n    ref: ref,\n    prefixCls: prefixCls,\n    handleRender: handleRender\n  }));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Slider.displayName = 'Slider';\n}\n\nSlider.defaultProps = {\n  tipFormatter: function tipFormatter(value) {\n    return typeof value === 'number' ? value.toString() : '';\n  }\n};\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}