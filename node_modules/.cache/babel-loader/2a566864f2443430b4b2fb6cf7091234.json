{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { matchNamePath } from './valueUtil';\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\n\nvar NameMap =\n/*#__PURE__*/\nfunction () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n\n    this.list = [];\n  }\n\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      var index = this.list.findIndex(function (item) {\n        return matchNamePath(item.key, key);\n      });\n\n      if (index !== -1) {\n        this.list[index].value = value;\n      } else {\n        this.list.push({\n          key: key,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var result = this.list.find(function (item) {\n        return matchNamePath(item.key, key);\n      });\n      return result && result.value;\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.list = this.list.filter(function (item) {\n        return !matchNamePath(item.key, key);\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return this.list.map(callback);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n\n  return NameMap;\n}();\n\nexport default NameMap;","map":null,"metadata":{},"sourceType":"module"}