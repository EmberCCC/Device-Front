{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _defineProperty from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\Misaki\\\\Desktop\\\\kda\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\src\\\\layouts\\\\ZCloudDevice\\\\DeviceMaintain\\\\Plan.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './index.less';\nimport GlobalList from 'components/GlobalList';\nimport { setPlanColumns, setPlanModalColumns } from './methods';\nimport { omit } from 'lodash';\nvar CheckPlan = (_dec = inject('ZCloudDeviceStore'), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_Component) {\n  _inherits(CheckPlan, _Component);\n\n  var _super = _createSuper(CheckPlan);\n\n  function CheckPlan(props) {\n    var _this;\n\n    _classCallCheck(this, CheckPlan);\n\n    _this = _super.call(this, props);\n\n    _this.handleSubmit = function (values) {\n      var _this$store = _this.store,\n          deviceType = _this$store.deviceType,\n          status = _this$store.status,\n          currentMain = _this$store.currentMain;\n\n      var params = _objectSpread({\n        planType: _this.store.planType,\n        excuteStatus: 1,\n        typeId: deviceType,\n        maintainType: _this.store.maintainType\n      }, omit(values, 'planWaitTime'), {}, values.planWaitTime, {\n        excuteTime: window.GLOBAL_PARAMS.moment(values.excuteTime).format('HH:MM:SS')\n      });\n\n      if (status === 'edit') {\n        params.id = currentMain.id;\n      }\n\n      _this.store.savePlan(params);\n\n      _this.setState({\n        visible: !_this.state.visible\n      });\n    };\n\n    _this.handleVisible = function () {\n      if (!_this.state.visible) {\n        if (_this.store.deviceType) {\n          _this.store.getListByType('device', {\n            typeId: _this.store.deviceType\n          });\n\n          _this.store.getListByType('schema');\n\n          _this.setState({\n            visible: !_this.state.visible\n          });\n        } else {\n          _message.warning('请选择设备类型');\n        }\n      }\n    };\n\n    _this.handleEdit = function (value) {\n      _this.store.status = 'edit';\n\n      _this.store.getPlanInfo({\n        id: value\n      }).then(function (excuteTime) {\n        _this.store.currentMain.excuteTime = window.GLOBAL_PARAMS.moment().format('YYYY-MM-DD') + ' ' + excuteTime;\n\n        _this.store.getListByType('device', {\n          typeId: _this.store.currentMain.typeId\n        });\n\n        _this.store.getListByType('schema', {\n          typeId: _this.store.currentMain.typeId\n        });\n      });\n\n      _this.setState({\n        visible: !_this.state.visible\n      });\n    };\n\n    _this.handleDelete = function (_ref) {\n      var value = _ref.value,\n          type = _ref.type;\n\n      if (type === 'batch') {\n        if (_this.state.selectedRowKeys.length < 1) {\n          _Modal.warn({\n            title: '提示',\n            content: '请选择需要删除的计划'\n          });\n        } else {\n          _Modal.confirm({\n            title: '提示',\n            content: '确定删除选中的' + _this.state.selectedRowKeys.length + '条计划？',\n            okText: '确定',\n            cancelText: '取消',\n            onOk: function onOk() {\n              _this.store.delPlan({\n                ids: _this.state.selectedRowKeys\n              }, 'batch');\n            }\n          });\n        }\n      } else {\n        _Modal.confirm({\n          title: '提示',\n          content: '确定删除当前计划？',\n          okText: '确定',\n          cancelText: '取消',\n          onOk: function onOk() {\n            _this.store.delPlan({\n              id: value\n            }, 'single');\n          }\n        });\n      }\n    };\n\n    _this.handleToDetail = function (record) {\n      _Modal.confirm({\n        title: '提示',\n        content: '确定下发当前点检计划？',\n        okText: '确定',\n        cancelText: '取消',\n        onOk: function onOk() {\n          _this.store.toDetail({\n            id: record.id\n          });\n        }\n      });\n    };\n\n    _this.handleSelect = function (selectedRowKeys) {\n      _this.setState({\n        selectedRowKeys: selectedRowKeys\n      });\n    };\n\n    _this.handleCheckTag = function (tag) {\n      _this.store.deviceType = tag.typeId;\n\n      _this.store.getPlan({\n        typeId: tag.typeId\n      });\n    };\n\n    _this.store = _this.props.ZCloudDeviceStore;\n    _this.state = {\n      selectedRowKeys: [],\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckPlan, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$store2 = this.store,\n          checkPlanList = _this$store2.checkPlanList,\n          checkPlanPage = _this$store2.checkPlanPage,\n          deviceList = _this$store2.deviceList,\n          deviceByIdList = _this$store2.deviceByIdList,\n          isLoading = _this$store2.isLoading,\n          status = _this$store2.status,\n          currentMain = _this$store2.currentMain,\n          schemaByIdList = _this$store2.schemaByIdList;\n      var rowSelection = {\n        selectedRowKeys: this.state.selectedRowKeys,\n        onChange: this.handleSelect\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(GlobalList, {\n        checkedTag: {\n          dataSource: deviceList,\n          title: '设备类型',\n          PopoVisible: false,\n          keyName: 'typeName',\n          defaultActiveKey: deviceList[0],\n          content: deviceList,\n          onClick: this.handleCheckTag\n        },\n        table: {\n          rowKey: 'id',\n          columns: setPlanColumns({\n            handleEdit: this.handleEdit,\n            handleDelete: this.handleDelete,\n            handleToDetail: this.handleToDetail\n          }),\n          dataSource: checkPlanList,\n          pagination: _objectSpread({}, checkPlanPage, {\n            onChange: function onChange(pageIndex, pageSize) {\n              _this2.store.getPlan({\n                pageIndex: pageIndex,\n                pageSize: pageSize\n              });\n            }\n          }),\n          loading: isLoading,\n          rowSelection: rowSelection,\n          btns: [{\n            name: '创建计划',\n            onClick: function onClick() {\n              _this2.store.status = 'add';\n\n              _this2.handleVisible();\n            },\n            type: 'primary'\n          }, {\n            name: '删除',\n            onClick: function onClick() {\n              return _this2.handleDelete({\n                type: 'batch'\n              });\n            }\n          }]\n        },\n        modal: {\n          visible: this.state.visible,\n          title: status === 'add' ? '创建计划' : '编辑',\n          onCancel: function onCancel() {\n            return _this2.setState({\n              visible: !_this2.state.visible\n            });\n          },\n          onOk: this.handleSubmit,\n          isForm: true,\n          formColumns: setPlanModalColumns({\n            status: status,\n            currentMain: currentMain,\n            deviceByIdList: deviceByIdList,\n            schemaByIdList: schemaByIdList\n          })\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }));\n    }\n    /* modal - operate */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.store.getDeviceList();\n      this.store.deviceType = this.store.deviceList[0].typeId;\n      this.store.getPlan({\n        typeId: this.store.deviceList[0].typeId\n      });\n    }\n  }]);\n\n  return CheckPlan;\n}(Component), _temp)) || _class) || _class);\nexport default CheckPlan;","map":{"version":3,"sources":["C:/Users/Misaki/Desktop/kda/设备运维前端/bl-device-manage/src/layouts/ZCloudDevice/DeviceMaintain/Plan.js"],"names":["React","Component","inject","observer","GlobalList","setPlanColumns","setPlanModalColumns","omit","CheckPlan","props","handleSubmit","values","store","deviceType","status","currentMain","params","planType","excuteStatus","typeId","maintainType","planWaitTime","excuteTime","window","GLOBAL_PARAMS","moment","format","id","savePlan","setState","visible","state","handleVisible","getListByType","warning","handleEdit","value","getPlanInfo","then","handleDelete","type","selectedRowKeys","length","warn","title","content","confirm","okText","cancelText","onOk","delPlan","ids","handleToDetail","record","toDetail","handleSelect","handleCheckTag","tag","getPlan","ZCloudDeviceStore","checkPlanList","checkPlanPage","deviceList","deviceByIdList","isLoading","schemaByIdList","rowSelection","onChange","dataSource","PopoVisible","keyName","defaultActiveKey","onClick","rowKey","columns","pagination","pageIndex","pageSize","loading","btns","name","onCancel","isForm","formColumns","getDeviceList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './index.less';\nimport GlobalList from 'components/GlobalList';\nimport { Modal, message } from 'antd';\nimport { setPlanColumns, setPlanModalColumns } from './methods';\nimport { omit } from 'lodash'\n\n@inject('ZCloudDeviceStore')\n@observer\nclass CheckPlan extends Component {\n    constructor(props) {\n        super(props);\n        this.store = this.props.ZCloudDeviceStore;\n        this.state = {\n            selectedRowKeys: [],\n            visible: false,\n        };\n\n    }\n    render() {\n        const {\n            checkPlanList, checkPlanPage,\n            deviceList, deviceByIdList,\n            isLoading,\n            status,\n            currentMain,\n            schemaByIdList\n        } = this.store;\n\n        const rowSelection = {\n            selectedRowKeys: this.state.selectedRowKeys,\n            onChange: this.handleSelect\n        };\n        return (\n            <div>\n                <GlobalList\n                    checkedTag={{\n                        dataSource: deviceList,\n                        title: '设备类型',\n                        PopoVisible: false,\n                        keyName: 'typeName',\n                        defaultActiveKey: deviceList[0],\n                        content: deviceList,\n                        onClick: this.handleCheckTag\n                    }}\n                    table={{\n                        rowKey: 'id',\n                        columns: setPlanColumns({\n                            handleEdit: this.handleEdit, handleDelete: this.handleDelete,\n                            handleToDetail: this.handleToDetail\n                        }),\n                        dataSource: checkPlanList,\n                        pagination: {\n                            ...checkPlanPage,\n                            onChange: (pageIndex, pageSize) => {\n                                this.store.getPlan({\n                                    pageIndex,\n                                    pageSize\n                                });\n                            }\n                        },\n                        loading: isLoading,\n                        rowSelection,\n                        btns: [\n                            {\n                                name: '创建计划',\n                                onClick: () => {\n                                    this.store.status = 'add';\n                                    this.handleVisible();\n                                },\n                                type: 'primary'\n                            },\n                            {\n                                name: '删除',\n                                onClick: () => this.handleDelete({ type: 'batch' })\n                            }\n                        ]\n                    }}\n                    modal={{\n                        visible: this.state.visible,\n                        title: status === 'add' ? '创建计划' : '编辑',\n                        onCancel: () => this.setState({ visible: !this.state.visible }),\n                        onOk: this.handleSubmit,\n                        isForm: true,\n                        formColumns: setPlanModalColumns({\n                            status, currentMain, deviceByIdList, schemaByIdList\n                        }),\n                    }}\n                />\n            </div>\n        );\n    }\n    /* modal - operate */\n    handleSubmit = values => {\n        const { deviceType, status, currentMain } = this.store;\n        let params = {\n            planType: this.store.planType, excuteStatus: 1,\n            typeId: deviceType,\n            maintainType: this.store.maintainType,\n            ...omit(values, 'planWaitTime'),\n            ...values.planWaitTime,\n            excuteTime: window.GLOBAL_PARAMS.moment(values.excuteTime).format('HH:MM:SS')\n        }\n        if (status === 'edit') {\n            params.id = currentMain.id\n        }\n        this.store.savePlan(params);\n        this.setState({\n            visible: !this.state.visible\n        });\n    };\n    handleVisible = () => {\n        if (!this.state.visible) {\n            if (this.store.deviceType) {\n                this.store.getListByType('device', { typeId: this.store.deviceType });\n                this.store.getListByType('schema');\n                this.setState({\n                    visible: !this.state.visible\n                });\n            } else {\n                message.warning('请选择设备类型')\n            }\n\n        }\n\n    };\n    /* table - operate */\n    handleEdit = value => {\n        this.store.status = 'edit';\n        this.store.getPlanInfo({ id: value }).then((excuteTime) => {\n            this.store.currentMain.excuteTime = window.GLOBAL_PARAMS.moment().format('YYYY-MM-DD') + ' ' + excuteTime\n            this.store.getListByType('device', { typeId: this.store.currentMain.typeId });\n            this.store.getListByType('schema', { typeId: this.store.currentMain.typeId });\n        });\n\n        this.setState({\n            visible: !this.state.visible\n        });\n    };\n    handleDelete = ({ value, type }) => {\n        if (type === 'batch') {\n            if (this.state.selectedRowKeys.length < 1) {\n                Modal.warn({\n                    title: '提示',\n                    content: '请选择需要删除的计划'\n                });\n            } else {\n                Modal.confirm({\n                    title: '提示',\n                    content:\n                        '确定删除选中的' +\n                        this.state.selectedRowKeys.length +\n                        '条计划？',\n                    okText: '确定',\n                    cancelText: '取消',\n                    onOk: () => {\n                        this.store.delPlan(\n                            {\n                                ids: this.state.selectedRowKeys\n                            },\n                            'batch'\n                        );\n                    }\n                });\n            }\n        } else {\n            Modal.confirm({\n                title: '提示',\n                content: '确定删除当前计划？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    this.store.delPlan(\n                        {\n                            id: value\n                        },\n                        'single'\n                    );\n                }\n            });\n        }\n    };\n    handleToDetail = record => {\n        Modal.confirm({\n            title: '提示',\n            content: '确定下发当前点检计划？',\n            okText: '确定',\n            cancelText: '取消',\n            onOk: () => {\n                this.store.toDetail(\n                    {\n                        id: record.id\n                    }\n                );\n            }\n        })\n    }\n    handleSelect = selectedRowKeys => {\n        this.setState({ selectedRowKeys });\n    };\n    /* check - tag */\n    handleCheckTag = tag => {\n        this.store.deviceType = tag.typeId;\n        this.store.getPlan({\n            typeId: tag.typeId\n        });\n    };\n    componentDidMount() {\n        this.store.getDeviceList();\n        this.store.deviceType = this.store.deviceList[0].typeId\n        this.store.getPlan({\n            typeId: this.store.deviceList[0].typeId\n        });\n    }\n}\nexport default CheckPlan;"]},"metadata":{},"sourceType":"module"}