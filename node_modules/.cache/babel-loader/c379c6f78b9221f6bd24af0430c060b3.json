{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"id\", \"prefixCls\", \"className\", \"children\", \"direction\", \"activeKey\", \"defaultActiveKey\", \"editable\", \"animated\", \"tabPosition\", \"tabBarGutter\", \"tabBarStyle\", \"tabBarExtraContent\", \"locale\", \"moreIcon\", \"moreTransitionName\", \"destroyInactiveTabPane\", \"renderTabBar\", \"onChange\", \"onTabClick\", \"onTabScroll\", \"popupClassName\"]; // Accessibility https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport isMobile from \"rc-util/es/isMobile\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport TabNavList from './TabNavList';\nimport TabPanelList from './TabPanelList';\nimport TabPane from './TabPanelList/TabPane';\nimport TabContext from './TabContext';\n/**\n * Should added antd:\n * - type\n *\n * Removed:\n * - onNextClick\n * - onPrevClick\n * - keyboard\n */\n// Used for accessibility\n\nvar uuid = 0;\n\nfunction parseTabList(children) {\n  return toArray(children).map(function (node) {\n    if ( /*#__PURE__*/React.isValidElement(node)) {\n      var key = node.key !== undefined ? String(node.key) : undefined;\n      return _objectSpread(_objectSpread({\n        key: key\n      }, node.props), {}, {\n        node: node\n      });\n    }\n\n    return null;\n  }).filter(function (tab) {\n    return tab;\n  });\n}\n\nfunction Tabs(_ref, ref) {\n  var _classNames;\n\n  var id = _ref.id,\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'rc-tabs' : _ref$prefixCls,\n      className = _ref.className,\n      children = _ref.children,\n      direction = _ref.direction,\n      activeKey = _ref.activeKey,\n      defaultActiveKey = _ref.defaultActiveKey,\n      editable = _ref.editable,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? {\n    inkBar: true,\n    tabPane: false\n  } : _ref$animated,\n      _ref$tabPosition = _ref.tabPosition,\n      tabPosition = _ref$tabPosition === void 0 ? 'top' : _ref$tabPosition,\n      tabBarGutter = _ref.tabBarGutter,\n      tabBarStyle = _ref.tabBarStyle,\n      tabBarExtraContent = _ref.tabBarExtraContent,\n      locale = _ref.locale,\n      moreIcon = _ref.moreIcon,\n      moreTransitionName = _ref.moreTransitionName,\n      destroyInactiveTabPane = _ref.destroyInactiveTabPane,\n      renderTabBar = _ref.renderTabBar,\n      onChange = _ref.onChange,\n      onTabClick = _ref.onTabClick,\n      onTabScroll = _ref.onTabScroll,\n      popupClassName = _ref.popupClassName,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var tabs = parseTabList(children);\n  var rtl = direction === 'rtl';\n  var mergedAnimated;\n\n  if (animated === false) {\n    mergedAnimated = {\n      inkBar: false,\n      tabPane: false\n    };\n  } else if (animated === true) {\n    mergedAnimated = {\n      inkBar: true,\n      tabPane: true\n    };\n  } else {\n    mergedAnimated = _objectSpread({\n      inkBar: true,\n      tabPane: false\n    }, _typeof(animated) === 'object' ? animated : {});\n  } // ======================== Mobile ========================\n\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      mobile = _useState2[0],\n      setMobile = _useState2[1];\n\n  useEffect(function () {\n    // Only update on the client side\n    setMobile(isMobile());\n  }, []); // ====================== Active Key ======================\n\n  var _useMergedState = useMergedState(function () {\n    var _tabs$;\n\n    return (_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key;\n  }, {\n    value: activeKey,\n    defaultValue: defaultActiveKey\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedActiveKey = _useMergedState2[0],\n      setMergedActiveKey = _useMergedState2[1];\n\n  var _useState3 = useState(function () {\n    return tabs.findIndex(function (tab) {\n      return tab.key === mergedActiveKey;\n    });\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeIndex = _useState4[0],\n      setActiveIndex = _useState4[1]; // Reset active key if not exist anymore\n\n\n  useEffect(function () {\n    var newActiveIndex = tabs.findIndex(function (tab) {\n      return tab.key === mergedActiveKey;\n    });\n\n    if (newActiveIndex === -1) {\n      var _tabs$newActiveIndex;\n\n      newActiveIndex = Math.max(0, Math.min(activeIndex, tabs.length - 1));\n      setMergedActiveKey((_tabs$newActiveIndex = tabs[newActiveIndex]) === null || _tabs$newActiveIndex === void 0 ? void 0 : _tabs$newActiveIndex.key);\n    }\n\n    setActiveIndex(newActiveIndex);\n  }, [tabs.map(function (tab) {\n    return tab.key;\n  }).join('_'), mergedActiveKey, activeIndex]); // ===================== Accessibility ====================\n\n  var _useMergedState3 = useMergedState(null, {\n    value: id\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedId = _useMergedState4[0],\n      setMergedId = _useMergedState4[1];\n\n  var mergedTabPosition = tabPosition;\n\n  if (mobile && !['left', 'right'].includes(tabPosition)) {\n    mergedTabPosition = 'top';\n  } // Async generate id to avoid ssr mapping failed\n\n\n  useEffect(function () {\n    if (!id) {\n      setMergedId(\"rc-tabs-\".concat(process.env.NODE_ENV === 'test' ? 'test' : uuid));\n      uuid += 1;\n    }\n  }, []); // ======================== Events ========================\n\n  function onInternalTabClick(key, e) {\n    onTabClick === null || onTabClick === void 0 ? void 0 : onTabClick(key, e);\n    var isActiveChanged = key !== mergedActiveKey;\n    setMergedActiveKey(key);\n\n    if (isActiveChanged) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(key);\n    }\n  } // ======================== Render ========================\n\n\n  var sharedProps = {\n    id: mergedId,\n    activeKey: mergedActiveKey,\n    animated: mergedAnimated,\n    tabPosition: mergedTabPosition,\n    rtl: rtl,\n    mobile: mobile\n  };\n  var tabNavBar;\n\n  var tabNavBarProps = _objectSpread(_objectSpread({}, sharedProps), {}, {\n    editable: editable,\n    locale: locale,\n    moreIcon: moreIcon,\n    moreTransitionName: moreTransitionName,\n    tabBarGutter: tabBarGutter,\n    onTabClick: onInternalTabClick,\n    onTabScroll: onTabScroll,\n    extra: tabBarExtraContent,\n    style: tabBarStyle,\n    panes: children,\n    popupClassName: popupClassName\n  });\n\n  if (renderTabBar) {\n    tabNavBar = renderTabBar(tabNavBarProps, TabNavList);\n  } else {\n    tabNavBar = /*#__PURE__*/React.createElement(TabNavList, tabNavBarProps);\n  }\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: {\n      tabs: tabs,\n      prefixCls: prefixCls\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    id: id,\n    className: classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(mergedTabPosition), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-mobile\"), mobile), _defineProperty(_classNames, \"\".concat(prefixCls, \"-editable\"), editable), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), rtl), _classNames), className)\n  }, restProps), tabNavBar, /*#__PURE__*/React.createElement(TabPanelList, _extends({\n    destroyInactiveTabPane: destroyInactiveTabPane\n  }, sharedProps, {\n    animated: mergedAnimated\n  }))));\n}\n\nvar ForwardTabs = /*#__PURE__*/React.forwardRef(Tabs);\nForwardTabs.TabPane = TabPane;\nexport default ForwardTabs;","map":null,"metadata":{},"sourceType":"module"}