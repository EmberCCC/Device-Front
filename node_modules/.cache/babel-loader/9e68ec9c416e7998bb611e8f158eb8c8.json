{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar warning_1 = __importDefault(require(\"rc-util/lib/warning\"));\n\nvar useMergedState_1 = __importDefault(require(\"rc-util/lib/hooks/useMergedState\"));\n\nvar PickerTrigger_1 = __importDefault(require(\"./PickerTrigger\"));\n\nvar PickerPanel_1 = __importDefault(require(\"./PickerPanel\"));\n\nvar usePickerInput_1 = __importDefault(require(\"./hooks/usePickerInput\"));\n\nvar miscUtil_1 = __importStar(require(\"./utils/miscUtil\"));\n\nvar uiUtil_1 = require(\"./utils/uiUtil\");\n\nvar PanelContext_1 = __importDefault(require(\"./PanelContext\"));\n\nvar dateUtil_1 = require(\"./utils/dateUtil\");\n\nvar useValueTexts_1 = __importDefault(require(\"./hooks/useValueTexts\"));\n\nvar useTextValueMapping_1 = __importDefault(require(\"./hooks/useTextValueMapping\"));\n\nvar RangeContext_1 = __importDefault(require(\"./RangeContext\"));\n\nvar useRangeDisabled_1 = __importDefault(require(\"./hooks/useRangeDisabled\"));\n\nvar getExtraFooter_1 = __importDefault(require(\"./utils/getExtraFooter\"));\n\nvar getRanges_1 = __importDefault(require(\"./utils/getRanges\"));\n\nvar useRangeViewDates_1 = __importDefault(require(\"./hooks/useRangeViewDates\"));\n\nfunction reorderValues(values, generateConfig) {\n  if (values && values[0] && values[1] && generateConfig.isAfter(values[0], values[1])) {\n    return [values[1], values[0]];\n  }\n\n  return values;\n}\n\nfunction canValueTrigger(value, index, disabled, allowEmpty) {\n  if (value) {\n    return true;\n  }\n\n  if (allowEmpty && allowEmpty[index]) {\n    return true;\n  }\n\n  if (disabled[(index + 1) % 2]) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction InnerRangePicker(props) {\n  var _classnames_1$default2;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,\n      style = props.style,\n      className = props.className,\n      popupStyle = props.popupStyle,\n      dropdownClassName = props.dropdownClassName,\n      transitionName = props.transitionName,\n      dropdownAlign = props.dropdownAlign,\n      getPopupContainer = props.getPopupContainer,\n      generateConfig = props.generateConfig,\n      locale = props.locale,\n      placeholder = props.placeholder,\n      autoFocus = props.autoFocus,\n      disabled = props.disabled,\n      format = props.format,\n      _props$picker = props.picker,\n      picker = _props$picker === void 0 ? 'date' : _props$picker,\n      showTime = props.showTime,\n      use12Hours = props.use12Hours,\n      _props$separator = props.separator,\n      separator = _props$separator === void 0 ? '~' : _props$separator,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      defaultPickerValue = props.defaultPickerValue,\n      open = props.open,\n      defaultOpen = props.defaultOpen,\n      disabledDate = props.disabledDate,\n      _disabledTime = props.disabledTime,\n      ranges = props.ranges,\n      allowEmpty = props.allowEmpty,\n      allowClear = props.allowClear,\n      suffixIcon = props.suffixIcon,\n      clearIcon = props.clearIcon,\n      pickerRef = props.pickerRef,\n      inputReadOnly = props.inputReadOnly,\n      mode = props.mode,\n      renderExtraFooter = props.renderExtraFooter,\n      onChange = props.onChange,\n      onOpenChange = props.onOpenChange,\n      onPanelChange = props.onPanelChange,\n      onCalendarChange = props.onCalendarChange,\n      _onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      _onOk = props.onOk,\n      components = props.components,\n      direction = props.direction;\n  var needConfirmButton = picker === 'date' && !!showTime || picker === 'time';\n  var containerRef = React.useRef(null);\n  var panelDivRef = React.useRef(null);\n  var startInputDivRef = React.useRef(null);\n  var endInputDivRef = React.useRef(null);\n  var separatorRef = React.useRef(null);\n  var startInputRef = React.useRef(null);\n  var endInputRef = React.useRef(null); // ============================= Misc ==============================\n\n  var formatList = miscUtil_1.toArray(uiUtil_1.getDefaultFormat(format, picker, showTime, use12Hours)); // Active picker\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activePickerIndex = _React$useState2[0],\n      setActivePickerIndex = _React$useState2[1]; // Operation ref\n\n\n  var operationRef = React.useRef(null);\n  var mergedDisabled = React.useMemo(function () {\n    if (Array.isArray(disabled)) {\n      return disabled;\n    }\n\n    return [disabled || false, disabled || false];\n  }, [disabled]); // ============================= Value =============================\n\n  var _useMergedState_1$def = useMergedState_1.default(null, {\n    value: value,\n    defaultValue: defaultValue,\n    postState: function postState(values) {\n      return reorderValues(values, generateConfig);\n    }\n  }),\n      _useMergedState_1$def2 = _slicedToArray(_useMergedState_1$def, 2),\n      mergedValue = _useMergedState_1$def2[0],\n      setInnerValue = _useMergedState_1$def2[1]; // =========================== View Date ===========================\n  // Config view panel\n\n\n  var _useRangeViewDates_1$ = useRangeViewDates_1.default({\n    values: mergedValue,\n    picker: picker,\n    defaultDates: defaultPickerValue,\n    generateConfig: generateConfig\n  }),\n      _useRangeViewDates_1$2 = _slicedToArray(_useRangeViewDates_1$, 2),\n      getViewDate = _useRangeViewDates_1$2[0],\n      setViewDate = _useRangeViewDates_1$2[1]; // ========================= Select Values =========================\n\n\n  var _useMergedState_1$def3 = useMergedState_1.default(mergedValue, {\n    postState: function postState(values) {\n      var postValues = values;\n\n      for (var i = 0; i < 2; i += 1) {\n        if (mergedDisabled[i] && !miscUtil_1.getValue(postValues, i) && !miscUtil_1.getValue(allowEmpty, i)) {\n          postValues = miscUtil_1.updateValues(postValues, generateConfig.getNow(), i);\n        }\n      }\n\n      return postValues;\n    }\n  }),\n      _useMergedState_1$def4 = _slicedToArray(_useMergedState_1$def3, 2),\n      selectedValue = _useMergedState_1$def4[0],\n      setSelectedValue = _useMergedState_1$def4[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rangeHoverValue = _React$useState4[0],\n      setRangeHoverValue = _React$useState4[1]; // ========================== Hover Range ==========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      hoverRangedValue = _React$useState6[0],\n      setHoverRangedValue = _React$useState6[1];\n\n  var onDateMouseEnter = function onDateMouseEnter(date) {\n    setHoverRangedValue(miscUtil_1.updateValues(selectedValue, date, activePickerIndex));\n  };\n\n  var onDateMouseLeave = function onDateMouseLeave() {\n    setHoverRangedValue(miscUtil_1.updateValues(selectedValue, null, activePickerIndex));\n  }; // ============================= Modes =============================\n\n\n  var _useMergedState_1$def5 = useMergedState_1.default([picker, picker], {\n    value: mode\n  }),\n      _useMergedState_1$def6 = _slicedToArray(_useMergedState_1$def5, 2),\n      mergedModes = _useMergedState_1$def6[0],\n      setInnerModes = _useMergedState_1$def6[1];\n\n  React.useEffect(function () {\n    setInnerModes([picker, picker]);\n  }, [picker]);\n\n  var triggerModesChange = function triggerModesChange(modes, values) {\n    setInnerModes(modes);\n\n    if (onPanelChange) {\n      onPanelChange(values, modes);\n    }\n  }; // ========================= Disable Date ==========================\n\n\n  var _useRangeDisabled_1$d = useRangeDisabled_1.default({\n    picker: picker,\n    selectedValue: selectedValue,\n    locale: locale,\n    disabled: mergedDisabled,\n    disabledDate: disabledDate,\n    generateConfig: generateConfig\n  }),\n      _useRangeDisabled_1$d2 = _slicedToArray(_useRangeDisabled_1$d, 2),\n      disabledStartDate = _useRangeDisabled_1$d2[0],\n      disabledEndDate = _useRangeDisabled_1$d2[1]; // ============================= Open ==============================\n\n\n  var _useMergedState_1$def7 = useMergedState_1.default(false, {\n    value: open,\n    defaultValue: defaultOpen,\n    postState: function postState(postOpen) {\n      return mergedDisabled[activePickerIndex] ? false : postOpen;\n    },\n    onChange: function onChange(newOpen) {\n      if (onOpenChange) {\n        onOpenChange(newOpen);\n      }\n\n      if (!newOpen && operationRef.current && operationRef.current.onClose) {\n        operationRef.current.onClose();\n      }\n    }\n  }),\n      _useMergedState_1$def8 = _slicedToArray(_useMergedState_1$def7, 2),\n      mergedOpen = _useMergedState_1$def8[0],\n      triggerInnerOpen = _useMergedState_1$def8[1];\n\n  var startOpen = mergedOpen && activePickerIndex === 0;\n  var endOpen = mergedOpen && activePickerIndex === 1; // ============================= Popup =============================\n  // Popup min width\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      popupMinWidth = _React$useState8[0],\n      setPopupMinWidth = _React$useState8[1];\n\n  React.useEffect(function () {\n    if (!mergedOpen && containerRef.current) {\n      setPopupMinWidth(containerRef.current.offsetWidth);\n    }\n  }, [mergedOpen]); // ============================ Trigger ============================\n\n  var _triggerOpen;\n\n  var triggerChange = function triggerChange(newValue) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _config$forceInput = config.forceInput,\n        forceInput = _config$forceInput === void 0 ? true : _config$forceInput,\n        source = config.source;\n    var values = newValue;\n    var startValue = miscUtil_1.getValue(values, 0);\n    var endValue = miscUtil_1.getValue(values, 1);\n\n    if (startValue && endValue && generateConfig.isAfter(startValue, endValue)) {\n      if (!dateUtil_1.isSameDate(generateConfig, startValue, endValue)) {\n        // Clean up end date when start date is after end date\n        values = [startValue, null];\n        endValue = null;\n      } else {\n        // Reorder when in same date\n        values = [endValue, startValue];\n      }\n    }\n\n    setSelectedValue(values);\n    var startStr = values && values[0] ? generateConfig.locale.format(locale.locale, values[0], formatList[0]) : '';\n    var endStr = values && values[1] ? generateConfig.locale.format(locale.locale, values[1], formatList[0]) : '';\n\n    if (onCalendarChange) {\n      onCalendarChange(values, [startStr, endStr]);\n    }\n\n    var canStartValueTrigger = canValueTrigger(startValue, 0, mergedDisabled, allowEmpty);\n    var canEndValueTrigger = canValueTrigger(endValue, 1, mergedDisabled, allowEmpty);\n    var canTrigger = values === null || canStartValueTrigger && canEndValueTrigger;\n\n    if (canTrigger) {\n      // Trigger onChange only when value is validate\n      setInnerValue(values);\n\n      if (source !== 'open') {\n        _triggerOpen(false, activePickerIndex, true);\n      }\n\n      if (onChange && (!dateUtil_1.isEqual(generateConfig, miscUtil_1.getValue(mergedValue, 0), startValue) || !dateUtil_1.isEqual(generateConfig, miscUtil_1.getValue(mergedValue, 1), endValue))) {\n        onChange(values, [startStr, endStr]);\n      }\n    } else if (forceInput) {\n      // Open miss value panel to force user input\n      var missingValueIndex = canStartValueTrigger ? 1 : 0; // Same index means user choice to close picker\n\n      if (missingValueIndex === activePickerIndex) {\n        return;\n      }\n\n      if (source !== 'open') {\n        _triggerOpen(true, missingValueIndex);\n      } // Delay to focus to avoid input blur trigger expired selectedValues\n\n\n      setTimeout(function () {\n        var inputRef = [startInputRef, endInputRef][missingValueIndex];\n\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n      }, 0);\n    }\n  };\n\n  _triggerOpen = function triggerOpen(newOpen, index) {\n    var preventChangeEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (newOpen) {\n      setActivePickerIndex(index);\n      triggerInnerOpen(newOpen); // Open to reset view date\n\n      if (!mergedOpen) {\n        setViewDate(null, index);\n      }\n    } else if (activePickerIndex === index) {\n      triggerInnerOpen(newOpen);\n\n      if (!preventChangeEvent) {\n        triggerChange(selectedValue, {\n          source: 'open'\n        });\n      }\n    }\n  };\n\n  var forwardKeyDown = function forwardKeyDown(e) {\n    if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {\n      // Let popup panel handle keyboard\n      return operationRef.current.onKeyDown(e);\n    }\n    /* istanbul ignore next */\n\n    /* eslint-disable no-lone-blocks */\n\n\n    {\n      warning_1.default(false, 'Picker not correct forward KeyDown operation. Please help to fire issue about this.');\n      return false;\n    }\n  }; // ============================= Text ==============================\n\n\n  var sharedTextHooksProps = {\n    formatList: formatList,\n    generateConfig: generateConfig,\n    locale: locale\n  };\n  var startValueTexts = useValueTexts_1.default(miscUtil_1.getValue(selectedValue, 0), sharedTextHooksProps);\n  var endValueTexts = useValueTexts_1.default(miscUtil_1.getValue(selectedValue, 1), sharedTextHooksProps);\n\n  var _onTextChange = function onTextChange(newText, index) {\n    var inputDate = generateConfig.locale.parse(locale.locale, newText, formatList);\n    var disabledFunc = index === 0 ? disabledStartDate : disabledEndDate;\n\n    if (inputDate && !disabledFunc(inputDate)) {\n      setSelectedValue(miscUtil_1.updateValues(selectedValue, inputDate, index));\n      setViewDate(inputDate, index);\n    }\n  };\n\n  var _useTextValueMapping_ = useTextValueMapping_1.default({\n    valueTexts: startValueTexts,\n    onTextChange: function onTextChange(newText) {\n      return _onTextChange(newText, 0);\n    }\n  }),\n      _useTextValueMapping_2 = _slicedToArray(_useTextValueMapping_, 3),\n      startText = _useTextValueMapping_2[0],\n      triggerStartTextChange = _useTextValueMapping_2[1],\n      resetStartText = _useTextValueMapping_2[2];\n\n  var _useTextValueMapping_3 = useTextValueMapping_1.default({\n    valueTexts: endValueTexts,\n    onTextChange: function onTextChange(newText) {\n      return _onTextChange(newText, 1);\n    }\n  }),\n      _useTextValueMapping_4 = _slicedToArray(_useTextValueMapping_3, 3),\n      endText = _useTextValueMapping_4[0],\n      triggerEndTextChange = _useTextValueMapping_4[1],\n      resetEndText = _useTextValueMapping_4[2]; // ============================= Input =============================\n\n\n  var getSharedInputHookProps = function getSharedInputHookProps(index, resetText) {\n    return {\n      blurToCancel: needConfirmButton,\n      forwardKeyDown: forwardKeyDown,\n      onBlur: onBlur,\n      isClickOutside: function isClickOutside(target) {\n        return !uiUtil_1.elementsContains([panelDivRef.current, startInputDivRef.current, endInputDivRef.current], target);\n      },\n      onFocus: function onFocus(e) {\n        setActivePickerIndex(index);\n\n        if (_onFocus) {\n          _onFocus(e);\n        }\n      },\n      triggerOpen: function triggerOpen(newOpen) {\n        return _triggerOpen(newOpen, index);\n      },\n      onSubmit: function onSubmit() {\n        triggerChange(selectedValue);\n        resetText();\n      },\n      onCancel: function onCancel() {\n        _triggerOpen(false, index, true);\n\n        setSelectedValue(mergedValue);\n        resetText();\n      }\n    };\n  };\n\n  var _usePickerInput_1$def = usePickerInput_1.default(_objectSpread({}, getSharedInputHookProps(0, resetStartText), {\n    open: startOpen\n  })),\n      _usePickerInput_1$def2 = _slicedToArray(_usePickerInput_1$def, 2),\n      startInputProps = _usePickerInput_1$def2[0],\n      _usePickerInput_1$def3 = _usePickerInput_1$def2[1],\n      startFocused = _usePickerInput_1$def3.focused,\n      startTyping = _usePickerInput_1$def3.typing;\n\n  var _usePickerInput_1$def4 = usePickerInput_1.default(_objectSpread({}, getSharedInputHookProps(1, resetEndText), {\n    open: endOpen\n  })),\n      _usePickerInput_1$def5 = _slicedToArray(_usePickerInput_1$def4, 2),\n      endInputProps = _usePickerInput_1$def5[0],\n      _usePickerInput_1$def6 = _usePickerInput_1$def5[1],\n      endFocused = _usePickerInput_1$def6.focused,\n      endTyping = _usePickerInput_1$def6.typing; // ============================= Sync ==============================\n  // Close should sync back with text value\n\n\n  var startStr = mergedValue && mergedValue[0] ? generateConfig.locale.format(locale.locale, mergedValue[0], 'YYYYMMDDHHmmss') : '';\n  var endStr = mergedValue && mergedValue[1] ? generateConfig.locale.format(locale.locale, mergedValue[1], 'YYYYMMDDHHmmss') : '';\n  React.useEffect(function () {\n    if (!mergedOpen) {\n      setSelectedValue(mergedValue);\n\n      if (!startValueTexts.length || startValueTexts[0] === '') {\n        triggerStartTextChange('');\n      } else if (!startValueTexts.includes(startText)) {\n        resetStartText();\n      }\n\n      if (!endValueTexts.length || endValueTexts[0] === '') {\n        triggerEndTextChange('');\n      } else if (!endValueTexts.includes(endText)) {\n        resetEndText();\n      }\n    }\n  }, [mergedOpen, startValueTexts, endValueTexts]); // Sync innerValue with control mode\n\n  React.useEffect(function () {\n    setSelectedValue(mergedValue);\n  }, [startStr, endStr]); // ============================ Warning ============================\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value && Array.isArray(disabled) && (miscUtil_1.getValue(disabled, 0) && !miscUtil_1.getValue(value, 0) || miscUtil_1.getValue(disabled, 1) && !miscUtil_1.getValue(value, 1))) {\n      warning_1.default(false, '`disabled` should not set with empty `value`. You should set `allowEmpty` or `value` instead.');\n    }\n  } // ============================ Private ============================\n\n\n  if (pickerRef) {\n    pickerRef.current = {\n      focus: function focus() {\n        if (startInputRef.current) {\n          startInputRef.current.focus();\n        }\n      },\n      blur: function blur() {\n        if (startInputRef.current) {\n          startInputRef.current.blur();\n        }\n\n        if (endInputRef.current) {\n          endInputRef.current.blur();\n        }\n      }\n    };\n  } // ============================ Ranges =============================\n\n\n  var rangeLabels = Object.keys(ranges || {});\n  var rangeList = rangeLabels.map(function (label) {\n    var range = ranges[label];\n    var newValues = typeof range === 'function' ? range() : range;\n    return {\n      label: label,\n      onClick: function onClick() {\n        triggerChange(newValues);\n      },\n      onMouseEnter: function onMouseEnter() {\n        setRangeHoverValue(newValues);\n      },\n      onMouseLeave: function onMouseLeave() {\n        setRangeHoverValue(null);\n      }\n    };\n  }); // ============================= Panel =============================\n\n  function renderPanel() {\n    var panelPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var panelProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var panelHoverRangedValue = null;\n\n    if (mergedOpen && hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1] && generateConfig.isAfter(hoverRangedValue[1], hoverRangedValue[0])) {\n      panelHoverRangedValue = hoverRangedValue;\n    }\n\n    var panelShowTime = showTime;\n\n    if (showTime && _typeof(showTime) === 'object' && showTime.defaultValue) {\n      var timeDefaultValues = showTime.defaultValue;\n      panelShowTime = _objectSpread({}, showTime, {\n        defaultValue: miscUtil_1.getValue(timeDefaultValues, activePickerIndex) || undefined\n      });\n    }\n\n    return React.createElement(RangeContext_1.default.Provider, {\n      value: {\n        inRange: true,\n        panelPosition: panelPosition,\n        rangedValue: rangeHoverValue || selectedValue,\n        hoverRangedValue: panelHoverRangedValue\n      }\n    }, React.createElement(PickerPanel_1.default, Object.assign({}, props, panelProps, {\n      showTime: panelShowTime,\n      mode: mergedModes[activePickerIndex],\n      generateConfig: generateConfig,\n      style: undefined,\n      direction: direction,\n      disabledDate: activePickerIndex === 0 ? disabledStartDate : disabledEndDate,\n      disabledTime: function disabledTime(date) {\n        if (_disabledTime) {\n          return _disabledTime(date, activePickerIndex === 0 ? 'start' : 'end');\n        }\n\n        return false;\n      },\n      className: classnames_1.default(_defineProperty({}, \"\".concat(prefixCls, \"-panel-focused\"), activePickerIndex === 0 ? !startTyping : !endTyping)),\n      value: miscUtil_1.getValue(selectedValue, activePickerIndex),\n      locale: locale,\n      tabIndex: -1,\n      onPanelChange: function onPanelChange(date, newMode) {\n        triggerModesChange(miscUtil_1.updateValues(mergedModes, newMode, activePickerIndex), miscUtil_1.updateValues(selectedValue, date, activePickerIndex));\n        setViewDate(date, activePickerIndex);\n      },\n      onOk: null,\n      onSelect: undefined,\n      onChange: undefined,\n      defaultValue: undefined,\n      defaultPickerValue: undefined\n    })));\n  }\n\n  var arrowLeft = 0;\n  var panelLeft = 0;\n\n  if (activePickerIndex && startInputDivRef.current && separatorRef.current && panelDivRef.current) {\n    // Arrow offset\n    arrowLeft = startInputDivRef.current.offsetWidth + separatorRef.current.offsetWidth;\n\n    if (panelDivRef.current.offsetWidth && arrowLeft > panelDivRef.current.offsetWidth) {\n      panelLeft = arrowLeft;\n    }\n  }\n\n  var arrowPositionStyle = direction === 'rtl' ? {\n    right: arrowLeft\n  } : {\n    left: arrowLeft\n  };\n\n  function renderPanels() {\n    var panels;\n    var extraNode = getExtraFooter_1.default(prefixCls, mergedModes[activePickerIndex], renderExtraFooter);\n    var rangesNode = getRanges_1.default({\n      prefixCls: prefixCls,\n      components: components,\n      needConfirmButton: needConfirmButton,\n      okDisabled: !miscUtil_1.getValue(selectedValue, activePickerIndex),\n      locale: locale,\n      rangeList: rangeList,\n      onOk: function onOk() {\n        if (miscUtil_1.getValue(selectedValue, activePickerIndex)) {\n          triggerChange(selectedValue);\n\n          if (_onOk) {\n            _onOk(selectedValue);\n          }\n        }\n      }\n    });\n\n    if (picker !== 'time' && !showTime) {\n      var viewDate = getViewDate(activePickerIndex);\n      var nextViewDate = dateUtil_1.getClosingViewDate(viewDate, picker, generateConfig);\n      var currentMode = mergedModes[activePickerIndex];\n      var showDoublePanel = currentMode === picker;\n      var leftPanel = renderPanel(showDoublePanel ? 'left' : false, {\n        pickerValue: viewDate,\n        onPickerValueChange: function onPickerValueChange(newViewDate) {\n          setViewDate(newViewDate, activePickerIndex);\n        }\n      });\n      var rightPanel = renderPanel('right', {\n        pickerValue: nextViewDate,\n        onPickerValueChange: function onPickerValueChange(newViewDate) {\n          setViewDate(dateUtil_1.getClosingViewDate(newViewDate, picker, generateConfig, -1), activePickerIndex);\n        }\n      });\n      panels = React.createElement(React.Fragment, null, direction === 'rtl' ? rightPanel : leftPanel, direction === 'rtl' ? showDoublePanel && leftPanel : showDoublePanel && rightPanel);\n    } else {\n      panels = renderPanel();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-panel-container\"),\n      style: {\n        marginLeft: panelLeft\n      },\n      ref: panelDivRef,\n      onMouseDown: function onMouseDown(e) {\n        e.preventDefault();\n      }\n    }, React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-panels\")\n    }, panels), (extraNode || rangesNode) && React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-footer\")\n    }, extraNode, rangesNode));\n  }\n\n  var rangePanel = React.createElement(\"div\", {\n    className: classnames_1.default(\"\".concat(prefixCls, \"-range-wrapper\"), \"\".concat(prefixCls, \"-\").concat(picker, \"-range-wrapper\")),\n    style: {\n      minWidth: popupMinWidth\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-range-arrow\"),\n    style: arrowPositionStyle\n  }), renderPanels()); // ============================= Icons =============================\n\n  var suffixNode;\n\n  if (suffixIcon) {\n    suffixNode = React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-suffix\")\n    }, suffixIcon);\n  }\n\n  var clearNode;\n\n  if (allowClear && (miscUtil_1.getValue(mergedValue, 0) && !mergedDisabled[0] || miscUtil_1.getValue(mergedValue, 1) && !mergedDisabled[1])) {\n    clearNode = React.createElement(\"span\", {\n      onMouseDown: function onMouseDown(e) {\n        e.preventDefault();\n        e.stopPropagation();\n      },\n      onMouseUp: function onMouseUp(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        var values = mergedValue;\n\n        if (!mergedDisabled[0]) {\n          values = miscUtil_1.updateValues(values, null, 0);\n        }\n\n        if (!mergedDisabled[1]) {\n          values = miscUtil_1.updateValues(values, null, 1);\n        }\n\n        triggerChange(values, {\n          forceInput: false\n        });\n      },\n      className: \"\".concat(prefixCls, \"-clear\")\n    }, clearIcon || React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-clear-btn\")\n    }));\n  }\n\n  var inputSharedProps = {\n    size: uiUtil_1.getInputSize(picker, formatList[0])\n  };\n  var activeBarLeft = 0;\n  var activeBarWidth = 0;\n\n  if (startInputDivRef.current && endInputDivRef.current && separatorRef.current) {\n    if (activePickerIndex === 0) {\n      activeBarWidth = startInputDivRef.current.offsetWidth;\n    } else {\n      activeBarLeft = arrowLeft;\n      activeBarWidth = endInputDivRef.current.offsetWidth;\n    }\n  }\n\n  var activeBarPositionStyle = direction === 'rtl' ? {\n    right: activeBarLeft\n  } : {\n    left: activeBarLeft\n  }; // ============================ Return =============================\n\n  var onContextSelect = function onContextSelect(date, type) {\n    var values = miscUtil_1.updateValues(selectedValue, date, activePickerIndex);\n\n    if (type === 'submit' || type !== 'key' && !needConfirmButton) {\n      // triggerChange will also update selected values\n      triggerChange(values);\n    } else {\n      setSelectedValue(values);\n    }\n  };\n\n  return React.createElement(PanelContext_1.default.Provider, {\n    value: {\n      operationRef: operationRef,\n      hideHeader: picker === 'time',\n      onDateMouseEnter: onDateMouseEnter,\n      onDateMouseLeave: onDateMouseLeave,\n      hideRanges: true,\n      onSelect: onContextSelect,\n      open: mergedOpen\n    }\n  }, React.createElement(PickerTrigger_1.default, {\n    visible: mergedOpen,\n    popupElement: rangePanel,\n    popupStyle: popupStyle,\n    prefixCls: prefixCls,\n    dropdownClassName: dropdownClassName,\n    dropdownAlign: dropdownAlign,\n    getPopupContainer: getPopupContainer,\n    transitionName: transitionName,\n    range: true,\n    direction: direction\n  }, React.createElement(\"div\", Object.assign({\n    ref: containerRef,\n    className: classnames_1.default(prefixCls, \"\".concat(prefixCls, \"-range\"), className, (_classnames_1$default2 = {}, _defineProperty(_classnames_1$default2, \"\".concat(prefixCls, \"-disabled\"), mergedDisabled[0] && mergedDisabled[1]), _defineProperty(_classnames_1$default2, \"\".concat(prefixCls, \"-focused\"), activePickerIndex === 0 ? startFocused : endFocused), _defineProperty(_classnames_1$default2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classnames_1$default2)),\n    style: style\n  }, miscUtil_1.default(props)), React.createElement(\"div\", {\n    className: classnames_1.default(\"\".concat(prefixCls, \"-input\"), _defineProperty({}, \"\".concat(prefixCls, \"-input-active\"), activePickerIndex === 0)),\n    ref: startInputDivRef\n  }, React.createElement(\"input\", Object.assign({\n    disabled: mergedDisabled[0],\n    readOnly: inputReadOnly || !startTyping,\n    value: startText,\n    onChange: function onChange(e) {\n      triggerStartTextChange(e.target.value);\n    },\n    autoFocus: autoFocus,\n    placeholder: miscUtil_1.getValue(placeholder, 0) || '',\n    ref: startInputRef\n  }, startInputProps, inputSharedProps))), React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-range-separator\"),\n    ref: separatorRef\n  }, separator), React.createElement(\"div\", {\n    className: classnames_1.default(\"\".concat(prefixCls, \"-input\"), _defineProperty({}, \"\".concat(prefixCls, \"-input-active\"), activePickerIndex === 1)),\n    ref: endInputDivRef\n  }, React.createElement(\"input\", Object.assign({\n    disabled: mergedDisabled[1],\n    readOnly: inputReadOnly || !endTyping,\n    value: endText,\n    onChange: function onChange(e) {\n      triggerEndTextChange(e.target.value);\n    },\n    placeholder: miscUtil_1.getValue(placeholder, 1) || '',\n    ref: endInputRef\n  }, endInputProps, inputSharedProps))), React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-active-bar\"),\n    style: _objectSpread({}, activeBarPositionStyle, {\n      width: activeBarWidth,\n      position: 'absolute'\n    })\n  }), suffixNode, clearNode)));\n} // Wrap with class component to enable pass generic with instance method\n\n\nvar RangePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RangePicker, _React$Component);\n\n  function RangePicker() {\n    var _this;\n\n    _classCallCheck(this, RangePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RangePicker).apply(this, arguments));\n    _this.pickerRef = React.createRef();\n\n    _this.focus = function () {\n      if (_this.pickerRef.current) {\n        _this.pickerRef.current.focus();\n      }\n    };\n\n    _this.blur = function () {\n      if (_this.pickerRef.current) {\n        _this.pickerRef.current.blur();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(RangePicker, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(InnerRangePicker, Object.assign({}, this.props, {\n        pickerRef: this.pickerRef\n      }));\n    }\n  }]);\n\n  return RangePicker;\n}(React.Component);\n\nexports.default = RangePicker;","map":null,"metadata":{},"sourceType":"script"}