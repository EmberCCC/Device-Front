{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { useRef } from 'react';\nimport { useStore, useStore2, useTools } from '../../hooks';\nimport useDebouncedCallback from '../../useDebounce';\nimport { getValueByPath, isCheckBoxType, isObjType } from '../../utils';\nimport { validateField } from '../../validator';\nimport ErrorMessage from './ErrorMessage';\nimport ExtendedWidget from './ExtendedWidget';\nimport Extra from './Extra';\nimport FieldTitle from './Title'; // TODO: 之后不要直接用get，收口到一个内部方法getValue，便于全局 ctrl + f 查找\n\nvar RenderField = function RenderField(props) {\n  var $id = props.$id,\n      dataIndex = props.dataIndex,\n      dataPath = props.dataPath,\n      _value = props._value,\n      dependValues = props.dependValues,\n      _schema = props._schema,\n      labelClass = props.labelClass,\n      labelStyle = props.labelStyle,\n      _contentClass = props.contentClass,\n      children = props.children,\n      _props$errorFields = props.errorFields,\n      errorFields = _props$errorFields === void 0 ? [] : _props$errorFields,\n      hideTitle = props.hideTitle,\n      displayType = props.displayType;\n\n  var _useStore = useStore(),\n      formData = _useStore.formData,\n      flatten = _useStore.flatten;\n\n  var _useStore2 = useStore2(),\n      debounceInput = _useStore2.debounceInput,\n      readOnly = _useStore2.readOnly,\n      disabled = _useStore2.disabled,\n      showValidate = _useStore2.showValidate,\n      validateMessages = _useStore2.validateMessages,\n      locale = _useStore2.locale,\n      watch = _useStore2.watch;\n\n  var _useTools = useTools(),\n      onValuesChange = _useTools.onValuesChange,\n      onItemChange = _useTools.onItemChange,\n      setEditing = _useTools.setEditing,\n      touchKey = _useTools.touchKey,\n      _setErrors = _useTools._setErrors,\n      renderTitle = _useTools.renderTitle,\n      requiredMark = _useTools.requiredMark;\n\n  var formDataRef = useRef();\n  formDataRef.current = formData; // console.log('<renderField>', $id);\n\n  var errObj = errorFields.find(function (err) {\n    return err.name === dataPath;\n  });\n  var errorMessage = errObj && errObj.error; // 是一个list\n\n  var hasError = Array.isArray(errorMessage) && errorMessage.length > 0; // 补上这个class，会自动让下面所有的展示ui变红！\n\n  var contentClass = hasError && showValidate ? _contentClass + ' ant-form-item-has-error' : _contentClass;\n  var contentStyle = {};\n  var debouncedSetEditing = useDebouncedCallback(setEditing, 350);\n\n  var _readOnly = readOnly !== undefined ? readOnly : _schema.readOnly;\n\n  var _disabled = disabled !== undefined ? disabled : _schema.disabled;\n\n  var removeDupErrors = function removeDupErrors(arr) {\n    if (!Array.isArray(arr)) {\n      console.log('in removeDups: param is not an array');\n      return;\n    }\n\n    var array = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      var sameNameIndex = array.findIndex(function (item) {\n        return item.name === arr[i].name;\n      });\n\n      if (sameNameIndex > -1) {\n        var sameNameItem = array[sameNameIndex];\n        var error1 = sameNameItem.error;\n        var error2 = arr[i].error;\n        array[sameNameIndex] = {\n          name: sameNameItem.name,\n          error: error1.length > 0 && error2.length > 0 ? error2 : []\n        };\n      } else {\n        array.push(arr[i]);\n      }\n    }\n\n    return array.filter(function (item) {\n      return Array.isArray(item.error) && item.error.length > 0;\n    });\n  }; // TODO: 优化一下，只有touch还是false的时候，setTouched\n\n\n  var onChange = function onChange(value) {\n    // 动过的key，算被touch了, 这里之后要考虑动的来源\n    touchKey(dataPath); // 开始编辑，节流\n\n    if (debounceInput) {\n      setEditing(true);\n      debouncedSetEditing(false);\n    }\n\n    if (typeof dataPath === 'string') {\n      onItemChange(dataPath, value);\n    } // 先不暴露给外部，这个api\n\n\n    if (typeof onValuesChange === 'function') {\n      onValuesChange(_defineProperty({}, dataPath, value), formDataRef.current);\n    }\n\n    validateField({\n      path: dataPath,\n      formData: formDataRef.current,\n      flatten: flatten,\n      options: {\n        locale: locale,\n        validateMessages: validateMessages\n      }\n    }).then(function (res) {\n      _setErrors(function (errors) {\n        return removeDupErrors([].concat(_toConsumableArray(errors), _toConsumableArray(res)));\n      });\n    });\n  };\n\n  var titleProps = {\n    labelClass: labelClass,\n    labelStyle: labelStyle,\n    schema: _schema,\n    displayType: displayType,\n    renderTitle: renderTitle,\n    requiredMark: requiredMark\n  };\n  var messageProps = {\n    message: errorMessage,\n    schema: _schema,\n    displayType: displayType,\n    softHidden: displayType === 'inline',\n    // 这个是如果没有校验信息时，展示与否\n    hardHidden: showValidate === false || _readOnly === true // 这个是强制的展示与否\n\n  };\n  var placeholderTitleProps = {\n    className: labelClass,\n    style: labelStyle\n  };\n\n  var _showTitle = !hideTitle && typeof _schema.title === 'string'; // TODO: 这块最好能判断上一层是list1，\n\n\n  if (hideTitle && _schema.title) {\n    _schema.placeholder = _schema.placeholder || _schema.title;\n  }\n\n  var _getValue = function _getValue(path) {\n    return getValueByPath(formData, path);\n  };\n\n  var widgetProps = {\n    $id: $id,\n    schema: _schema,\n    readOnly: _readOnly,\n    disabled: _disabled,\n    onChange: onChange,\n    getValue: _getValue,\n    formData: formData,\n    value: _value,\n    dependValues: dependValues,\n    onItemChange: onItemChange,\n    dataIndex: dataIndex,\n    dataPath: dataPath,\n    children: children,\n    watch: watch,\n    hasError: hasError\n  }; // if (_schema && _schema.default !== undefined) {\n  //   widgetProps.value = _schema.default;\n  // }\n  // checkbox必须单独处理，布局太不同了\n\n  if (isCheckBoxType(_schema, _readOnly)) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, _showTitle && /*#__PURE__*/React.createElement(\"div\", placeholderTitleProps), /*#__PURE__*/React.createElement(\"div\", {\n      className: contentClass,\n      style: contentStyle\n    }, /*#__PURE__*/React.createElement(ExtendedWidget, widgetProps), /*#__PURE__*/React.createElement(ErrorMessage, messageProps), /*#__PURE__*/React.createElement(Extra, widgetProps), !hasError && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field-block\"\n    })));\n  }\n\n  var titleElement = /*#__PURE__*/React.createElement(FieldTitle, titleProps);\n\n  if (isObjType(_schema)) {\n    titleElement = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, titleElement, /*#__PURE__*/React.createElement(ErrorMessage, messageProps), !hasError && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field-block\"\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: contentClass,\n      style: contentStyle\n    }, /*#__PURE__*/React.createElement(ExtendedWidget, _extends({}, widgetProps, {\n      message: errorMessage,\n      title: _showTitle ? titleElement : undefined\n    })), /*#__PURE__*/React.createElement(Extra, widgetProps));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, _showTitle && titleElement, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(contentClass, \" \").concat(hideTitle ? 'fr-content-no-title' : ''),\n    style: contentStyle\n  }, /*#__PURE__*/React.createElement(ExtendedWidget, widgetProps), /*#__PURE__*/React.createElement(ErrorMessage, messageProps), /*#__PURE__*/React.createElement(Extra, widgetProps), !hasError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field-block\"\n  })));\n};\n\nexport default RenderField;","map":null,"metadata":{},"sourceType":"module"}