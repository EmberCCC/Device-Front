{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rcTable = _interopRequireDefault(require(\"rc-table\"));\n\nvar _Table = require(\"rc-table/lib/Table\");\n\nvar _spin = _interopRequireDefault(require(\"../spin\"));\n\nvar _pagination = _interopRequireDefault(require(\"../pagination\"));\n\nvar _context = require(\"../config-provider/context\");\n\nvar _usePagination3 = _interopRequireWildcard(require(\"./hooks/usePagination\"));\n\nvar _useLazyKVMap3 = _interopRequireDefault(require(\"./hooks/useLazyKVMap\"));\n\nvar _useSelection3 = _interopRequireWildcard(require(\"./hooks/useSelection\"));\n\nvar _useSorter3 = _interopRequireWildcard(require(\"./hooks/useSorter\"));\n\nvar _useFilter3 = _interopRequireWildcard(require(\"./hooks/useFilter\"));\n\nvar _useTitleColumns3 = _interopRequireDefault(require(\"./hooks/useTitleColumns\"));\n\nvar _ExpandIcon = _interopRequireDefault(require(\"./ExpandIcon\"));\n\nvar _scrollTo = _interopRequireDefault(require(\"../_util/scrollTo\"));\n\nvar _en_US = _interopRequireDefault(require(\"../locale/en_US\"));\n\nvar _SizeContext = _interopRequireDefault(require(\"../config-provider/SizeContext\"));\n\nvar _Column = _interopRequireDefault(require(\"./Column\"));\n\nvar _ColumnGroup = _interopRequireDefault(require(\"./ColumnGroup\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar EMPTY_LIST = [];\n\nfunction Table(props) {\n  var _classNames3;\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      customizeSize = props.size,\n      bordered = props.bordered,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      dataSource = props.dataSource,\n      pagination = props.pagination,\n      rowSelection = props.rowSelection,\n      rowKey = props.rowKey,\n      rowClassName = props.rowClassName,\n      columns = props.columns,\n      onChange = props.onChange,\n      getPopupContainer = props.getPopupContainer,\n      loading = props.loading,\n      expandIcon = props.expandIcon,\n      expandable = props.expandable,\n      expandedRowRender = props.expandedRowRender,\n      indentSize = props.indentSize,\n      _props$childrenColumn = props.childrenColumnName,\n      childrenColumnName = _props$childrenColumn === void 0 ? 'children' : _props$childrenColumn,\n      scroll = props.scroll,\n      sortDirections = props.sortDirections,\n      locale = props.locale;\n  var size = React.useContext(_SizeContext[\"default\"]);\n\n  var _React$useContext = React.useContext(_context.ConfigContext),\n      _React$useContext$loc = _React$useContext.locale,\n      contextLocale = _React$useContext$loc === void 0 ? _en_US[\"default\"] : _React$useContext$loc,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction;\n\n  var mergedSize = customizeSize || size;\n  var tableLocale = locale || contextLocale.Table;\n  var rawData = dataSource || EMPTY_LIST;\n\n  var _React$useContext2 = React.useContext(_context.ConfigContext),\n      getPrefixCls = _React$useContext2.getPrefixCls;\n\n  var prefixCls = getPrefixCls('table', customizePrefixCls);\n  var expandType = React.useMemo(function () {\n    if (rawData.some(function (item) {\n      return item[childrenColumnName];\n    })) {\n      return 'nest';\n    }\n\n    if (expandedRowRender || expandable && expandable.expandedRowRender) {\n      return 'row';\n    }\n\n    return null;\n  }, [rawData]);\n  var internalRefs = {\n    body: React.useRef()\n  }; // ============================ RowKey ============================\n\n  var getRowKey = React.useMemo(function () {\n    if (typeof rowKey === 'function') {\n      return rowKey;\n    }\n\n    return function (record) {\n      return record[rowKey];\n    };\n  }, [rowKey]);\n\n  var _useLazyKVMap = (0, _useLazyKVMap3[\"default\"])(rawData, childrenColumnName, getRowKey),\n      _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1),\n      getRecordByKey = _useLazyKVMap2[0]; // ============================ Events =============================\n\n\n  var changeEventInfo = {};\n\n  var triggerOnChange = function triggerOnChange(info) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var changeInfo = _extends(_extends({}, changeEventInfo), info);\n\n    if (reset) {\n      changeEventInfo.resetPagination(); // Reset event param\n\n      if (changeInfo.pagination.current) {\n        changeInfo.pagination.current = 1;\n      } // Trigger pagination events\n\n\n      if (pagination && pagination.onChange) {\n        pagination.onChange(1, changeInfo.pagination.pageSize);\n      }\n    }\n\n    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {\n      (0, _scrollTo[\"default\"])(0, {\n        getContainer: function getContainer() {\n          return internalRefs.body.current;\n        }\n      });\n    }\n\n    if (onChange) {\n      onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {\n        currentDataSource: (0, _useFilter3.getFilterData)((0, _useSorter3.getSortData)(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates)\n      });\n    }\n  };\n  /**\n   * Controlled state in `columns` is not a good idea that makes too many code (1000+ line?)\n   * to read state out and then put it back to title render.\n   * Move these code into `hooks` but still too complex.\n   * We should provides Table props like `sorter` & `filter` to handle control in next big version.\n   */\n  // ============================ Sorter =============================\n\n\n  var onSorterChange = function onSorterChange(sorter, sorterStates) {\n    triggerOnChange({\n      sorter: sorter,\n      sorterStates: sorterStates\n    }, false);\n  };\n\n  var _useSorter = (0, _useSorter3[\"default\"])({\n    prefixCls: prefixCls,\n    columns: columns || [],\n    onSorterChange: onSorterChange,\n    sortDirections: sortDirections || ['ascend', 'descend']\n  }),\n      _useSorter2 = _slicedToArray(_useSorter, 4),\n      transformSorterColumns = _useSorter2[0],\n      sortStates = _useSorter2[1],\n      sorterTitleProps = _useSorter2[2],\n      getSorters = _useSorter2[3];\n\n  var sortedData = React.useMemo(function () {\n    return (0, _useSorter3.getSortData)(rawData, sortStates, childrenColumnName);\n  }, [rawData, sortStates]);\n  changeEventInfo.sorter = getSorters();\n  changeEventInfo.sorterStates = sortStates; // ============================ Filter ============================\n\n  var onFilterChange = function onFilterChange(filters, filterStates) {\n    triggerOnChange({\n      filters: filters,\n      filterStates: filterStates\n    }, true);\n  };\n\n  var _useFilter = (0, _useFilter3[\"default\"])({\n    prefixCls: prefixCls,\n    dropdownPrefixCls: dropdownPrefixCls,\n    columns: columns || [],\n    onFilterChange: onFilterChange,\n    getPopupContainer: getPopupContainer\n  }),\n      _useFilter2 = _slicedToArray(_useFilter, 3),\n      transformFilterColumns = _useFilter2[0],\n      filterStates = _useFilter2[1],\n      getFilters = _useFilter2[2];\n\n  var mergedData = (0, _useFilter3.getFilterData)(sortedData, filterStates);\n  changeEventInfo.filters = getFilters();\n  changeEventInfo.filterStates = filterStates; // ============================ Column ============================\n\n  var columnTitleProps = React.useMemo(function () {\n    return _extends({}, sorterTitleProps);\n  }, [sorterTitleProps]);\n\n  var _useTitleColumns = (0, _useTitleColumns3[\"default\"])(columnTitleProps),\n      _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1),\n      transformTitleColumns = _useTitleColumns2[0]; // ========================== Pagination ==========================\n\n\n  var onPaginationChange = function onPaginationChange(current, pageSize) {\n    triggerOnChange({\n      pagination: _extends(_extends({}, changeEventInfo.pagination), {\n        current: current,\n        pageSize: pageSize\n      })\n    });\n  };\n\n  var _usePagination = (0, _usePagination3[\"default\"])(mergedData.length, pagination, onPaginationChange),\n      _usePagination2 = _slicedToArray(_usePagination, 2),\n      mergedPagination = _usePagination2[0],\n      resetPagination = _usePagination2[1];\n\n  changeEventInfo.pagination = pagination === false ? {} : (0, _usePagination3.getPaginationParam)(pagination, mergedPagination);\n  changeEventInfo.resetPagination = resetPagination; // ============================= Data =============================\n\n  var pageData = React.useMemo(function () {\n    if (pagination === false || !mergedPagination.pageSize || mergedData.length < mergedPagination.total) {\n      return mergedData;\n    }\n\n    var _mergedPagination$cur = mergedPagination.current,\n        current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur,\n        _mergedPagination$pag = mergedPagination.pageSize,\n        pageSize = _mergedPagination$pag === void 0 ? _usePagination3.DEFAULT_PAGE_SIZE : _mergedPagination$pag;\n    var currentPageData = mergedData.slice((current - 1) * pageSize, current * pageSize);\n    return currentPageData;\n  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]); // ========================== Selections ==========================\n\n  var _useSelection = (0, _useSelection3[\"default\"])(rowSelection, {\n    prefixCls: prefixCls,\n    data: mergedData,\n    pageData: pageData,\n    getRowKey: getRowKey,\n    getRecordByKey: getRecordByKey,\n    expandType: expandType,\n    childrenColumnName: childrenColumnName\n  }),\n      _useSelection2 = _slicedToArray(_useSelection, 2),\n      transformSelectionColumns = _useSelection2[0],\n      selectedKeySet = _useSelection2[1];\n\n  var internalRowClassName = function internalRowClassName(record, index, indent) {\n    var mergedRowClassName;\n\n    if (typeof rowClassName === 'function') {\n      mergedRowClassName = (0, _classnames[\"default\"])(rowClassName(record, index, indent));\n    } else {\n      mergedRowClassName = (0, _classnames[\"default\"])(rowClassName);\n    }\n\n    return (0, _classnames[\"default\"])(_defineProperty({}, \"\".concat(prefixCls, \"-row-selected\"), selectedKeySet.has(getRowKey(record, index))), mergedRowClassName);\n  }; // ========================== Expandable ==========================\n\n\n  var mergedExpandable = _extends({}, expandable); // Pass origin render status into `rc-table`, this can be removed when refactor with `rc-table`\n\n\n  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon; // Customize expandable icon\n\n  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || (0, _ExpandIcon[\"default\"])(tableLocale); // Adjust expand icon index, no overwrite expandIconColumnIndex if set.\n\n  if (expandType === 'nest' && !('expandIconColumnIndex' in mergedExpandable)) {\n    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;\n  } // Indent size\n\n\n  mergedExpandable.indentSize = mergedExpandable.indentSize || indentSize || 15; // ============================ Render ============================\n\n  var transformColumns = React.useCallback(function (innerColumns) {\n    return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));\n  }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);\n  var topPaginationNode;\n  var bottomPaginationNode;\n\n  if (pagination !== false) {\n    var paginationSize;\n\n    if (mergedPagination.size) {\n      paginationSize = mergedPagination.size;\n    } else {\n      paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;\n    }\n\n    var renderPagination = function renderPagination() {\n      return React.createElement(_pagination[\"default\"], _extends({\n        className: \"\".concat(prefixCls, \"-pagination\")\n      }, mergedPagination, {\n        size: paginationSize\n      }));\n    };\n\n    switch (mergedPagination.position) {\n      case 'top':\n        topPaginationNode = renderPagination();\n        break;\n\n      case 'both':\n        topPaginationNode = renderPagination();\n        bottomPaginationNode = renderPagination();\n        break;\n\n      default:\n        bottomPaginationNode = renderPagination();\n    }\n  } // >>>>>>>>> Spinning\n\n\n  var spinProps;\n\n  if (typeof loading === 'boolean') {\n    spinProps = {\n      spinning: loading\n    };\n  } else {\n    spinProps = loading;\n  }\n\n  var wrapperClassNames = (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, \"\".concat(prefixCls, \"-wrapper-rtl\"), direction === 'rtl'));\n  return React.createElement(\"div\", {\n    className: wrapperClassNames,\n    onTouchMove: function onTouchMove(e) {\n      e.preventDefault();\n    }\n  }, React.createElement(_spin[\"default\"], _extends({\n    spinning: false\n  }, spinProps), topPaginationNode, React.createElement(_rcTable[\"default\"], _extends({}, props, {\n    expandable: mergedExpandable,\n    prefixCls: prefixCls,\n    className: (0, _classnames[\"default\"])(className, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-middle\"), mergedSize === 'middle'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-small\"), mergedSize === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-bordered\"), bordered), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames3)),\n    data: pageData,\n    rowKey: getRowKey,\n    rowClassName: internalRowClassName,\n    emptyText: locale && locale.emptyText || renderEmpty('Table') // Internal\n    ,\n    internalHooks: _Table.INTERNAL_HOOKS,\n    internalRefs: internalRefs,\n    transformColumns: transformColumns\n  })), bottomPaginationNode));\n}\n\nTable.defaultProps = {\n  rowKey: 'key'\n};\nTable.SELECTION_ALL = _useSelection3.SELECTION_ALL;\nTable.SELECTION_INVERT = _useSelection3.SELECTION_INVERT;\nTable.Column = _Column[\"default\"];\nTable.ColumnGroup = _ColumnGroup[\"default\"];\nvar _default = Table;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}