{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MotionPropTypes = undefined;\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nexports.genCSSMotion = genCSSMotion;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _findDOMNode = require('rc-util/lib/Dom/findDOMNode');\n\nvar _findDOMNode2 = _interopRequireDefault(_findDOMNode);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _raf = require('raf');\n\nvar _raf2 = _interopRequireDefault(_raf);\n\nvar _motion = require('./util/motion');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar STATUS_NONE = 'none';\n/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp */\n\nvar STATUS_APPEAR = 'appear';\nvar STATUS_ENTER = 'enter';\nvar STATUS_LEAVE = 'leave';\nvar MotionPropTypes = exports.MotionPropTypes = {\n  eventProps: _propTypes2['default'].object,\n  // Internal usage. Only pass by CSSMotionList\n  visible: _propTypes2['default'].bool,\n  children: _propTypes2['default'].func,\n  motionName: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].object]),\n  motionAppear: _propTypes2['default'].bool,\n  motionEnter: _propTypes2['default'].bool,\n  motionLeave: _propTypes2['default'].bool,\n  motionLeaveImmediately: _propTypes2['default'].bool,\n  // Trigger leave motion immediately\n  removeOnLeave: _propTypes2['default'].bool,\n  leavedClassName: _propTypes2['default'].string,\n  onAppearStart: _propTypes2['default'].func,\n  onAppearActive: _propTypes2['default'].func,\n  onAppearEnd: _propTypes2['default'].func,\n  onEnterStart: _propTypes2['default'].func,\n  onEnterActive: _propTypes2['default'].func,\n  onEnterEnd: _propTypes2['default'].func,\n  onLeaveStart: _propTypes2['default'].func,\n  onLeaveActive: _propTypes2['default'].func,\n  onLeaveEnd: _propTypes2['default'].func\n};\n/**\n * `transitionSupport` is used for none transition test case.\n * Default we use browser transition event support check.\n */\n\nfunction genCSSMotion(config) {\n  var transitionSupport = config;\n  var forwardRef = !!_react2['default'].forwardRef;\n\n  if (typeof config === 'object') {\n    transitionSupport = config.transitionSupport;\n    forwardRef = 'forwardRef' in config ? config.forwardRef : forwardRef;\n  }\n\n  function isSupportTransition(props) {\n    return !!(props.motionName && transitionSupport);\n  }\n\n  var CSSMotion = function (_React$Component) {\n    (0, _inherits3['default'])(CSSMotion, _React$Component);\n\n    function CSSMotion() {\n      (0, _classCallCheck3['default'])(this, CSSMotion);\n\n      var _this = (0, _possibleConstructorReturn3['default'])(this, (CSSMotion.__proto__ || Object.getPrototypeOf(CSSMotion)).call(this));\n\n      _this.onDomUpdate = function () {\n        var _this$state = _this.state,\n            status = _this$state.status,\n            newStatus = _this$state.newStatus;\n        var _this$props = _this.props,\n            onAppearStart = _this$props.onAppearStart,\n            onEnterStart = _this$props.onEnterStart,\n            onLeaveStart = _this$props.onLeaveStart,\n            onAppearActive = _this$props.onAppearActive,\n            onEnterActive = _this$props.onEnterActive,\n            onLeaveActive = _this$props.onLeaveActive,\n            motionAppear = _this$props.motionAppear,\n            motionEnter = _this$props.motionEnter,\n            motionLeave = _this$props.motionLeave;\n\n        if (!isSupportTransition(_this.props)) {\n          return;\n        } // Event injection\n\n\n        var $ele = _this.getElement();\n\n        if (_this.$cacheEle !== $ele) {\n          _this.removeEventListener(_this.$cacheEle);\n\n          _this.addEventListener($ele);\n\n          _this.$cacheEle = $ele;\n        } // Init status\n\n\n        if (newStatus && status === STATUS_APPEAR && motionAppear) {\n          _this.updateStatus(onAppearStart, null, null, function () {\n            _this.updateActiveStatus(onAppearActive, STATUS_APPEAR);\n          });\n        } else if (newStatus && status === STATUS_ENTER && motionEnter) {\n          _this.updateStatus(onEnterStart, null, null, function () {\n            _this.updateActiveStatus(onEnterActive, STATUS_ENTER);\n          });\n        } else if (newStatus && status === STATUS_LEAVE && motionLeave) {\n          _this.updateStatus(onLeaveStart, null, null, function () {\n            _this.updateActiveStatus(onLeaveActive, STATUS_LEAVE);\n          });\n        }\n      };\n\n      _this.onMotionEnd = function (event) {\n        var _this$state2 = _this.state,\n            status = _this$state2.status,\n            statusActive = _this$state2.statusActive;\n        var _this$props2 = _this.props,\n            onAppearEnd = _this$props2.onAppearEnd,\n            onEnterEnd = _this$props2.onEnterEnd,\n            onLeaveEnd = _this$props2.onLeaveEnd;\n\n        if (status === STATUS_APPEAR && statusActive) {\n          _this.updateStatus(onAppearEnd, {\n            status: STATUS_NONE\n          }, event);\n        } else if (status === STATUS_ENTER && statusActive) {\n          _this.updateStatus(onEnterEnd, {\n            status: STATUS_NONE\n          }, event);\n        } else if (status === STATUS_LEAVE && statusActive) {\n          _this.updateStatus(onLeaveEnd, {\n            status: STATUS_NONE\n          }, event);\n        }\n      };\n\n      _this.setNodeRef = function (node) {\n        var internalRef = _this.props.internalRef;\n        _this.node = node;\n\n        if (typeof internalRef === 'function') {\n          internalRef(node);\n        } else if (internalRef && 'current' in internalRef) {\n          internalRef.current = node;\n        }\n      };\n\n      _this.getElement = function () {\n        return (0, _findDOMNode2['default'])(_this.node || _this);\n      };\n\n      _this.addEventListener = function ($ele) {\n        if (!$ele) return;\n        $ele.addEventListener(_motion.transitionEndName, _this.onMotionEnd);\n        $ele.addEventListener(_motion.animationEndName, _this.onMotionEnd);\n      };\n\n      _this.removeEventListener = function ($ele) {\n        if (!$ele) return;\n        $ele.removeEventListener(_motion.transitionEndName, _this.onMotionEnd);\n        $ele.removeEventListener(_motion.animationEndName, _this.onMotionEnd);\n      };\n\n      _this.updateStatus = function (styleFunc, additionalState, event, callback) {\n        var statusStyle = styleFunc ? styleFunc(_this.getElement(), event) : null;\n        if (statusStyle === false || _this._destroyed) return;\n        var nextStep = void 0;\n\n        if (callback) {\n          nextStep = function nextStep() {\n            _this.nextFrame(callback);\n          };\n        }\n\n        _this.setState((0, _extends3['default'])({\n          statusStyle: typeof statusStyle === 'object' ? statusStyle : null,\n          newStatus: false\n        }, additionalState), nextStep); // Trigger before next frame & after `componentDidMount`\n\n      };\n\n      _this.updateActiveStatus = function (styleFunc, currentStatus) {\n        // `setState` use `postMessage` to trigger at the end of frame.\n        // Let's use requestAnimationFrame to update new state in next frame.\n        _this.nextFrame(function () {\n          var status = _this.state.status;\n          if (status !== currentStatus) return;\n\n          _this.updateStatus(styleFunc, {\n            statusActive: true\n          });\n        });\n      };\n\n      _this.nextFrame = function (func) {\n        _this.cancelNextFrame();\n\n        _this.raf = (0, _raf2['default'])(func);\n      };\n\n      _this.cancelNextFrame = function () {\n        if (_this.raf) {\n          _raf2['default'].cancel(_this.raf);\n\n          _this.raf = null;\n        }\n      };\n\n      _this.state = {\n        status: STATUS_NONE,\n        statusActive: false,\n        newStatus: false,\n        statusStyle: null\n      };\n      _this.$cacheEle = null;\n      _this.node = null;\n      _this.raf = null;\n      return _this;\n    }\n\n    (0, _createClass3['default'])(CSSMotion, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.onDomUpdate();\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate() {\n        this.onDomUpdate();\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this._destroyed = true;\n        this.removeEventListener(this.$cacheEle);\n        this.cancelNextFrame();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _classNames;\n\n        var _state = this.state,\n            status = _state.status,\n            statusActive = _state.statusActive,\n            statusStyle = _state.statusStyle;\n        var _props = this.props,\n            children = _props.children,\n            motionName = _props.motionName,\n            visible = _props.visible,\n            removeOnLeave = _props.removeOnLeave,\n            leavedClassName = _props.leavedClassName,\n            eventProps = _props.eventProps;\n        if (!children) return null;\n\n        if (status === STATUS_NONE || !isSupportTransition(this.props)) {\n          if (visible) {\n            return children((0, _extends3['default'])({}, eventProps), this.setNodeRef);\n          } else if (!removeOnLeave) {\n            return children((0, _extends3['default'])({}, eventProps, {\n              className: leavedClassName\n            }), this.setNodeRef);\n          }\n\n          return null;\n        }\n\n        return children((0, _extends3['default'])({}, eventProps, {\n          className: (0, _classnames2['default'])((_classNames = {}, (0, _defineProperty3['default'])(_classNames, (0, _motion.getTransitionName)(motionName, status), status !== STATUS_NONE), (0, _defineProperty3['default'])(_classNames, (0, _motion.getTransitionName)(motionName, status + '-active'), status !== STATUS_NONE && statusActive), (0, _defineProperty3['default'])(_classNames, motionName, typeof motionName === 'string'), _classNames)),\n          style: statusStyle\n        }), this.setNodeRef);\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(props, _ref) {\n        var prevProps = _ref.prevProps,\n            prevStatus = _ref.status;\n        if (!isSupportTransition(props)) return {};\n        var visible = props.visible,\n            motionAppear = props.motionAppear,\n            motionEnter = props.motionEnter,\n            motionLeave = props.motionLeave,\n            motionLeaveImmediately = props.motionLeaveImmediately;\n        var newState = {\n          prevProps: props\n        }; // Clean up status if prop set to false\n\n        if (prevStatus === STATUS_APPEAR && !motionAppear || prevStatus === STATUS_ENTER && !motionEnter || prevStatus === STATUS_LEAVE && !motionLeave) {\n          newState.status = STATUS_NONE;\n          newState.statusActive = false;\n          newState.newStatus = false;\n        } // Appear\n\n\n        if (!prevProps && visible && motionAppear) {\n          newState.status = STATUS_APPEAR;\n          newState.statusActive = false;\n          newState.newStatus = true;\n        } // Enter\n\n\n        if (prevProps && !prevProps.visible && visible && motionEnter) {\n          newState.status = STATUS_ENTER;\n          newState.statusActive = false;\n          newState.newStatus = true;\n        } // Leave\n\n\n        if (prevProps && prevProps.visible && !visible && motionLeave || !prevProps && motionLeaveImmediately && !visible && motionLeave) {\n          newState.status = STATUS_LEAVE;\n          newState.statusActive = false;\n          newState.newStatus = true;\n        }\n\n        return newState;\n      }\n    }]);\n    return CSSMotion;\n  }(_react2['default'].Component);\n\n  CSSMotion.propTypes = (0, _extends3['default'])({}, MotionPropTypes, {\n    internalRef: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func])\n  });\n  CSSMotion.defaultProps = {\n    visible: true,\n    motionEnter: true,\n    motionAppear: true,\n    motionLeave: true,\n    removeOnLeave: true\n  };\n  (0, _reactLifecyclesCompat.polyfill)(CSSMotion);\n\n  if (!forwardRef) {\n    return CSSMotion;\n  }\n\n  return _react2['default'].forwardRef(function (props, ref) {\n    return _react2['default'].createElement(CSSMotion, (0, _extends3['default'])({\n      internalRef: ref\n    }, props));\n  });\n}\n\nexports['default'] = genCSSMotion(_motion.supportTransition);","map":null,"metadata":{},"sourceType":"script"}