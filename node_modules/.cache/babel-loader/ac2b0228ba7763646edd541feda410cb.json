{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n\nimport { get } from 'lodash-es';\nimport React from 'react';\nimport { useStore, useTools } from '../../../hooks';\nimport { generateDataSkeleton, getDataPath, getSchemaFromFlatten } from '../../../utils';\nimport CardList from './CardList';\nimport DrawerList from './DrawerList';\nimport \"./list.css\";\nimport SimpleList from './SimpleList';\nimport TableList from './TableList';\nimport TabList from './TabList';\nimport VirtualList from './VirtualList';\n\nvar RenderList = function RenderList(_ref) {\n  var parentId = _ref.parentId,\n      _ref$schema = _ref.schema,\n      schema = _ref$schema === void 0 ? {} : _ref$schema,\n      _ref$dataIndex = _ref.dataIndex,\n      dataIndex = _ref$dataIndex === void 0 ? [] : _ref$dataIndex,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? [] : _ref$children,\n      errorFields = _ref.errorFields,\n      displayType = _ref.displayType;\n\n  var _useStore = useStore(),\n      formData = _useStore.formData,\n      flatten = _useStore.flatten;\n\n  var _useTools = useTools(),\n      onItemChange = _useTools.onItemChange,\n      removeTouched = _useTools.removeTouched,\n      methods = _useTools.methods;\n\n  var _schema$props = schema.props,\n      props = _schema$props === void 0 ? {} : _schema$props;\n  var renderWidget = 'list';\n\n  try {\n    renderWidget = schema.widget;\n  } catch (error) {} // 计算 list对应的formData\n\n\n  var dataPath = getDataPath(parentId, dataIndex);\n  var listData;\n\n  if (typeof dataPath === 'string') {\n    // TODO: listData会有不少“窟窿”，submit 的时候，listData 需要补齐 or filter\n    listData = get(formData, dataPath);\n  }\n\n  var displayList = Array.isArray(listData) ? listData : [{}];\n\n  var changeList = function changeList(newList) {\n    onItemChange(dataPath, newList);\n  };\n\n  var addItem = function addItem() {\n    var _schema = getSchemaFromFlatten(flatten, parentId);\n\n    var newItem = generateDataSkeleton(_schema.items) || {};\n    var newList = [].concat(_toConsumableArray(displayList), [newItem]);\n    var newIndex = newList.length - 1;\n    onItemChange(dataPath, newList);\n    return newIndex;\n  };\n\n  var copyItem = function copyItem(idx) {\n    var newItem = displayList[idx];\n    var newList = [].concat(_toConsumableArray(displayList.slice(0, idx)), [newItem], _toConsumableArray(displayList.slice(idx)));\n    onItemChange(dataPath, JSON.parse(JSON.stringify(newList)));\n  };\n\n  var deleteItem = function deleteItem(idx) {\n    // TODO: 删除元素的时候，也需要delete相对于的校验信息（errorFields）\n    // remark: 删除时，不存在的item需要补齐，用null\n    var newList = displayList.filter(function (item, kdx) {\n      return kdx !== idx;\n    });\n    onItemChange(dataPath, newList);\n    removeTouched(\"\".concat(dataPath, \"[\").concat(idx, \"]\"));\n  };\n\n  var handleMoving = function handleMoving() {\n    if (props.onMove && typeof props.onMove === 'string') {\n      var cb = methods[props.onMove];\n\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }; //TODO1: 上线翻页要正确！！现在是错的\n\n\n  var moveItemUp = function moveItemUp(idx) {\n    handleMoving();\n    if (idx === 0) return;\n    var currentItem = displayList[idx];\n    var itemAbove = displayList[idx - 1];\n    var newList = displayList;\n    newList[idx] = itemAbove;\n    newList[idx - 1] = currentItem;\n    onItemChange(dataPath, newList); // TODO: 这块懒了，之后要处理一下\n\n    removeTouched(\"\".concat(dataPath, \"[\").concat(idx, \"]\"));\n  };\n\n  var moveItemDown = function moveItemDown(idx) {\n    handleMoving();\n    if (idx >= displayList.length - 1) return;\n    var currentItem = displayList[idx];\n    var itemBelow = displayList[idx + 1];\n    var newList = displayList;\n    newList[idx] = itemBelow;\n    newList[idx + 1] = currentItem;\n    onItemChange(dataPath, newList); // TODO: 这块懒了，之后要处理一下\n\n    removeTouched(\"\".concat(dataPath, \"[\").concat(idx, \"]\"));\n  };\n\n  var itemSchema = {\n    type: 'object',\n    properties: {},\n    props: schema.props || {},\n    $id: schema.$id\n  };\n  var itemFlatten = {\n    schema: itemSchema,\n    children: children\n  };\n\n  var getFieldsProps = function getFieldsProps(idx, extraProps) {\n    return _objectSpread({\n      _item: itemFlatten,\n      dataIndex: [].concat(_toConsumableArray(dataIndex), [idx])\n    }, extraProps);\n  };\n\n  var displayProps = {\n    displayList: displayList,\n    changeList: changeList,\n    schema: schema,\n    dataPath: dataPath,\n    dataIndex: dataIndex,\n    children: children,\n    deleteItem: deleteItem,\n    addItem: addItem,\n    copyItem: copyItem,\n    moveItemDown: moveItemDown,\n    moveItemUp: moveItemUp,\n    listData: listData,\n    flatten: flatten,\n    errorFields: errorFields,\n    displayType: displayType,\n    getFieldsProps: getFieldsProps\n  };\n\n  switch (renderWidget) {\n    case 'list1':\n    case 'simpleList':\n      return /*#__PURE__*/React.createElement(SimpleList, displayProps);\n\n    case 'list2':\n    case 'tableList':\n      return /*#__PURE__*/React.createElement(TableList, displayProps);\n\n    case 'list3':\n    case 'drawerList':\n      return /*#__PURE__*/React.createElement(DrawerList, displayProps);\n\n    case 'list4':\n    case 'virtualList':\n      return /*#__PURE__*/React.createElement(VirtualList, displayProps);\n\n    case 'tabList':\n      return /*#__PURE__*/React.createElement(TabList, displayProps);\n\n    case 'list0':\n    case 'cardList':\n    default:\n      return /*#__PURE__*/React.createElement(CardList, displayProps);\n  }\n};\n\nexport default RenderList;","map":null,"metadata":{},"sourceType":"module"}