{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar mini_store_1 = require(\"mini-store\");\n\nvar ExpandIcon_1 = __importDefault(require(\"./ExpandIcon\"));\n\nvar ExpandableRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpandableRow, _React$Component);\n\n  function ExpandableRow() {\n    var _this;\n\n    _classCallCheck(this, ExpandableRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExpandableRow).apply(this, arguments)); // Show icon within first column\n\n    _this.hasExpandIcon = function (columnIndex) {\n      var _this$props = _this.props,\n          expandRowByClick = _this$props.expandRowByClick,\n          expandIcon = _this$props.expandIcon;\n\n      if (_this.expandIconAsCell || columnIndex !== _this.expandIconColumnIndex) {\n        return false;\n      }\n\n      return !!expandIcon || !expandRowByClick;\n    };\n\n    _this.handleExpandChange = function (record, event) {\n      var _this$props2 = _this.props,\n          onExpandedChange = _this$props2.onExpandedChange,\n          expanded = _this$props2.expanded,\n          rowKey = _this$props2.rowKey;\n\n      if (_this.expandable) {\n        onExpandedChange(!expanded, record, event, rowKey);\n      }\n    };\n\n    _this.handleRowClick = function (record, index, event) {\n      var _this$props3 = _this.props,\n          expandRowByClick = _this$props3.expandRowByClick,\n          onRowClick = _this$props3.onRowClick;\n\n      if (expandRowByClick) {\n        _this.handleExpandChange(record, event);\n      }\n\n      if (onRowClick) {\n        onRowClick(record, index, event);\n      }\n    };\n\n    _this.renderExpandIcon = function () {\n      var _this$props4 = _this.props,\n          prefixCls = _this$props4.prefixCls,\n          expanded = _this$props4.expanded,\n          record = _this$props4.record,\n          needIndentSpaced = _this$props4.needIndentSpaced,\n          expandIcon = _this$props4.expandIcon;\n\n      if (expandIcon) {\n        return expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          record: record,\n          needIndentSpaced: needIndentSpaced,\n          expandable: _this.expandable,\n          onExpand: _this.handleExpandChange\n        });\n      }\n\n      return React.createElement(ExpandIcon_1.default, {\n        expandable: _this.expandable,\n        prefixCls: prefixCls,\n        onExpand: _this.handleExpandChange,\n        needIndentSpaced: needIndentSpaced,\n        expanded: expanded,\n        record: record\n      });\n    };\n\n    _this.renderExpandIconCell = function (cells) {\n      if (!_this.expandIconAsCell) {\n        return;\n      }\n\n      var prefixCls = _this.props.prefixCls;\n      cells.push(React.createElement(\"td\", {\n        className: \"\".concat(prefixCls, \"-expand-icon-cell\"),\n        key: \"rc-table-expand-icon-cell\"\n      }, _this.renderExpandIcon()));\n    };\n\n    return _this;\n  }\n\n  _createClass(ExpandableRow, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.handleDestroy();\n    }\n  }, {\n    key: \"handleDestroy\",\n    value: function handleDestroy() {\n      var _this$props5 = this.props,\n          onExpandedChange = _this$props5.onExpandedChange,\n          rowKey = _this$props5.rowKey,\n          record = _this$props5.record;\n\n      if (this.expandable) {\n        onExpandedChange(false, record, null, rowKey, true);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          childrenColumnName = _this$props6.childrenColumnName,\n          expandedRowRender = _this$props6.expandedRowRender,\n          indentSize = _this$props6.indentSize,\n          record = _this$props6.record,\n          fixed = _this$props6.fixed,\n          expanded = _this$props6.expanded;\n      this.expandIconAsCell = fixed !== 'right' ? this.props.expandIconAsCell : false;\n      this.expandIconColumnIndex = fixed !== 'right' ? this.props.expandIconColumnIndex : -1;\n      var childrenData = record[childrenColumnName];\n      this.expandable = !!(childrenData || expandedRowRender);\n      var expandableRowProps = {\n        indentSize: indentSize,\n        // not used in TableRow, but it's required to re-render TableRow when `expanded` changes\n        expanded: expanded,\n        onRowClick: this.handleRowClick,\n        hasExpandIcon: this.hasExpandIcon,\n        renderExpandIcon: this.renderExpandIcon,\n        renderExpandIconCell: this.renderExpandIconCell\n      };\n      return this.props.children(expandableRowProps);\n    }\n  }]);\n\n  return ExpandableRow;\n}(React.Component);\n\nexports.default = mini_store_1.connect(function (_ref, _ref2) {\n  var _ref$expandedRowKeys = _ref.expandedRowKeys,\n      expandedRowKeys = _ref$expandedRowKeys === void 0 ? [] : _ref$expandedRowKeys;\n  var rowKey = _ref2.rowKey;\n  return {\n    expanded: expandedRowKeys.includes(rowKey)\n  };\n})(ExpandableRow);","map":null,"metadata":{},"sourceType":"script"}