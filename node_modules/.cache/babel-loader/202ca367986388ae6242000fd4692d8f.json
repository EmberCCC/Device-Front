{"ast":null,"code":"/*\r\n * @Author: your name\r\n * @Date: 2022-04-26 22:13:06\r\n * @LastEditTime: 2022-04-26 22:56:37\r\n * @LastEditors: Please set LastEditors\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage-test\\src\\layouts\\HomeLayout\\WebSocket.js\r\n */\nimport { PubSub } from 'pubsub-js';\nvar websocket,\n    lockReconnect = false;\n\nvar createWebSocket = function createWebSocket(url) {\n  websocket = new WebSocket(url + \"/1/admin/1\");\n  console.log('ws connect');\n\n  websocket.onopen = function () {\n    console.log('ws open');\n    heartCheck.reset().start();\n  };\n\n  websocket.onerror = function () {\n    reconnect(url);\n  };\n\n  websocket.onclose = function (e) {\n    heartCheck.reset();\n    console.log('ws closed: ' + e.code + ' ' + e.reason + ' ' + e.wasClean);\n  };\n\n  websocket.onmessage = function (event) {\n    lockReconnect = true; //event 为服务端传输的消息，在这里可以处理\n\n    var data = event.data; //把获取到的消息处理成字典，方便后期使用\n\n    console.log(data);\n    PubSub.publish('message', data); //发布接收到的消息 'message' 为发布消息的名称，data 为发布的消息\n  };\n};\n\nvar reconnect = function reconnect(url) {\n  if (lockReconnect) return; // 没连接上会一直重连，设置延迟避免请求过多\n\n  setTimeout(function () {\n    createWebSocket(url);\n    lockReconnect = false;\n  }, 4000);\n};\n\nvar heartCheck = {\n  timeout: 6000,\n  // 6秒\n  timeoutObj: null,\n  reset: function reset() {\n    clearInterval(this.timeoutObj);\n    return this;\n  },\n  start: function start() {\n    this.timeoutObj = setInterval(function () {\n      // 这里发送一个心跳，后端收到后，返回一个心跳消息，\n      // onmessage拿到返回的心跳就说明连接正常\n      websocket.send('HeartBeat');\n    }, this.timeout);\n  }\n}; // 关闭连接\n\nvar closeWebSocket = function closeWebSocket() {\n  websocket && websocket.close();\n};\n\nexport { websocket, createWebSocket, closeWebSocket };","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\routes\\BasicRouter\\webSocket.js"],"names":["PubSub","websocket","lockReconnect","createWebSocket","url","WebSocket","console","log","onopen","heartCheck","reset","start","onerror","reconnect","onclose","e","code","reason","wasClean","onmessage","event","data","publish","setTimeout","timeout","timeoutObj","clearInterval","setInterval","send","closeWebSocket","close"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,MAAT,QAAuB,WAAvB;AACA,IAAIC,SAAJ;AAAA,IACIC,aAAa,GAAG,KADpB;;AAEA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAS;AAC3BH,EAAAA,SAAS,GAAG,IAAII,SAAJ,CAAcD,GAAG,GAAC,YAAlB,CAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACAN,EAAAA,SAAS,CAACO,MAAV,GAAmB,YAAY;AAC3BF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAE,IAAAA,UAAU,CAACC,KAAX,GAAmBC,KAAnB;AACH,GAHD;;AAIAV,EAAAA,SAAS,CAACW,OAAV,GAAoB,YAAY;AAC5BC,IAAAA,SAAS,CAACT,GAAD,CAAT;AACH,GAFD;;AAGAH,EAAAA,SAAS,CAACa,OAAV,GAAoB,UAAUC,CAAV,EAAa;AAC7BN,IAAAA,UAAU,CAACC,KAAX;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBQ,CAAC,CAACC,IAAlB,GAAyB,GAAzB,GAA+BD,CAAC,CAACE,MAAjC,GAA0C,GAA1C,GAAgDF,CAAC,CAACG,QAA9D;AACH,GAHD;;AAIAjB,EAAAA,SAAS,CAACkB,SAAV,GAAsB,UAAUC,KAAV,EAAiB;AACnClB,IAAAA,aAAa,GAAG,IAAhB,CADmC,CAEnC;;AACA,QAAImB,IAAI,GAAGD,KAAK,CAACC,IAAjB,CAHmC,CAGb;;AACtBf,IAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACArB,IAAAA,MAAM,CAACsB,OAAP,CAAe,SAAf,EAA0BD,IAA1B,EALmC,CAKF;AAEpC,GAPD;AAQH,CAtBD;;AAuBA,IAAIR,SAAS,GAAG,SAAZA,SAAY,CAACT,GAAD,EAAS;AACrB,MAAIF,aAAJ,EAAmB,OADE,CAErB;;AACAqB,EAAAA,UAAU,CAAC,YAAY;AACnBpB,IAAAA,eAAe,CAACC,GAAD,CAAf;AACAF,IAAAA,aAAa,GAAG,KAAhB;AACH,GAHS,EAGP,IAHO,CAAV;AAIH,CAPD;;AAQA,IAAIO,UAAU,GAAG;AACbe,EAAAA,OAAO,EAAE,IADI;AACE;AACfC,EAAAA,UAAU,EAAE,IAFC;AAGbf,EAAAA,KAAK,EAAE,iBAAY;AACfgB,IAAAA,aAAa,CAAC,KAAKD,UAAN,CAAb;AACA,WAAO,IAAP;AACH,GANY;AAObd,EAAAA,KAAK,EAAE,iBAAY;AACf,SAAKc,UAAL,GAAkBE,WAAW,CAAC,YAAY;AACtC;AACA;AACA1B,MAAAA,SAAS,CAAC2B,IAAV,CAAe,WAAf;AACH,KAJ4B,EAI1B,KAAKJ,OAJqB,CAA7B;AAKH;AAbY,CAAjB,C,CAeA;;AACA,IAAIK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACvB5B,EAAAA,SAAS,IAAIA,SAAS,CAAC6B,KAAV,EAAb;AACH,CAFD;;AAGA,SAAS7B,SAAT,EAAoBE,eAApB,EAAqC0B,cAArC","sourcesContent":["/*\r\n * @Author: your name\r\n * @Date: 2022-04-26 22:13:06\r\n * @LastEditTime: 2022-04-26 22:56:37\r\n * @LastEditors: Please set LastEditors\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage-test\\src\\layouts\\HomeLayout\\WebSocket.js\r\n */\r\nimport { PubSub } from 'pubsub-js';\r\nlet websocket,\r\n    lockReconnect = false;\r\nlet createWebSocket = (url) => {\r\n    websocket = new WebSocket(url+\"/1/admin/1\");\r\n    console.log('ws connect')\r\n    websocket.onopen = function () {\r\n        console.log('ws open')\r\n        heartCheck.reset().start();\r\n    };\r\n    websocket.onerror = function () {\r\n        reconnect(url);\r\n    };\r\n    websocket.onclose = function (e) {\r\n        heartCheck.reset()\r\n        console.log('ws closed: ' + e.code + ' ' + e.reason + ' ' + e.wasClean);\r\n    };\r\n    websocket.onmessage = function (event) {\r\n        lockReconnect = true;\r\n        //event 为服务端传输的消息，在这里可以处理\r\n        let data = event.data;//把获取到的消息处理成字典，方便后期使用\r\n        console.log(data);\r\n        PubSub.publish('message', data); //发布接收到的消息 'message' 为发布消息的名称，data 为发布的消息\r\n\r\n    };\r\n};\r\nlet reconnect = (url) => {\r\n    if (lockReconnect) return;\r\n    // 没连接上会一直重连，设置延迟避免请求过多\r\n    setTimeout(function () {\r\n        createWebSocket(url);\r\n        lockReconnect = false;\r\n    }, 4000);\r\n};\r\nlet heartCheck = {\r\n    timeout: 6000, // 6秒\r\n    timeoutObj: null,\r\n    reset: function () {\r\n        clearInterval(this.timeoutObj);\r\n        return this;\r\n    },\r\n    start: function () {\r\n        this.timeoutObj = setInterval(function () {\r\n            // 这里发送一个心跳，后端收到后，返回一个心跳消息，\r\n            // onmessage拿到返回的心跳就说明连接正常\r\n            websocket.send('HeartBeat');\r\n        }, this.timeout);\r\n    },\r\n};\r\n// 关闭连接\r\nlet closeWebSocket = () => {\r\n    websocket && websocket.close();\r\n};\r\nexport { websocket, createWebSocket, closeWebSocket };"]},"metadata":{},"sourceType":"module"}