{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport Overflow from 'rc-overflow';\nimport TransBtn from '../TransBtn';\nimport Input from './Input';\nimport useLayoutEffect from '../hooks/useLayoutEffect';\n\nfunction itemKey(value) {\n  var _value$key;\n\n  return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;\n}\n\nvar onPreventMouseDown = function onPreventMouseDown(event) {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nvar SelectSelector = function SelectSelector(props) {\n  var id = props.id,\n      prefixCls = props.prefixCls,\n      values = props.values,\n      open = props.open,\n      searchValue = props.searchValue,\n      inputRef = props.inputRef,\n      placeholder = props.placeholder,\n      disabled = props.disabled,\n      mode = props.mode,\n      showSearch = props.showSearch,\n      autoFocus = props.autoFocus,\n      autoComplete = props.autoComplete,\n      activeDescendantId = props.activeDescendantId,\n      tabIndex = props.tabIndex,\n      removeIcon = props.removeIcon,\n      maxTagCount = props.maxTagCount,\n      maxTagTextLength = props.maxTagTextLength,\n      _props$maxTagPlacehol = props.maxTagPlaceholder,\n      maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function (omittedValues) {\n    return \"+ \".concat(omittedValues.length, \" ...\");\n  } : _props$maxTagPlacehol,\n      tagRender = props.tagRender,\n      onToggleOpen = props.onToggleOpen,\n      onRemove = props.onRemove,\n      onInputChange = props.onInputChange,\n      onInputPaste = props.onInputPaste,\n      onInputKeyDown = props.onInputKeyDown,\n      onInputMouseDown = props.onInputMouseDown,\n      onInputCompositionStart = props.onInputCompositionStart,\n      onInputCompositionEnd = props.onInputCompositionEnd;\n  var measureRef = React.useRef(null);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputWidth = _useState2[0],\n      setInputWidth = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n\n  var selectionPrefixCls = \"\".concat(prefixCls, \"-selection\"); // ===================== Search ======================\n\n  var inputValue = open || mode === 'tags' ? searchValue : '';\n  var inputEditable = mode === 'tags' || showSearch && (open || focused); // We measure width and set to the input immediately\n\n  useLayoutEffect(function () {\n    setInputWidth(measureRef.current.scrollWidth);\n  }, [inputValue]); // ===================== Render ======================\n  // >>> Render Selector Node. Includes Item & Rest\n\n  function defaultRenderSelector(title, content, itemDisabled, closable, onClose) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(\"\".concat(selectionPrefixCls, \"-item\"), _defineProperty({}, \"\".concat(selectionPrefixCls, \"-item-disabled\"), itemDisabled)),\n      title: typeof title === 'string' || typeof title === 'number' ? title.toString() : undefined\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(selectionPrefixCls, \"-item-content\")\n    }, content), closable && /*#__PURE__*/React.createElement(TransBtn, {\n      className: \"\".concat(selectionPrefixCls, \"-item-remove\"),\n      onMouseDown: onPreventMouseDown,\n      onClick: onClose,\n      customizeIcon: removeIcon\n    }, \"\\xD7\"));\n  }\n\n  function customizeRenderSelector(value, content, itemDisabled, closable, onClose) {\n    var onMouseDown = function onMouseDown(e) {\n      onPreventMouseDown(e);\n      onToggleOpen(!open);\n    };\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      onMouseDown: onMouseDown\n    }, tagRender({\n      label: content,\n      value: value,\n      disabled: itemDisabled,\n      closable: closable,\n      onClose: onClose\n    }));\n  }\n\n  function renderItem(valueItem) {\n    var itemDisabled = valueItem.disabled,\n        label = valueItem.label,\n        value = valueItem.value;\n    var closable = !disabled && !itemDisabled;\n    var displayLabel = label;\n\n    if (typeof maxTagTextLength === 'number') {\n      if (typeof label === 'string' || typeof label === 'number') {\n        var strLabel = String(displayLabel);\n\n        if (strLabel.length > maxTagTextLength) {\n          displayLabel = \"\".concat(strLabel.slice(0, maxTagTextLength), \"...\");\n        }\n      }\n    }\n\n    var onClose = function onClose(event) {\n      if (event) event.stopPropagation();\n      onRemove(valueItem);\n    };\n\n    return typeof tagRender === 'function' ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(label, displayLabel, itemDisabled, closable, onClose);\n  }\n\n  function renderRest(omittedValues) {\n    var content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;\n    return defaultRenderSelector(content, content, false);\n  } // >>> Input Node\n\n\n  var inputNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(selectionPrefixCls, \"-search\"),\n    style: {\n      width: inputWidth\n    },\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    onBlur: function onBlur() {\n      setFocused(false);\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    open: open,\n    prefixCls: prefixCls,\n    id: id,\n    inputElement: null,\n    disabled: disabled,\n    autoFocus: autoFocus,\n    autoComplete: autoComplete,\n    editable: inputEditable,\n    activeDescendantId: activeDescendantId,\n    value: inputValue,\n    onKeyDown: onInputKeyDown,\n    onMouseDown: onInputMouseDown,\n    onChange: onInputChange,\n    onPaste: onInputPaste,\n    onCompositionStart: onInputCompositionStart,\n    onCompositionEnd: onInputCompositionEnd,\n    tabIndex: tabIndex,\n    attrs: pickAttrs(props, true)\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    ref: measureRef,\n    className: \"\".concat(selectionPrefixCls, \"-search-mirror\"),\n    \"aria-hidden\": true\n  }, inputValue, \"\\xA0\")); // >>> Selections\n\n  var selectionNode = /*#__PURE__*/React.createElement(Overflow, {\n    prefixCls: \"\".concat(selectionPrefixCls, \"-overflow\"),\n    data: values,\n    renderItem: renderItem,\n    renderRest: renderRest,\n    suffix: inputNode,\n    itemKey: itemKey,\n    maxCount: maxTagCount\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, selectionNode, !values.length && !inputValue && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(selectionPrefixCls, \"-placeholder\")\n  }, placeholder));\n};\n\nexport default SelectSelector;","map":null,"metadata":{},"sourceType":"module"}