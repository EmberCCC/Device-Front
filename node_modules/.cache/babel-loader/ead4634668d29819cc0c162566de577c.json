{"ast":null,"code":"import { _ as _slicedToArray, a as _defineProperty, P as Position, C as ConnectionMode, g as getHostForElement, u as useStoreApi, b as useStore, c as addEdge, d as getMarkerId, r as rectToBox, e as getConnectedEdges, f as getDimensions, h as PanOnScrollMode, i as clamp, j as getNodesInside, k as getSelectionChanges, l as getRectOfNodes, m as ConnectionLineType, M as MarkerType, n as isNumeric, o as Provider$1, p as createStore, q as applyEdgeChanges, s as applyNodeChanges } from './index-fdcea71e.js';\nexport { B as BackgroundVariant, m as ConnectionLineType, C as ConnectionMode, M as MarkerType, h as PanOnScrollMode, P as Position, c as addEdge, q as applyEdgeChanges, s as applyNodeChanges, e as getConnectedEdges, x as getIncomers, w as getOutgoers, l as getRectOfNodes, z as getTransformForBounds, v as isEdge, t as isNode, y as updateEdge, b as useStore, u as useStoreApi } from './index-fdcea71e.js';\nimport { _ as _toConsumableArray, a as _objectWithoutProperties, u as useReactFlow } from './useReactFlow-0b93bbea.js';\nexport { u as useReactFlow } from './useReactFlow-0b93bbea.js';\nimport cc from 'classcat';\nimport React__default, { memo, useRef, useState, useEffect, createContext, forwardRef, useContext, useCallback, useMemo } from 'react';\nimport shallow from 'zustand/shallow';\nimport { zoom, zoomIdentity } from 'd3-zoom';\nimport { select, pointer } from 'd3-selection';\nimport { DraggableCore } from 'react-draggable';\nexport { default as MiniMap } from './index2.js';\nexport { ControlButton, default as Controls } from './index3.js';\nexport { default as Background } from './index4.js';\nexport { default as useUpdateNodeInternals } from './useUpdateNodeInternals.js';\nexport { default as useNodes } from './useNodes.js';\nexport { default as useEdges } from './useEdges.js';\nexport { default as useViewport } from './useViewport.js';\nimport 'zustand';\nimport 'zustand/context';\n\nfunction Attribution(_ref) {\n  var proOptions = _ref.proOptions,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'bottom-right' : _ref$position;\n\n  if (((proOptions === null || proOptions === void 0 ? void 0 : proOptions.account) === 'paid-sponsor' || (proOptions === null || proOptions === void 0 ? void 0 : proOptions.account) === 'paid-enterprise' || (proOptions === null || proOptions === void 0 ? void 0 : proOptions.account) === 'paid-custom') && proOptions !== null && proOptions !== void 0 && proOptions.hideAttribution) {\n    return null;\n  }\n\n  var positionClasses = \"\".concat(position).split('-');\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: cc(['react-flow__attribution'].concat(_toConsumableArray(positionClasses))),\n      \"data-message\": \"Please only hide this attribution when you are subscribed to React Flow Pro: https://pro.reactflow.dev/pricing\"\n    },\n    /*#__PURE__*/\n    React__default.createElement(\"a\", {\n      href: \"https://reactflow.dev\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, \"React Flow\"))\n  );\n}\n\nvar _excluded$2 = [\"x\", \"y\", \"label\", \"labelStyle\", \"labelShowBg\", \"labelBgStyle\", \"labelBgPadding\", \"labelBgBorderRadius\", \"children\", \"className\"];\n\nfunction ownKeys$a(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$a(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar EdgeText = function EdgeText(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      label = _ref.label,\n      _ref$labelStyle = _ref.labelStyle,\n      labelStyle = _ref$labelStyle === void 0 ? {} : _ref$labelStyle,\n      _ref$labelShowBg = _ref.labelShowBg,\n      labelShowBg = _ref$labelShowBg === void 0 ? true : _ref$labelShowBg,\n      _ref$labelBgStyle = _ref.labelBgStyle,\n      labelBgStyle = _ref$labelBgStyle === void 0 ? {} : _ref$labelBgStyle,\n      _ref$labelBgPadding = _ref.labelBgPadding,\n      labelBgPadding = _ref$labelBgPadding === void 0 ? [2, 4] : _ref$labelBgPadding,\n      _ref$labelBgBorderRad = _ref.labelBgBorderRadius,\n      labelBgBorderRadius = _ref$labelBgBorderRad === void 0 ? 2 : _ref$labelBgBorderRad,\n      children = _ref.children,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, _excluded$2);\n\n  var edgeRef = useRef(null);\n\n  var _useState = useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      edgeTextBbox = _useState2[0],\n      setEdgeTextBbox = _useState2[1];\n\n  var edgeTextClasses = cc(['react-flow__edge-textwrapper', className]);\n  useEffect(function () {\n    if (edgeRef.current) {\n      var textBbox = edgeRef.current.getBBox();\n      setEdgeTextBbox({\n        x: textBbox.x,\n        y: textBbox.y,\n        width: textBbox.width,\n        height: textBbox.height\n      });\n    }\n  }, [label]);\n\n  if (typeof label === 'undefined' || !label) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"g\", _objectSpread$a({\n      transform: \"translate(\".concat(x - edgeTextBbox.width / 2, \" \").concat(y - edgeTextBbox.height / 2, \")\"),\n      className: edgeTextClasses\n    }, rest), labelShowBg &&\n    /*#__PURE__*/\n    React__default.createElement(\"rect\", {\n      width: edgeTextBbox.width + 2 * labelBgPadding[0],\n      x: -labelBgPadding[0],\n      y: -labelBgPadding[1],\n      height: edgeTextBbox.height + 2 * labelBgPadding[1],\n      className: \"react-flow__edge-textbg\",\n      style: labelBgStyle,\n      rx: labelBgBorderRadius,\n      ry: labelBgBorderRadius\n    }),\n    /*#__PURE__*/\n    React__default.createElement(\"text\", {\n      className: \"react-flow__edge-text\",\n      y: edgeTextBbox.height / 2,\n      dy: \"0.3em\",\n      ref: edgeRef,\n      style: labelStyle\n    }, label), children)\n  );\n};\n\nvar EdgeText$1 =\n/*#__PURE__*/\nmemo(EdgeText);\n\nvar BaseEdge = function BaseEdge(_ref) {\n  var path = _ref.path,\n      centerX = _ref.centerX,\n      centerY = _ref.centerY,\n      label = _ref.label,\n      labelStyle = _ref.labelStyle,\n      labelShowBg = _ref.labelShowBg,\n      labelBgStyle = _ref.labelBgStyle,\n      labelBgPadding = _ref.labelBgPadding,\n      labelBgBorderRadius = _ref.labelBgBorderRadius,\n      style = _ref.style,\n      markerEnd = _ref.markerEnd,\n      markerStart = _ref.markerStart;\n  var text = label ?\n  /*#__PURE__*/\n  React__default.createElement(EdgeText$1, {\n    x: centerX,\n    y: centerY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius\n  }) : null;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(React__default.Fragment, null,\n    /*#__PURE__*/\n    React__default.createElement(\"path\", {\n      style: style,\n      d: path,\n      className: \"react-flow__edge-path\",\n      markerEnd: markerEnd,\n      markerStart: markerStart\n    }), text)\n  );\n};\n\nfunction getControl(_ref) {\n  var pos = _ref.pos,\n      x1 = _ref.x1,\n      y1 = _ref.y1,\n      x2 = _ref.x2,\n      y2 = _ref.y2;\n  var ctX, ctY;\n\n  switch (pos) {\n    case Position.Left:\n    case Position.Right:\n      {\n        ctX = 0.5 * (x1 + x2);\n        ctY = y1;\n      }\n      break;\n\n    case Position.Top:\n    case Position.Bottom:\n      {\n        ctX = x1;\n        ctY = 0.5 * (y1 + y2);\n      }\n      break;\n  }\n\n  return [ctX, ctY];\n}\n\nfunction getSimpleBezierPath(_ref2) {\n  var sourceX = _ref2.sourceX,\n      sourceY = _ref2.sourceY,\n      _ref2$sourcePosition = _ref2.sourcePosition,\n      sourcePosition = _ref2$sourcePosition === void 0 ? Position.Bottom : _ref2$sourcePosition,\n      targetX = _ref2.targetX,\n      targetY = _ref2.targetY,\n      _ref2$targetPosition = _ref2.targetPosition,\n      targetPosition = _ref2$targetPosition === void 0 ? Position.Top : _ref2$targetPosition;\n\n  var _getControl = getControl({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY\n  }),\n      _getControl2 = _slicedToArray(_getControl, 2),\n      sourceControlX = _getControl2[0],\n      sourceControlY = _getControl2[1];\n\n  var _getControl3 = getControl({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY\n  }),\n      _getControl4 = _slicedToArray(_getControl3, 2),\n      targetControlX = _getControl4[0],\n      targetControlY = _getControl4[1];\n\n  return \"M\".concat(sourceX, \",\").concat(sourceY, \" C\").concat(sourceControlX, \",\").concat(sourceControlY, \" \").concat(targetControlX, \",\").concat(targetControlY, \" \").concat(targetX, \",\").concat(targetY);\n} // @TODO: this function will recalculate the control points\n// one option is to let getXXXPath() return center points\n// but will introduce breaking changes\n// the getCenter() of other types of edges might need to change, too\n\n\nfunction getSimpleBezierCenter(_ref3) {\n  var sourceX = _ref3.sourceX,\n      sourceY = _ref3.sourceY,\n      _ref3$sourcePosition = _ref3.sourcePosition,\n      sourcePosition = _ref3$sourcePosition === void 0 ? Position.Bottom : _ref3$sourcePosition,\n      targetX = _ref3.targetX,\n      targetY = _ref3.targetY,\n      _ref3$targetPosition = _ref3.targetPosition,\n      targetPosition = _ref3$targetPosition === void 0 ? Position.Top : _ref3$targetPosition;\n\n  var _getControl5 = getControl({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY\n  }),\n      _getControl6 = _slicedToArray(_getControl5, 2),\n      sourceControlX = _getControl6[0],\n      sourceControlY = _getControl6[1];\n\n  var _getControl7 = getControl({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY\n  }),\n      _getControl8 = _slicedToArray(_getControl7, 2),\n      targetControlX = _getControl8[0],\n      targetControlY = _getControl8[1]; // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n\n\n  var centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  var centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  var xOffset = Math.abs(centerX - sourceX);\n  var yOffset = Math.abs(centerY - sourceY);\n  return [centerX, centerY, xOffset, yOffset];\n}\n\nvar SimpleBezierEdge =\n/*#__PURE__*/\nmemo(function (_ref4) {\n  var sourceX = _ref4.sourceX,\n      sourceY = _ref4.sourceY,\n      targetX = _ref4.targetX,\n      targetY = _ref4.targetY,\n      _ref4$sourcePosition = _ref4.sourcePosition,\n      sourcePosition = _ref4$sourcePosition === void 0 ? Position.Bottom : _ref4$sourcePosition,\n      _ref4$targetPosition = _ref4.targetPosition,\n      targetPosition = _ref4$targetPosition === void 0 ? Position.Top : _ref4$targetPosition,\n      label = _ref4.label,\n      labelStyle = _ref4.labelStyle,\n      labelShowBg = _ref4.labelShowBg,\n      labelBgStyle = _ref4.labelBgStyle,\n      labelBgPadding = _ref4.labelBgPadding,\n      labelBgBorderRadius = _ref4.labelBgBorderRadius,\n      style = _ref4.style,\n      markerEnd = _ref4.markerEnd,\n      markerStart = _ref4.markerStart;\n  var params = {\n    sourceX: sourceX,\n    sourceY: sourceY,\n    sourcePosition: sourcePosition,\n    targetX: targetX,\n    targetY: targetY,\n    targetPosition: targetPosition\n  };\n  var path = getSimpleBezierPath(params);\n\n  var _getSimpleBezierCente = getSimpleBezierCenter(params),\n      _getSimpleBezierCente2 = _slicedToArray(_getSimpleBezierCente, 2),\n      centerX = _getSimpleBezierCente2[0],\n      centerY = _getSimpleBezierCente2[1];\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(BaseEdge, {\n      path: path,\n      centerX: centerX,\n      centerY: centerY,\n      label: label,\n      labelStyle: labelStyle,\n      labelShowBg: labelShowBg,\n      labelBgStyle: labelBgStyle,\n      labelBgPadding: labelBgPadding,\n      labelBgBorderRadius: labelBgBorderRadius,\n      style: style,\n      markerEnd: markerEnd,\n      markerStart: markerStart\n    })\n  );\n});\n\nvar getMarkerEnd = function getMarkerEnd(markerType, markerEndId) {\n  if (typeof markerEndId !== 'undefined' && markerEndId) {\n    return \"url(#\".concat(markerEndId, \")\");\n  }\n\n  return typeof markerType !== 'undefined' ? \"url(#react-flow__\".concat(markerType, \")\") : 'none';\n};\n\nvar LeftOrRight = [Position.Left, Position.Right];\n\nvar getCenter = function getCenter(_ref) {\n  var sourceX = _ref.sourceX,\n      sourceY = _ref.sourceY,\n      targetX = _ref.targetX,\n      targetY = _ref.targetY,\n      _ref$sourcePosition = _ref.sourcePosition,\n      sourcePosition = _ref$sourcePosition === void 0 ? Position.Bottom : _ref$sourcePosition,\n      _ref$targetPosition = _ref.targetPosition,\n      targetPosition = _ref$targetPosition === void 0 ? Position.Top : _ref$targetPosition;\n  var sourceIsLeftOrRight = LeftOrRight.includes(sourcePosition);\n  var targetIsLeftOrRight = LeftOrRight.includes(targetPosition); // we expect flows to be horizontal or vertical (all handles left or right respectively top or bottom)\n  // a mixed edge is when one the source is on the left and the target is on the top for example.\n\n  var mixedEdge = sourceIsLeftOrRight && !targetIsLeftOrRight || targetIsLeftOrRight && !sourceIsLeftOrRight;\n\n  if (mixedEdge) {\n    var _xOffset = sourceIsLeftOrRight ? Math.abs(targetX - sourceX) : 0;\n\n    var _centerX = sourceX > targetX ? sourceX - _xOffset : sourceX + _xOffset;\n\n    var _yOffset = sourceIsLeftOrRight ? 0 : Math.abs(targetY - sourceY);\n\n    var _centerY = sourceY < targetY ? sourceY + _yOffset : sourceY - _yOffset;\n\n    return [_centerX, _centerY, _xOffset, _yOffset];\n  }\n\n  var xOffset = Math.abs(targetX - sourceX) / 2;\n  var centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  var yOffset = Math.abs(targetY - sourceY) / 2;\n  var centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}; // The name indicates the direction of the path. \"bottomLeftCorner\" goes\n// from bottom to the left and \"leftBottomCorner\" goes from left to the bottom.\n// We have to consider the direction of the paths because of the animated lines.\n\n\nvar bottomLeftCorner = function bottomLeftCorner(x, y, size) {\n  return \"L \".concat(x, \",\").concat(y - size, \"Q \").concat(x, \",\").concat(y, \" \").concat(x + size, \",\").concat(y);\n};\n\nvar leftBottomCorner = function leftBottomCorner(x, y, size) {\n  return \"L \".concat(x + size, \",\").concat(y, \"Q \").concat(x, \",\").concat(y, \" \").concat(x, \",\").concat(y - size);\n};\n\nvar bottomRightCorner = function bottomRightCorner(x, y, size) {\n  return \"L \".concat(x, \",\").concat(y - size, \"Q \").concat(x, \",\").concat(y, \" \").concat(x - size, \",\").concat(y);\n};\n\nvar rightBottomCorner = function rightBottomCorner(x, y, size) {\n  return \"L \".concat(x - size, \",\").concat(y, \"Q \").concat(x, \",\").concat(y, \" \").concat(x, \",\").concat(y - size);\n};\n\nvar leftTopCorner = function leftTopCorner(x, y, size) {\n  return \"L \".concat(x + size, \",\").concat(y, \"Q \").concat(x, \",\").concat(y, \" \").concat(x, \",\").concat(y + size);\n};\n\nvar topLeftCorner = function topLeftCorner(x, y, size) {\n  return \"L \".concat(x, \",\").concat(y + size, \"Q \").concat(x, \",\").concat(y, \" \").concat(x + size, \",\").concat(y);\n};\n\nvar topRightCorner = function topRightCorner(x, y, size) {\n  return \"L \".concat(x, \",\").concat(y + size, \"Q \").concat(x, \",\").concat(y, \" \").concat(x - size, \",\").concat(y);\n};\n\nvar rightTopCorner = function rightTopCorner(x, y, size) {\n  return \"L \".concat(x - size, \",\").concat(y, \"Q \").concat(x, \",\").concat(y, \" \").concat(x, \",\").concat(y + size);\n};\n\nfunction getSmoothStepPath(_ref) {\n  var sourceX = _ref.sourceX,\n      sourceY = _ref.sourceY,\n      _ref$sourcePosition = _ref.sourcePosition,\n      sourcePosition = _ref$sourcePosition === void 0 ? Position.Bottom : _ref$sourcePosition,\n      targetX = _ref.targetX,\n      targetY = _ref.targetY,\n      _ref$targetPosition = _ref.targetPosition,\n      targetPosition = _ref$targetPosition === void 0 ? Position.Top : _ref$targetPosition,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? 5 : _ref$borderRadius,\n      centerX = _ref.centerX,\n      centerY = _ref.centerY;\n\n  var _getCenter = getCenter({\n    sourceX: sourceX,\n    sourceY: sourceY,\n    targetX: targetX,\n    targetY: targetY\n  }),\n      _getCenter2 = _slicedToArray(_getCenter, 4),\n      _centerX = _getCenter2[0],\n      _centerY = _getCenter2[1],\n      offsetX = _getCenter2[2],\n      offsetY = _getCenter2[3];\n\n  var cornerWidth = Math.min(borderRadius, Math.abs(targetX - sourceX));\n  var cornerHeight = Math.min(borderRadius, Math.abs(targetY - sourceY));\n  var cornerSize = Math.min(cornerWidth, cornerHeight, offsetX, offsetY);\n  var leftAndRight = [Position.Left, Position.Right];\n  var cX = typeof centerX !== 'undefined' ? centerX : _centerX;\n  var cY = typeof centerY !== 'undefined' ? centerY : _centerY;\n  var firstCornerPath = null;\n  var secondCornerPath = null;\n\n  if (sourceX <= targetX) {\n    firstCornerPath = sourceY <= targetY ? bottomLeftCorner(sourceX, cY, cornerSize) : topLeftCorner(sourceX, cY, cornerSize);\n    secondCornerPath = sourceY <= targetY ? rightTopCorner(targetX, cY, cornerSize) : rightBottomCorner(targetX, cY, cornerSize);\n  } else {\n    firstCornerPath = sourceY < targetY ? bottomRightCorner(sourceX, cY, cornerSize) : topRightCorner(sourceX, cY, cornerSize);\n    secondCornerPath = sourceY < targetY ? leftTopCorner(targetX, cY, cornerSize) : leftBottomCorner(targetX, cY, cornerSize);\n  }\n\n  if (leftAndRight.includes(sourcePosition) && leftAndRight.includes(targetPosition)) {\n    if (sourceX <= targetX) {\n      firstCornerPath = sourceY <= targetY ? rightTopCorner(cX, sourceY, cornerSize) : rightBottomCorner(cX, sourceY, cornerSize);\n      secondCornerPath = sourceY <= targetY ? bottomLeftCorner(cX, targetY, cornerSize) : topLeftCorner(cX, targetY, cornerSize);\n    } else if (sourcePosition === Position.Right && targetPosition === Position.Left || sourcePosition === Position.Left && targetPosition === Position.Right || sourcePosition === Position.Left && targetPosition === Position.Left) {\n      // and sourceX > targetX\n      firstCornerPath = sourceY <= targetY ? leftTopCorner(cX, sourceY, cornerSize) : leftBottomCorner(cX, sourceY, cornerSize);\n      secondCornerPath = sourceY <= targetY ? bottomRightCorner(cX, targetY, cornerSize) : topRightCorner(cX, targetY, cornerSize);\n    }\n  } else if (leftAndRight.includes(sourcePosition) && !leftAndRight.includes(targetPosition)) {\n    if (sourceX <= targetX) {\n      firstCornerPath = sourceY <= targetY ? rightTopCorner(targetX, sourceY, cornerSize) : rightBottomCorner(targetX, sourceY, cornerSize);\n    } else {\n      firstCornerPath = sourceY <= targetY ? leftTopCorner(targetX, sourceY, cornerSize) : leftBottomCorner(targetX, sourceY, cornerSize);\n    }\n\n    secondCornerPath = '';\n  } else if (!leftAndRight.includes(sourcePosition) && leftAndRight.includes(targetPosition)) {\n    if (sourceX <= targetX) {\n      firstCornerPath = sourceY <= targetY ? bottomLeftCorner(sourceX, targetY, cornerSize) : topLeftCorner(sourceX, targetY, cornerSize);\n    } else {\n      firstCornerPath = sourceY <= targetY ? bottomRightCorner(sourceX, targetY, cornerSize) : topRightCorner(sourceX, targetY, cornerSize);\n    }\n\n    secondCornerPath = '';\n  }\n\n  return \"M \".concat(sourceX, \",\").concat(sourceY).concat(firstCornerPath).concat(secondCornerPath, \"L \").concat(targetX, \",\").concat(targetY);\n}\n\nvar SmoothStepEdge =\n/*#__PURE__*/\nmemo(function (_ref2) {\n  var sourceX = _ref2.sourceX,\n      sourceY = _ref2.sourceY,\n      targetX = _ref2.targetX,\n      targetY = _ref2.targetY,\n      label = _ref2.label,\n      labelStyle = _ref2.labelStyle,\n      labelShowBg = _ref2.labelShowBg,\n      labelBgStyle = _ref2.labelBgStyle,\n      labelBgPadding = _ref2.labelBgPadding,\n      labelBgBorderRadius = _ref2.labelBgBorderRadius,\n      style = _ref2.style,\n      _ref2$sourcePosition = _ref2.sourcePosition,\n      sourcePosition = _ref2$sourcePosition === void 0 ? Position.Bottom : _ref2$sourcePosition,\n      _ref2$targetPosition = _ref2.targetPosition,\n      targetPosition = _ref2$targetPosition === void 0 ? Position.Top : _ref2$targetPosition,\n      markerEnd = _ref2.markerEnd,\n      markerStart = _ref2.markerStart,\n      _ref2$borderRadius = _ref2.borderRadius,\n      borderRadius = _ref2$borderRadius === void 0 ? 5 : _ref2$borderRadius;\n\n  var _getCenter3 = getCenter({\n    sourceX: sourceX,\n    sourceY: sourceY,\n    targetX: targetX,\n    targetY: targetY,\n    sourcePosition: sourcePosition,\n    targetPosition: targetPosition\n  }),\n      _getCenter4 = _slicedToArray(_getCenter3, 2),\n      centerX = _getCenter4[0],\n      centerY = _getCenter4[1];\n\n  var path = getSmoothStepPath({\n    sourceX: sourceX,\n    sourceY: sourceY,\n    sourcePosition: sourcePosition,\n    targetX: targetX,\n    targetY: targetY,\n    targetPosition: targetPosition,\n    borderRadius: borderRadius\n  });\n  return (\n    /*#__PURE__*/\n    React__default.createElement(BaseEdge, {\n      path: path,\n      centerX: centerX,\n      centerY: centerY,\n      label: label,\n      labelStyle: labelStyle,\n      labelShowBg: labelShowBg,\n      labelBgStyle: labelBgStyle,\n      labelBgPadding: labelBgPadding,\n      labelBgBorderRadius: labelBgBorderRadius,\n      style: style,\n      markerEnd: markerEnd,\n      markerStart: markerStart\n    })\n  );\n});\n\nfunction ownKeys$9(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$9(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar StepEdge =\n/*#__PURE__*/\nmemo(function (props) {\n  return (\n    /*#__PURE__*/\n    React__default.createElement(SmoothStepEdge, _objectSpread$9(_objectSpread$9({}, props), {}, {\n      borderRadius: 0\n    }))\n  );\n});\nvar StraightEdge =\n/*#__PURE__*/\nmemo(function (_ref) {\n  var sourceX = _ref.sourceX,\n      sourceY = _ref.sourceY,\n      targetX = _ref.targetX,\n      targetY = _ref.targetY,\n      label = _ref.label,\n      labelStyle = _ref.labelStyle,\n      labelShowBg = _ref.labelShowBg,\n      labelBgStyle = _ref.labelBgStyle,\n      labelBgPadding = _ref.labelBgPadding,\n      labelBgBorderRadius = _ref.labelBgBorderRadius,\n      style = _ref.style,\n      markerEnd = _ref.markerEnd,\n      markerStart = _ref.markerStart;\n  var yOffset = Math.abs(targetY - sourceY) / 2;\n  var centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  var xOffset = Math.abs(targetX - sourceX) / 2;\n  var centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  var path = \"M \".concat(sourceX, \",\").concat(sourceY, \"L \").concat(targetX, \",\").concat(targetY);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(BaseEdge, {\n      path: path,\n      centerX: centerX,\n      centerY: centerY,\n      label: label,\n      labelStyle: labelStyle,\n      labelShowBg: labelShowBg,\n      labelBgStyle: labelBgStyle,\n      labelBgPadding: labelBgPadding,\n      labelBgBorderRadius: labelBgBorderRadius,\n      style: style,\n      markerEnd: markerEnd,\n      markerStart: markerStart\n    })\n  );\n});\n\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  } else {\n    return curvature * 25 * Math.sqrt(-distance);\n  }\n}\n\nfunction getControlWithCurvature(_ref) {\n  var pos = _ref.pos,\n      x1 = _ref.x1,\n      y1 = _ref.y1,\n      x2 = _ref.x2,\n      y2 = _ref.y2,\n      c = _ref.c;\n  var ctX, ctY;\n\n  switch (pos) {\n    case Position.Left:\n      {\n        ctX = x1 - calculateControlOffset(x1 - x2, c);\n        ctY = y1;\n      }\n      break;\n\n    case Position.Right:\n      {\n        ctX = x1 + calculateControlOffset(x2 - x1, c);\n        ctY = y1;\n      }\n      break;\n\n    case Position.Top:\n      {\n        ctX = x1;\n        ctY = y1 - calculateControlOffset(y1 - y2, c);\n      }\n      break;\n\n    case Position.Bottom:\n      {\n        ctX = x1;\n        ctY = y1 + calculateControlOffset(y2 - y1, c);\n      }\n      break;\n  }\n\n  return [ctX, ctY];\n}\n\nfunction getBezierPath(_ref2) {\n  var sourceX = _ref2.sourceX,\n      sourceY = _ref2.sourceY,\n      _ref2$sourcePosition = _ref2.sourcePosition,\n      sourcePosition = _ref2$sourcePosition === void 0 ? Position.Bottom : _ref2$sourcePosition,\n      targetX = _ref2.targetX,\n      targetY = _ref2.targetY,\n      _ref2$targetPosition = _ref2.targetPosition,\n      targetPosition = _ref2$targetPosition === void 0 ? Position.Top : _ref2$targetPosition,\n      _ref2$curvature = _ref2.curvature,\n      curvature = _ref2$curvature === void 0 ? 0.25 : _ref2$curvature;\n\n  var _getControlWithCurvat = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  }),\n      _getControlWithCurvat2 = _slicedToArray(_getControlWithCurvat, 2),\n      sourceControlX = _getControlWithCurvat2[0],\n      sourceControlY = _getControlWithCurvat2[1];\n\n  var _getControlWithCurvat3 = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  }),\n      _getControlWithCurvat4 = _slicedToArray(_getControlWithCurvat3, 2),\n      targetControlX = _getControlWithCurvat4[0],\n      targetControlY = _getControlWithCurvat4[1];\n\n  return \"M\".concat(sourceX, \",\").concat(sourceY, \" C\").concat(sourceControlX, \",\").concat(sourceControlY, \" \").concat(targetControlX, \",\").concat(targetControlY, \" \").concat(targetX, \",\").concat(targetY);\n} // @TODO: this function will recalculate the control points\n// one option is to let getXXXPath() return center points\n// but will introduce breaking changes\n// the getCenter() of other types of edges might need to change, too\n\n\nfunction getBezierCenter(_ref3) {\n  var sourceX = _ref3.sourceX,\n      sourceY = _ref3.sourceY,\n      _ref3$sourcePosition = _ref3.sourcePosition,\n      sourcePosition = _ref3$sourcePosition === void 0 ? Position.Bottom : _ref3$sourcePosition,\n      targetX = _ref3.targetX,\n      targetY = _ref3.targetY,\n      _ref3$targetPosition = _ref3.targetPosition,\n      targetPosition = _ref3$targetPosition === void 0 ? Position.Top : _ref3$targetPosition,\n      _ref3$curvature = _ref3.curvature,\n      curvature = _ref3$curvature === void 0 ? 0.25 : _ref3$curvature;\n\n  var _getControlWithCurvat5 = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  }),\n      _getControlWithCurvat6 = _slicedToArray(_getControlWithCurvat5, 2),\n      sourceControlX = _getControlWithCurvat6[0],\n      sourceControlY = _getControlWithCurvat6[1];\n\n  var _getControlWithCurvat7 = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  }),\n      _getControlWithCurvat8 = _slicedToArray(_getControlWithCurvat7, 2),\n      targetControlX = _getControlWithCurvat8[0],\n      targetControlY = _getControlWithCurvat8[1]; // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n\n\n  var centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  var centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  var xOffset = Math.abs(centerX - sourceX);\n  var yOffset = Math.abs(centerY - sourceY);\n  return [centerX, centerY, xOffset, yOffset];\n}\n\nvar BezierEdge =\n/*#__PURE__*/\nmemo(function (_ref4) {\n  var sourceX = _ref4.sourceX,\n      sourceY = _ref4.sourceY,\n      targetX = _ref4.targetX,\n      targetY = _ref4.targetY,\n      _ref4$sourcePosition = _ref4.sourcePosition,\n      sourcePosition = _ref4$sourcePosition === void 0 ? Position.Bottom : _ref4$sourcePosition,\n      _ref4$targetPosition = _ref4.targetPosition,\n      targetPosition = _ref4$targetPosition === void 0 ? Position.Top : _ref4$targetPosition,\n      label = _ref4.label,\n      labelStyle = _ref4.labelStyle,\n      labelShowBg = _ref4.labelShowBg,\n      labelBgStyle = _ref4.labelBgStyle,\n      labelBgPadding = _ref4.labelBgPadding,\n      labelBgBorderRadius = _ref4.labelBgBorderRadius,\n      style = _ref4.style,\n      markerEnd = _ref4.markerEnd,\n      markerStart = _ref4.markerStart,\n      curvature = _ref4.curvature;\n  var params = {\n    sourceX: sourceX,\n    sourceY: sourceY,\n    sourcePosition: sourcePosition,\n    targetX: targetX,\n    targetY: targetY,\n    targetPosition: targetPosition,\n    curvature: curvature\n  };\n  var path = getBezierPath(params);\n\n  var _getBezierCenter = getBezierCenter(params),\n      _getBezierCenter2 = _slicedToArray(_getBezierCenter, 2),\n      centerX = _getBezierCenter2[0],\n      centerY = _getBezierCenter2[1];\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(BaseEdge, {\n      path: path,\n      centerX: centerX,\n      centerY: centerY,\n      label: label,\n      labelStyle: labelStyle,\n      labelShowBg: labelShowBg,\n      labelBgStyle: labelBgStyle,\n      labelBgPadding: labelBgPadding,\n      labelBgBorderRadius: labelBgBorderRadius,\n      style: style,\n      markerEnd: markerEnd,\n      markerStart: markerStart\n    })\n  );\n});\nvar NodeIdContext =\n/*#__PURE__*/\ncreateContext(null);\nvar Provider = NodeIdContext.Provider;\nNodeIdContext.Consumer;\n\nfunction checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc) {\n  var elementBelow = doc.elementFromPoint(event.clientX, event.clientY);\n  var elementBelowIsTarget = (elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.classList.contains('target')) || false;\n  var elementBelowIsSource = (elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.classList.contains('source')) || false;\n  var result = {\n    elementBelow: elementBelow,\n    isValid: false,\n    connection: {\n      source: null,\n      target: null,\n      sourceHandle: null,\n      targetHandle: null\n    },\n    isHoveringHandle: false\n  };\n\n  if (elementBelow && (elementBelowIsTarget || elementBelowIsSource)) {\n    result.isHoveringHandle = true; // in strict mode we don't allow target to target or source to source connections\n\n    var isValid = connectionMode === ConnectionMode.Strict ? isTarget && elementBelowIsSource || !isTarget && elementBelowIsTarget : true;\n\n    if (isValid) {\n      var elementBelowNodeId = elementBelow.getAttribute('data-nodeid');\n      var elementBelowHandleId = elementBelow.getAttribute('data-handleid');\n      var connection = isTarget ? {\n        source: elementBelowNodeId,\n        sourceHandle: elementBelowHandleId,\n        target: nodeId,\n        targetHandle: handleId\n      } : {\n        source: nodeId,\n        sourceHandle: handleId,\n        target: elementBelowNodeId,\n        targetHandle: elementBelowHandleId\n      };\n      result.connection = connection;\n      result.isValid = isValidConnection(connection);\n    }\n  }\n\n  return result;\n}\n\nfunction resetRecentHandle(hoveredHandle) {\n  hoveredHandle === null || hoveredHandle === void 0 ? void 0 : hoveredHandle.classList.remove('react-flow__handle-valid');\n  hoveredHandle === null || hoveredHandle === void 0 ? void 0 : hoveredHandle.classList.remove('react-flow__handle-connecting');\n}\n\nfunction onMouseDown(event, handleId, nodeId, setState, onConnect, isTarget, isValidConnection, connectionMode, elementEdgeUpdaterType, onEdgeUpdateEnd, onConnectStart, onConnectStop, onConnectEnd) {\n  var reactFlowNode = event.target.closest('.react-flow'); // when react-flow is used inside a shadow root we can't use document\n\n  var doc = getHostForElement(event.target);\n\n  if (!doc) {\n    return;\n  }\n\n  var elementBelow = doc.elementFromPoint(event.clientX, event.clientY);\n  var elementBelowIsTarget = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.classList.contains('target');\n  var elementBelowIsSource = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.classList.contains('source');\n\n  if (!reactFlowNode || !elementBelowIsTarget && !elementBelowIsSource && !elementEdgeUpdaterType) {\n    return;\n  }\n\n  var handleType = elementEdgeUpdaterType ? elementEdgeUpdaterType : elementBelowIsTarget ? 'target' : 'source';\n  var containerBounds = reactFlowNode.getBoundingClientRect();\n  var recentHoveredHandle;\n  setState({\n    connectionPosition: {\n      x: event.clientX - containerBounds.left,\n      y: event.clientY - containerBounds.top\n    },\n    connectionNodeId: nodeId,\n    connectionHandleId: handleId,\n    connectionHandleType: handleType\n  });\n  onConnectStart === null || onConnectStart === void 0 ? void 0 : onConnectStart(event, {\n    nodeId: nodeId,\n    handleId: handleId,\n    handleType: handleType\n  });\n\n  function onMouseMove(event) {\n    setState({\n      connectionPosition: {\n        x: event.clientX - containerBounds.left,\n        y: event.clientY - containerBounds.top\n      }\n    });\n\n    var _checkElementBelowIsV = checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc),\n        connection = _checkElementBelowIsV.connection,\n        elementBelow = _checkElementBelowIsV.elementBelow,\n        isValid = _checkElementBelowIsV.isValid,\n        isHoveringHandle = _checkElementBelowIsV.isHoveringHandle;\n\n    if (!isHoveringHandle) {\n      return resetRecentHandle(recentHoveredHandle);\n    }\n\n    var isOwnHandle = connection.source === connection.target;\n\n    if (!isOwnHandle && elementBelow) {\n      recentHoveredHandle = elementBelow;\n      elementBelow.classList.add('react-flow__handle-connecting');\n      elementBelow.classList.toggle('react-flow__handle-valid', isValid);\n    }\n  }\n\n  function onMouseUp(event) {\n    var _checkElementBelowIsV2 = checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc),\n        connection = _checkElementBelowIsV2.connection,\n        isValid = _checkElementBelowIsV2.isValid;\n\n    onConnectStop === null || onConnectStop === void 0 ? void 0 : onConnectStop(event);\n\n    if (isValid) {\n      onConnect === null || onConnect === void 0 ? void 0 : onConnect(connection);\n    }\n\n    onConnectEnd === null || onConnectEnd === void 0 ? void 0 : onConnectEnd(event);\n\n    if (elementEdgeUpdaterType && onEdgeUpdateEnd) {\n      onEdgeUpdateEnd(event);\n    }\n\n    resetRecentHandle(recentHoveredHandle);\n    setState({\n      connectionNodeId: null,\n      connectionHandleId: null,\n      connectionHandleType: null\n    });\n    doc.removeEventListener('mousemove', onMouseMove);\n    doc.removeEventListener('mouseup', onMouseUp);\n  }\n\n  doc.addEventListener('mousemove', onMouseMove);\n  doc.addEventListener('mouseup', onMouseUp);\n}\n\nvar _excluded$1 = [\"type\", \"position\", \"isValidConnection\", \"isConnectable\", \"id\", \"onConnect\", \"children\", \"className\"];\n\nfunction ownKeys$8(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$8(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar alwaysValid = function alwaysValid() {\n  return true;\n};\n\nvar selector$d = function selector(s) {\n  return {\n    onConnectAction: s.onConnect,\n    onConnectStart: s.onConnectStart,\n    onConnectStop: s.onConnectStop,\n    onConnectEnd: s.onConnectEnd,\n    connectionMode: s.connectionMode,\n    connectionStartHandle: s.connectionStartHandle,\n    connectOnClick: s.connectOnClick,\n    hasDefaultEdges: s.hasDefaultEdges\n  };\n};\n\nvar Handle =\n/*#__PURE__*/\nforwardRef(function (_ref, ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'source' : _ref$type,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? Position.Top : _ref$position,\n      _ref$isValidConnectio = _ref.isValidConnection,\n      isValidConnection = _ref$isValidConnectio === void 0 ? alwaysValid : _ref$isValidConnectio,\n      _ref$isConnectable = _ref.isConnectable,\n      isConnectable = _ref$isConnectable === void 0 ? true : _ref$isConnectable,\n      id = _ref.id,\n      onConnect = _ref.onConnect,\n      children = _ref.children,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, _excluded$1);\n\n  var store = useStoreApi();\n  var nodeId = useContext(NodeIdContext);\n\n  var _useStore = useStore(selector$d, shallow),\n      onConnectAction = _useStore.onConnectAction,\n      onConnectStart = _useStore.onConnectStart,\n      onConnectStop = _useStore.onConnectStop,\n      onConnectEnd = _useStore.onConnectEnd,\n      connectionMode = _useStore.connectionMode,\n      connectionStartHandle = _useStore.connectionStartHandle,\n      connectOnClick = _useStore.connectOnClick,\n      hasDefaultEdges = _useStore.hasDefaultEdges;\n\n  var handleId = id || null;\n  var isTarget = type === 'target';\n  var onConnectExtended = useCallback(function (params) {\n    var _store$getState = store.getState(),\n        defaultEdgeOptions = _store$getState.defaultEdgeOptions;\n\n    var edgeParams = _objectSpread$8(_objectSpread$8({}, defaultEdgeOptions), params);\n\n    if (hasDefaultEdges) {\n      var _store$getState2 = store.getState(),\n          edges = _store$getState2.edges;\n\n      store.setState({\n        edges: addEdge(edgeParams, edges)\n      });\n    }\n\n    onConnectAction === null || onConnectAction === void 0 ? void 0 : onConnectAction(edgeParams);\n    onConnect === null || onConnect === void 0 ? void 0 : onConnect(edgeParams);\n  }, [hasDefaultEdges, onConnectAction, onConnect]);\n  var onMouseDownHandler = useCallback(function (event) {\n    if (event.button === 0) {\n      onMouseDown(event, handleId, nodeId, store.setState, onConnectExtended, isTarget, isValidConnection, connectionMode, undefined, undefined, onConnectStart, onConnectStop, onConnectEnd);\n    }\n  }, [handleId, nodeId, onConnectExtended, isTarget, isValidConnection, connectionMode, onConnectStart, onConnectStop, onConnectEnd]);\n  var onClick = useCallback(function (event) {\n    if (!connectionStartHandle) {\n      onConnectStart === null || onConnectStart === void 0 ? void 0 : onConnectStart(event, {\n        nodeId: nodeId,\n        handleId: handleId,\n        handleType: type\n      });\n      store.setState({\n        connectionStartHandle: {\n          nodeId: nodeId,\n          type: type,\n          handleId: handleId\n        }\n      });\n    } else {\n      var doc = getHostForElement(event.target);\n\n      var _checkElementBelowIsV = checkElementBelowIsValid(event, connectionMode, connectionStartHandle.type === 'target', connectionStartHandle.nodeId, connectionStartHandle.handleId || null, isValidConnection, doc),\n          connection = _checkElementBelowIsV.connection,\n          isValid = _checkElementBelowIsV.isValid;\n\n      onConnectStop === null || onConnectStop === void 0 ? void 0 : onConnectStop(event);\n\n      if (isValid) {\n        onConnectExtended(connection);\n      }\n\n      onConnectEnd === null || onConnectEnd === void 0 ? void 0 : onConnectEnd(event);\n      store.setState({\n        connectionStartHandle: null\n      });\n    }\n  }, [connectionStartHandle, onConnectStart, onConnectExtended, onConnectStop, onConnectEnd, isTarget, nodeId, handleId, type]);\n  var handleClasses = cc(['react-flow__handle', \"react-flow__handle-\".concat(position), 'nodrag', className, {\n    source: !isTarget,\n    target: isTarget,\n    connectable: isConnectable,\n    connecting: (connectionStartHandle === null || connectionStartHandle === void 0 ? void 0 : connectionStartHandle.nodeId) === nodeId && (connectionStartHandle === null || connectionStartHandle === void 0 ? void 0 : connectionStartHandle.handleId) === handleId && (connectionStartHandle === null || connectionStartHandle === void 0 ? void 0 : connectionStartHandle.type) === type\n  }]);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", _objectSpread$8({\n      \"data-handleid\": handleId,\n      \"data-nodeid\": nodeId,\n      \"data-handlepos\": position,\n      className: handleClasses,\n      onMouseDown: onMouseDownHandler,\n      onClick: connectOnClick ? onClick : undefined,\n      ref: ref\n    }, rest), children)\n  );\n});\nHandle.displayName = 'Handle';\nvar Handle$1 =\n/*#__PURE__*/\nmemo(Handle);\n\nvar DefaultNode = function DefaultNode(_ref) {\n  var data = _ref.data,\n      isConnectable = _ref.isConnectable,\n      _ref$targetPosition = _ref.targetPosition,\n      targetPosition = _ref$targetPosition === void 0 ? Position.Top : _ref$targetPosition,\n      _ref$sourcePosition = _ref.sourcePosition,\n      sourcePosition = _ref$sourcePosition === void 0 ? Position.Bottom : _ref$sourcePosition;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(React__default.Fragment, null,\n    /*#__PURE__*/\n    React__default.createElement(Handle$1, {\n      type: \"target\",\n      position: targetPosition,\n      isConnectable: isConnectable\n    }), data === null || data === void 0 ? void 0 : data.label,\n    /*#__PURE__*/\n    React__default.createElement(Handle$1, {\n      type: \"source\",\n      position: sourcePosition,\n      isConnectable: isConnectable\n    }))\n  );\n};\n\nDefaultNode.displayName = 'DefaultNode';\nvar DefaultNode$1 =\n/*#__PURE__*/\nmemo(DefaultNode);\n\nvar InputNode = function InputNode(_ref) {\n  var data = _ref.data,\n      isConnectable = _ref.isConnectable,\n      _ref$sourcePosition = _ref.sourcePosition,\n      sourcePosition = _ref$sourcePosition === void 0 ? Position.Bottom : _ref$sourcePosition;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(React__default.Fragment, null, data === null || data === void 0 ? void 0 : data.label,\n    /*#__PURE__*/\n    React__default.createElement(Handle$1, {\n      type: \"source\",\n      position: sourcePosition,\n      isConnectable: isConnectable\n    }))\n  );\n};\n\nInputNode.displayName = 'InputNode';\nvar InputNode$1 =\n/*#__PURE__*/\nmemo(InputNode);\n\nvar OutputNode = function OutputNode(_ref) {\n  var data = _ref.data,\n      isConnectable = _ref.isConnectable,\n      _ref$targetPosition = _ref.targetPosition,\n      targetPosition = _ref$targetPosition === void 0 ? Position.Top : _ref$targetPosition;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(React__default.Fragment, null,\n    /*#__PURE__*/\n    React__default.createElement(Handle$1, {\n      type: \"target\",\n      position: targetPosition,\n      isConnectable: isConnectable\n    }), data === null || data === void 0 ? void 0 : data.label)\n  );\n};\n\nOutputNode.displayName = 'OutputNode';\nvar OutputNode$1 =\n/*#__PURE__*/\nmemo(OutputNode);\n\nvar selector$c = function selector(s) {\n  return {\n    selectedNodes: Array.from(s.nodeInternals.values()).filter(function (n) {\n      return n.selected;\n    }),\n    selectedEdges: s.edges.filter(function (e) {\n      return e.selected;\n    })\n  };\n};\n\nvar areEqual = function areEqual(objA, objB) {\n  var selectedNodeIdsA = objA.selectedNodes.map(function (n) {\n    return n.id;\n  });\n  var selectedNodeIdsB = objB.selectedNodes.map(function (n) {\n    return n.id;\n  });\n  var selectedEdgeIdsA = objA.selectedEdges.map(function (e) {\n    return e.id;\n  });\n  var selectedEdgeIdsB = objB.selectedEdges.map(function (e) {\n    return e.id;\n  });\n  return shallow(selectedNodeIdsA, selectedNodeIdsB) && shallow(selectedEdgeIdsA, selectedEdgeIdsB);\n}; // This is just a helper component for calling the onSelectionChange listener.\n// @TODO: Now that we have the onNodesChange and on EdgesChange listeners, do we still need this component?\n\n\nfunction SelectionListener(_ref) {\n  var onSelectionChange = _ref.onSelectionChange;\n\n  var _useStore = useStore(selector$c, areEqual),\n      selectedNodes = _useStore.selectedNodes,\n      selectedEdges = _useStore.selectedEdges;\n\n  useEffect(function () {\n    onSelectionChange({\n      nodes: selectedNodes,\n      edges: selectedEdges\n    });\n  }, [selectedNodes, selectedEdges]);\n  return null;\n}\n\nvar SelectionListener$1 =\n/*#__PURE__*/\nmemo(SelectionListener);\n\nvar selector$b = function selector(s) {\n  return {\n    setNodes: s.setNodes,\n    setEdges: s.setEdges,\n    setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,\n    setMinZoom: s.setMinZoom,\n    setMaxZoom: s.setMaxZoom,\n    setTranslateExtent: s.setTranslateExtent,\n    setNodeExtent: s.setNodeExtent,\n    reset: s.reset\n  };\n};\n\nfunction useStoreUpdater(value, setStoreState) {\n  useEffect(function () {\n    if (typeof value !== 'undefined') {\n      setStoreState(value);\n    }\n  }, [value]);\n}\n\nfunction useDirectStoreUpdater(key, value, setState) {\n  useEffect(function () {\n    if (typeof value !== 'undefined') {\n      // @ts-ignore\n      setState(_defineProperty({}, key, value));\n    }\n  }, [value]);\n}\n\nvar StoreUpdater = function StoreUpdater(_ref) {\n  var nodes = _ref.nodes,\n      edges = _ref.edges,\n      defaultNodes = _ref.defaultNodes,\n      defaultEdges = _ref.defaultEdges,\n      onConnect = _ref.onConnect,\n      onConnectStart = _ref.onConnectStart,\n      onConnectStop = _ref.onConnectStop,\n      onConnectEnd = _ref.onConnectEnd,\n      nodesDraggable = _ref.nodesDraggable,\n      nodesConnectable = _ref.nodesConnectable,\n      minZoom = _ref.minZoom,\n      maxZoom = _ref.maxZoom,\n      nodeExtent = _ref.nodeExtent,\n      onNodesChange = _ref.onNodesChange,\n      onEdgesChange = _ref.onEdgesChange,\n      elementsSelectable = _ref.elementsSelectable,\n      connectionMode = _ref.connectionMode,\n      snapGrid = _ref.snapGrid,\n      snapToGrid = _ref.snapToGrid,\n      translateExtent = _ref.translateExtent,\n      connectOnClick = _ref.connectOnClick,\n      defaultEdgeOptions = _ref.defaultEdgeOptions,\n      fitView = _ref.fitView,\n      fitViewOptions = _ref.fitViewOptions,\n      onNodesDelete = _ref.onNodesDelete,\n      onEdgesDelete = _ref.onEdgesDelete;\n\n  var _useStore = useStore(selector$b, shallow),\n      setNodes = _useStore.setNodes,\n      setEdges = _useStore.setEdges,\n      setDefaultNodesAndEdges = _useStore.setDefaultNodesAndEdges,\n      setMinZoom = _useStore.setMinZoom,\n      setMaxZoom = _useStore.setMaxZoom,\n      setTranslateExtent = _useStore.setTranslateExtent,\n      setNodeExtent = _useStore.setNodeExtent,\n      reset = _useStore.reset;\n\n  var store = useStoreApi();\n  useEffect(function () {\n    setDefaultNodesAndEdges(defaultNodes, defaultEdges);\n    return function () {\n      reset();\n    };\n  }, []);\n  useDirectStoreUpdater('defaultEdgeOptions', defaultEdgeOptions, store.setState);\n  useDirectStoreUpdater('connectionMode', connectionMode, store.setState);\n  useDirectStoreUpdater('onConnect', onConnect, store.setState);\n  useDirectStoreUpdater('onConnectStart', onConnectStart, store.setState);\n  useDirectStoreUpdater('onConnectStop', onConnectStop, store.setState);\n  useDirectStoreUpdater('onConnectEnd', onConnectEnd, store.setState);\n  useDirectStoreUpdater('nodesDraggable', nodesDraggable, store.setState);\n  useDirectStoreUpdater('nodesConnectable', nodesConnectable, store.setState);\n  useDirectStoreUpdater('elementsSelectable', elementsSelectable, store.setState);\n  useDirectStoreUpdater('snapToGrid', snapToGrid, store.setState);\n  useDirectStoreUpdater('snapGrid', snapGrid, store.setState);\n  useDirectStoreUpdater('onNodesChange', onNodesChange, store.setState);\n  useDirectStoreUpdater('onEdgesChange', onEdgesChange, store.setState);\n  useDirectStoreUpdater('connectOnClick', connectOnClick, store.setState);\n  useDirectStoreUpdater('fitViewOnInit', fitView, store.setState);\n  useDirectStoreUpdater('fitViewOnInitOptions', fitViewOptions, store.setState);\n  useDirectStoreUpdater('onNodesDelete', onNodesDelete, store.setState);\n  useDirectStoreUpdater('onEdgesDelete', onEdgesDelete, store.setState);\n  useStoreUpdater(nodes, setNodes);\n  useStoreUpdater(edges, setEdges);\n  useStoreUpdater(defaultNodes, setNodes);\n  useStoreUpdater(defaultEdges, setEdges);\n  useStoreUpdater(minZoom, setMinZoom);\n  useStoreUpdater(maxZoom, setMaxZoom);\n  useStoreUpdater(translateExtent, setTranslateExtent);\n  useStoreUpdater(nodeExtent, setNodeExtent);\n  return null;\n};\n\nvar css_248z$1 = \".react-flow{height:100%;overflow:hidden;position:relative;width:100%}.react-flow__container{height:100%;left:0;position:absolute;top:0;width:100%}.react-flow__pane{z-index:1}.react-flow__viewport{pointer-events:none;transform-origin:0 0;z-index:2}.react-flow__renderer{z-index:4}.react-flow__selectionpane{z-index:5}.react-flow .react-flow__edges{overflow:visible;pointer-events:none}.react-flow__edge{pointer-events:visibleStroke}.react-flow__edge.inactive{pointer-events:none}@-webkit-keyframes dashdraw{0%{stroke-dashoffset:10}}@keyframes dashdraw{0%{stroke-dashoffset:10}}.react-flow__edge-path{fill:none}.react-flow__edge-textwrapper{pointer-events:all}.react-flow__edge-text{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.react-flow__connection{pointer-events:none}.react-flow__connection .animated{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__connection-path{fill:none}.react-flow__nodes{pointer-events:none;transform-origin:0 0}.react-flow__node{box-sizing:border-box;pointer-events:all;position:absolute;transform-origin:0 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.react-flow__nodesselection{pointer-events:none;transform-origin:left top;z-index:3}.react-flow__nodesselection-rect{cursor:-webkit-grab;cursor:grab;pointer-events:all;position:absolute}.react-flow__handle{pointer-events:none}.react-flow__handle.connectable{pointer-events:all}.react-flow__handle-bottom{bottom:-4px;left:50%;top:auto;transform:translate(-50%)}.react-flow__handle-top{left:50%;top:-4px;transform:translate(-50%)}.react-flow__handle-left{left:-4px;top:50%;transform:translateY(-50%)}.react-flow__handle-right{right:-4px;top:50%;transform:translateY(-50%)}.react-flow__edgeupdater{cursor:move;pointer-events:all}.react-flow__controls{bottom:20px;left:15px;position:absolute;z-index:5}.react-flow__controls-button{border:none;height:24px;width:24px}.react-flow__controls-button svg{width:100%}.react-flow__minimap{bottom:20px;position:absolute;right:15px;z-index:5}.react-flow__attribution{background:hsla(0,0%,100%,.5);color:#999;font-size:10px;padding:2px 3px;position:absolute;z-index:1000}.react-flow__attribution a{color:#555;text-decoration:none}.react-flow__attribution.top{top:0}.react-flow__attribution.bottom{bottom:0}.react-flow__attribution.left{left:0}.react-flow__attribution.right{right:0}.react-flow__attribution.center{left:50%;transform:translateX(-50%)}\";\nvar css_248z = \".react-flow__edge.selected .react-flow__edge-path{stroke:#555}.react-flow__edge.animated path{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__edge.updating .react-flow__edge-path{stroke:#777}.react-flow__edge-path{stroke:#b1b1b7;stroke-width:1}.react-flow__edge-text{font-size:10px}.react-flow__edge-textbg{fill:#fff}.react-flow__connection-path{stroke:#b1b1b7;stroke-width:1}.react-flow__node{cursor:-webkit-grab;cursor:grab}.react-flow__node-default,.react-flow__node-group,.react-flow__node-input,.react-flow__node-output{background:#fff;border:1px solid #1a192b;border-radius:3px;color:#222;font-size:12px;padding:10px;text-align:center;width:150px}.react-flow__node-default.selected,.react-flow__node-default.selected:hover,.react-flow__node-group.selected,.react-flow__node-group.selected:hover,.react-flow__node-input.selected,.react-flow__node-input.selected:hover,.react-flow__node-output.selected,.react-flow__node-output.selected:hover{box-shadow:0 0 0 .5px #1a192b}.react-flow__node-default .react-flow__handle,.react-flow__node-group .react-flow__handle,.react-flow__node-input .react-flow__handle,.react-flow__node-output .react-flow__handle{background:#1a192b}.react-flow__node-default.selectable:hover,.react-flow__node-group.selectable:hover,.react-flow__node-input.selectable:hover,.react-flow__node-output.selectable:hover{box-shadow:0 1px 4px 1px rgba(0,0,0,.08)}.react-flow__node-group{background:hsla(0,0%,94%,.25);border-color:#1a192b}.react-flow__node-group.selected,.react-flow__node-group.selected:hover{box-shadow:0 0 0 .5px #1a192b}.react-flow__nodesselection-rect,.react-flow__selection{background:rgba(0,89,220,.08);border:1px dotted rgba(0,89,220,.8)}.react-flow__handle{background:#555;border:1px solid #fff;border-radius:100%;height:6px;position:absolute;width:6px}.react-flow__handle.connectable{cursor:crosshair}.react-flow__minimap{background-color:#fff}.react-flow__controls{box-shadow:0 0 2px 1px rgba(0,0,0,.08)}.react-flow__controls-button{align-items:center;background:#fefefe;border-bottom:1px solid #eee;box-sizing:content-box;cursor:pointer;display:flex;height:16px;justify-content:center;padding:5px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:16px}.react-flow__controls-button svg{max-height:12px;max-width:12px}.react-flow__controls-button:hover{background:#f4f4f4}\";\n\nvar shiftX = function shiftX(x, shift, position) {\n  if (position === Position.Left) return x - shift;\n  if (position === Position.Right) return x + shift;\n  return x;\n};\n\nvar shiftY = function shiftY(y, shift, position) {\n  if (position === Position.Top) return y - shift;\n  if (position === Position.Bottom) return y + shift;\n  return y;\n};\n\nvar EdgeAnchor = function EdgeAnchor(_ref) {\n  var className = _ref.className,\n      position = _ref.position,\n      centerX = _ref.centerX,\n      centerY = _ref.centerY,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 10 : _ref$radius;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"circle\", {\n      className: cc(['react-flow__edgeupdater', className]),\n      cx: shiftX(centerX, radius, position),\n      cy: shiftY(centerY, radius, position),\n      r: radius,\n      stroke: \"transparent\",\n      fill: \"transparent\"\n    })\n  );\n};\n\nvar selector$a = function selector(s) {\n  return {\n    addSelectedEdges: s.addSelectedEdges,\n    connectionMode: s.connectionMode\n  };\n};\n\nvar wrapEdge = function wrapEdge(EdgeComponent) {\n  var EdgeWrapper = function EdgeWrapper(_ref) {\n    var id = _ref.id,\n        className = _ref.className,\n        type = _ref.type,\n        data = _ref.data,\n        onClick = _ref.onClick,\n        onEdgeDoubleClick = _ref.onEdgeDoubleClick,\n        selected = _ref.selected,\n        animated = _ref.animated,\n        label = _ref.label,\n        labelStyle = _ref.labelStyle,\n        labelShowBg = _ref.labelShowBg,\n        labelBgStyle = _ref.labelBgStyle,\n        labelBgPadding = _ref.labelBgPadding,\n        labelBgBorderRadius = _ref.labelBgBorderRadius,\n        style = _ref.style,\n        source = _ref.source,\n        target = _ref.target,\n        sourceX = _ref.sourceX,\n        sourceY = _ref.sourceY,\n        targetX = _ref.targetX,\n        targetY = _ref.targetY,\n        sourcePosition = _ref.sourcePosition,\n        targetPosition = _ref.targetPosition,\n        elementsSelectable = _ref.elementsSelectable,\n        hidden = _ref.hidden,\n        sourceHandleId = _ref.sourceHandleId,\n        targetHandleId = _ref.targetHandleId,\n        onContextMenu = _ref.onContextMenu,\n        onMouseEnter = _ref.onMouseEnter,\n        onMouseMove = _ref.onMouseMove,\n        onMouseLeave = _ref.onMouseLeave,\n        edgeUpdaterRadius = _ref.edgeUpdaterRadius,\n        onEdgeUpdate = _ref.onEdgeUpdate,\n        onEdgeUpdateStart = _ref.onEdgeUpdateStart,\n        onEdgeUpdateEnd = _ref.onEdgeUpdateEnd,\n        markerEnd = _ref.markerEnd,\n        markerStart = _ref.markerStart;\n    var store = useStoreApi();\n\n    var _useStore = useStore(selector$a, shallow),\n        addSelectedEdges = _useStore.addSelectedEdges,\n        connectionMode = _useStore.connectionMode;\n\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        updating = _useState2[0],\n        setUpdating = _useState2[1];\n\n    var inactive = !elementsSelectable && !onClick;\n    var handleEdgeUpdate = typeof onEdgeUpdate !== 'undefined';\n    var edgeClasses = cc(['react-flow__edge', \"react-flow__edge-\".concat(type), className, {\n      selected: selected,\n      animated: animated,\n      inactive: inactive,\n      updating: updating\n    }]);\n    var edgeElement = useMemo(function () {\n      var el = {\n        id: id,\n        source: source,\n        target: target,\n        type: type\n      };\n\n      if (sourceHandleId) {\n        el.sourceHandle = sourceHandleId;\n      }\n\n      if (targetHandleId) {\n        el.targetHandle = targetHandleId;\n      }\n\n      if (typeof data !== 'undefined') {\n        el.data = data;\n      }\n\n      return el;\n    }, [id, source, target, type, sourceHandleId, targetHandleId, data]);\n    var onEdgeClick = useCallback(function (event) {\n      if (elementsSelectable) {\n        store.setState({\n          nodesSelectionActive: false\n        });\n        addSelectedEdges([edgeElement.id]);\n      }\n\n      onClick === null || onClick === void 0 ? void 0 : onClick(event, edgeElement);\n    }, [elementsSelectable, edgeElement, onClick]);\n    var onEdgeDoubleClickHandler = useCallback(function (event) {\n      onEdgeDoubleClick === null || onEdgeDoubleClick === void 0 ? void 0 : onEdgeDoubleClick(event, edgeElement);\n    }, [edgeElement, onEdgeDoubleClick]);\n    var onEdgeContextMenu = useCallback(function (event) {\n      onContextMenu === null || onContextMenu === void 0 ? void 0 : onContextMenu(event, edgeElement);\n    }, [edgeElement, onContextMenu]);\n    var onEdgeMouseEnter = useCallback(function (event) {\n      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event, edgeElement);\n    }, [edgeElement, onContextMenu]);\n    var onEdgeMouseMove = useCallback(function (event) {\n      onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(event, edgeElement);\n    }, [edgeElement, onContextMenu]);\n    var onEdgeMouseLeave = useCallback(function (event) {\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event, edgeElement);\n    }, [edgeElement, onContextMenu]);\n    var handleEdgeUpdater = useCallback(function (event, isSourceHandle) {\n      var nodeId = isSourceHandle ? target : source;\n      var handleId = isSourceHandle ? targetHandleId : sourceHandleId;\n\n      var isValidConnection = function isValidConnection() {\n        return true;\n      };\n\n      var isTarget = isSourceHandle;\n      onEdgeUpdateStart === null || onEdgeUpdateStart === void 0 ? void 0 : onEdgeUpdateStart(event, edgeElement);\n\n      var _onEdgeUpdate = onEdgeUpdateEnd ? function (evt) {\n        return onEdgeUpdateEnd(evt, edgeElement);\n      } : undefined;\n\n      var onConnectEdge = function onConnectEdge(connection) {\n        var _store$getState = store.getState(),\n            edges = _store$getState.edges;\n\n        var edge = edges.find(function (e) {\n          return e.id === id;\n        });\n\n        if (edge && onEdgeUpdate) {\n          onEdgeUpdate(edge, connection);\n        }\n      };\n\n      onMouseDown(event, handleId, nodeId, store.setState, onConnectEdge, isTarget, isValidConnection, connectionMode, isSourceHandle ? 'target' : 'source', _onEdgeUpdate, store.getState);\n    }, [id, source, target, type, sourceHandleId, targetHandleId, edgeElement, onEdgeUpdate]);\n    var onEdgeUpdaterSourceMouseDown = useCallback(function (event) {\n      handleEdgeUpdater(event, true);\n    }, [id, source, sourceHandleId, handleEdgeUpdater]);\n    var onEdgeUpdaterTargetMouseDown = useCallback(function (event) {\n      handleEdgeUpdater(event, false);\n    }, [id, target, targetHandleId, handleEdgeUpdater]);\n    var onEdgeUpdaterMouseEnter = useCallback(function () {\n      return setUpdating(true);\n    }, [setUpdating]);\n    var onEdgeUpdaterMouseOut = useCallback(function () {\n      return setUpdating(false);\n    }, [setUpdating]);\n    var markerStartUrl = useMemo(function () {\n      return \"url(#\".concat(getMarkerId(markerStart), \")\");\n    }, [markerStart]);\n    var markerEndUrl = useMemo(function () {\n      return \"url(#\".concat(getMarkerId(markerEnd), \")\");\n    }, [markerEnd]);\n\n    if (hidden) {\n      return null;\n    }\n\n    return (\n      /*#__PURE__*/\n      React__default.createElement(\"g\", {\n        className: edgeClasses,\n        onClick: onEdgeClick,\n        onDoubleClick: onEdgeDoubleClickHandler,\n        onContextMenu: onEdgeContextMenu,\n        onMouseEnter: onEdgeMouseEnter,\n        onMouseMove: onEdgeMouseMove,\n        onMouseLeave: onEdgeMouseLeave\n      },\n      /*#__PURE__*/\n      React__default.createElement(EdgeComponent, {\n        id: id,\n        source: source,\n        target: target,\n        selected: selected,\n        animated: animated,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius,\n        data: data,\n        style: style,\n        sourceX: sourceX,\n        sourceY: sourceY,\n        targetX: targetX,\n        targetY: targetY,\n        sourcePosition: sourcePosition,\n        targetPosition: targetPosition,\n        sourceHandleId: sourceHandleId,\n        targetHandleId: targetHandleId,\n        markerStart: markerStartUrl,\n        markerEnd: markerEndUrl\n      }), handleEdgeUpdate &&\n      /*#__PURE__*/\n      React__default.createElement(\"g\", {\n        onMouseDown: onEdgeUpdaterSourceMouseDown,\n        onMouseEnter: onEdgeUpdaterMouseEnter,\n        onMouseOut: onEdgeUpdaterMouseOut\n      },\n      /*#__PURE__*/\n      React__default.createElement(EdgeAnchor, {\n        position: sourcePosition,\n        centerX: sourceX,\n        centerY: sourceY,\n        radius: edgeUpdaterRadius\n      })), handleEdgeUpdate &&\n      /*#__PURE__*/\n      React__default.createElement(\"g\", {\n        onMouseDown: onEdgeUpdaterTargetMouseDown,\n        onMouseEnter: onEdgeUpdaterMouseEnter,\n        onMouseOut: onEdgeUpdaterMouseOut\n      },\n      /*#__PURE__*/\n      React__default.createElement(EdgeAnchor, {\n        position: targetPosition,\n        centerX: targetX,\n        centerY: targetY,\n        radius: edgeUpdaterRadius\n      })))\n    );\n  };\n\n  EdgeWrapper.displayName = 'EdgeWrapper';\n  return (\n    /*#__PURE__*/\n    memo(EdgeWrapper)\n  );\n};\n\nfunction ownKeys$7(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$7(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction createEdgeTypes(edgeTypes) {\n  var standardTypes = {\n    \"default\": wrapEdge(edgeTypes[\"default\"] || BezierEdge),\n    straight: wrapEdge(edgeTypes.bezier || StraightEdge),\n    step: wrapEdge(edgeTypes.step || StepEdge),\n    smoothstep: wrapEdge(edgeTypes.step || SmoothStepEdge),\n    simplebezier: wrapEdge(edgeTypes.simplebezier || SimpleBezierEdge)\n  };\n  var wrappedTypes = {};\n  var specialTypes = Object.keys(edgeTypes).filter(function (k) {\n    return !['default', 'bezier'].includes(k);\n  }).reduce(function (res, key) {\n    res[key] = wrapEdge(edgeTypes[key] || BezierEdge);\n    return res;\n  }, wrappedTypes);\n  return _objectSpread$7(_objectSpread$7({}, standardTypes), specialTypes);\n}\n\nfunction getHandlePosition(position, nodeRect) {\n  var handle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var x = ((handle === null || handle === void 0 ? void 0 : handle.x) || 0) + nodeRect.x;\n  var y = ((handle === null || handle === void 0 ? void 0 : handle.y) || 0) + nodeRect.y;\n  var width = (handle === null || handle === void 0 ? void 0 : handle.width) || nodeRect.width;\n  var height = (handle === null || handle === void 0 ? void 0 : handle.height) || nodeRect.height;\n\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y: y\n      };\n\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n\n    case Position.Left:\n      return {\n        x: x,\n        y: y + height / 2\n      };\n  }\n}\n\nfunction getHandle(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  } // there is no handleId when there are no multiple handles/ handles with ids\n  // so we just pick the first one\n\n\n  var handle = null;\n\n  if (bounds.length === 1 || !handleId) {\n    handle = bounds[0];\n  } else if (handleId) {\n    handle = bounds.find(function (d) {\n      return d.id === handleId;\n    });\n  }\n\n  return typeof handle === 'undefined' ? null : handle;\n}\n\nvar getEdgePositions = function getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition) {\n  var sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);\n  var targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);\n  return {\n    sourceX: sourceHandlePos.x,\n    sourceY: sourceHandlePos.y,\n    targetX: targetHandlePos.x,\n    targetY: targetHandlePos.y\n  };\n};\n\nfunction isEdgeVisible(_ref) {\n  var sourcePos = _ref.sourcePos,\n      targetPos = _ref.targetPos,\n      sourceWidth = _ref.sourceWidth,\n      sourceHeight = _ref.sourceHeight,\n      targetWidth = _ref.targetWidth,\n      targetHeight = _ref.targetHeight,\n      width = _ref.width,\n      height = _ref.height,\n      transform = _ref.transform;\n  var edgeBox = {\n    x: Math.min(sourcePos.x, targetPos.x),\n    y: Math.min(sourcePos.y, targetPos.y),\n    x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),\n    y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight)\n  };\n\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n\n  var viewBox = rectToBox({\n    x: (0 - transform[0]) / transform[2],\n    y: (0 - transform[1]) / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  });\n  var xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));\n  var yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));\n  var overlappingArea = Math.ceil(xOverlap * yOverlap);\n  return overlappingArea > 0;\n}\n\nfunction getNodeData(nodeInternals, nodeId) {\n  var _node$positionAbsolut, _node$positionAbsolut2, _node$positionAbsolut3, _node$positionAbsolut4;\n\n  var node = nodeInternals.get(nodeId);\n  var handleBounds = node === null || node === void 0 ? void 0 : node.handleBounds;\n  var isInvalid = !node || !node.handleBounds || !node.width || !node.height || typeof ((_node$positionAbsolut = node.positionAbsolute) === null || _node$positionAbsolut === void 0 ? void 0 : _node$positionAbsolut.x) === 'undefined' || typeof ((_node$positionAbsolut2 = node.positionAbsolute) === null || _node$positionAbsolut2 === void 0 ? void 0 : _node$positionAbsolut2.y) === 'undefined';\n  return [{\n    x: (node === null || node === void 0 ? void 0 : (_node$positionAbsolut3 = node.positionAbsolute) === null || _node$positionAbsolut3 === void 0 ? void 0 : _node$positionAbsolut3.x) || 0,\n    y: (node === null || node === void 0 ? void 0 : (_node$positionAbsolut4 = node.positionAbsolute) === null || _node$positionAbsolut4 === void 0 ? void 0 : _node$positionAbsolut4.y) || 0,\n    width: (node === null || node === void 0 ? void 0 : node.width) || 0,\n    height: (node === null || node === void 0 ? void 0 : node.height) || 0\n  }, handleBounds || null, !isInvalid];\n}\n\nvar doc = typeof document !== 'undefined' ? document : null; // the keycode can be a string 'a' or an array of strings ['a', 'a+d']\n// a string means a single key 'a' or a combination when '+' is used 'a+d'\n// an array means different possibilites. Explainer: ['a', 'd+s'] here the\n// user can use the single key 'a' or the combination 'd' + 's'\n\nvar useKeyPress = function useKeyPress() {\n  var keyCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    target: doc\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      keyPressed = _useState2[0],\n      setKeyPressed = _useState2[1]; // we need to remember the pressed keys in order to support combinations\n\n\n  var pressedKeys = useRef(new Set([])); // keyCodes = array with single keys [['a']] or key combinations [['a', 's']]\n  // keysToWatch = array with all keys flattened ['a', 'd', 'ShiftLeft']\n  // used to check if we store event.code or event.key. When the code is in the list of keysToWatch\n  // we use the code otherwise the key. Explainer: When you press the left \"command\" key, the code is \"MetaLeft\"\n  // and the key is \"Meta\". We want users to be able to pass keys and codes so we assume that the key is meant when\n  // we can't find it in the list of keysToWatch.\n\n  var _useMemo = useMemo(function () {\n    if (keyCode !== null) {\n      var keyCodeArr = Array.isArray(keyCode) ? keyCode : [keyCode];\n      var keys = keyCodeArr.filter(function (kc) {\n        return typeof kc === 'string';\n      }).map(function (kc) {\n        return kc.split('+');\n      });\n      var keysFlat = keys.reduce(function (res, item) {\n        return res.concat.apply(res, _toConsumableArray(item));\n      }, []);\n      return [keys, keysFlat];\n    }\n\n    return [[], []];\n  }, [keyCode]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      keyCodes = _useMemo2[0],\n      keysToWatch = _useMemo2[1];\n\n  useEffect(function () {\n    if (keyCode !== null) {\n      var _options$target, _options$target2;\n\n      var downHandler = function downHandler(event) {\n        if (isInputDOMNode(event)) {\n          return false;\n        }\n\n        var keyOrCode = useKeyOrCode(event.code, keysToWatch);\n        pressedKeys.current.add(event[keyOrCode]);\n\n        if (isMatchingKey(keyCodes, pressedKeys.current, false)) {\n          event.preventDefault();\n          setKeyPressed(true);\n        }\n      };\n\n      var upHandler = function upHandler(event) {\n        if (isInputDOMNode(event)) {\n          return false;\n        }\n\n        var keyOrCode = useKeyOrCode(event.code, keysToWatch);\n\n        if (isMatchingKey(keyCodes, pressedKeys.current, true)) {\n          setKeyPressed(false);\n          pressedKeys.current.clear();\n        } else {\n          pressedKeys.current[\"delete\"](event[keyOrCode]);\n        }\n      };\n\n      var resetHandler = function resetHandler() {\n        pressedKeys.current.clear();\n        setKeyPressed(false);\n      };\n\n      options === null || options === void 0 ? void 0 : (_options$target = options.target) === null || _options$target === void 0 ? void 0 : _options$target.addEventListener('keydown', downHandler);\n      options === null || options === void 0 ? void 0 : (_options$target2 = options.target) === null || _options$target2 === void 0 ? void 0 : _options$target2.addEventListener('keyup', upHandler);\n      window.addEventListener('blur', resetHandler);\n      return function () {\n        var _options$target3, _options$target4;\n\n        options === null || options === void 0 ? void 0 : (_options$target3 = options.target) === null || _options$target3 === void 0 ? void 0 : _options$target3.removeEventListener('keydown', downHandler);\n        options === null || options === void 0 ? void 0 : (_options$target4 = options.target) === null || _options$target4 === void 0 ? void 0 : _options$target4.removeEventListener('keyup', upHandler);\n        window.removeEventListener('blur', resetHandler);\n      };\n    }\n  }, [keyCode, setKeyPressed]);\n  return keyPressed;\n}; // utils\n\n\nfunction isMatchingKey(keyCodes, pressedKeys, isUp) {\n  return keyCodes // we only want to compare same sizes of keyCode definitions\n  // and pressed keys. When the user specified 'Meta' as a key somewhere\n  // this would also be truthy without this filter when user presses 'Meta' + 'r'\n  .filter(function (keys) {\n    return isUp || keys.length === pressedKeys.size;\n  }) // since we want to support multiple possibilities only one of the\n  // combinations need to be part of the pressed keys\n  .some(function (keys) {\n    return keys.every(function (k) {\n      return pressedKeys.has(k);\n    });\n  });\n}\n\nfunction useKeyOrCode(eventCode, keysToWatch) {\n  return keysToWatch.includes(eventCode) ? 'code' : 'key';\n}\n\nfunction isInputDOMNode(event) {\n  var target = event.target;\n  return ['INPUT', 'SELECT', 'TEXTAREA'].includes(target === null || target === void 0 ? void 0 : target.nodeName) || (target === null || target === void 0 ? void 0 : target.hasAttribute('contenteditable'));\n}\n\nvar selector$9 = function selector(s) {\n  return {\n    onNodesChange: s.onNodesChange,\n    onEdgesChange: s.onEdgesChange\n  };\n};\n\nvar useGlobalKeyHandler = function useGlobalKeyHandler(_ref) {\n  var deleteKeyCode = _ref.deleteKeyCode,\n      multiSelectionKeyCode = _ref.multiSelectionKeyCode;\n  var store = useStoreApi();\n\n  var _useStore = useStore(selector$9, shallow),\n      onNodesChange = _useStore.onNodesChange,\n      onEdgesChange = _useStore.onEdgesChange;\n\n  var deleteKeyPressed = useKeyPress(deleteKeyCode);\n  var multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);\n  useEffect(function () {\n    var _store$getState = store.getState(),\n        nodeInternals = _store$getState.nodeInternals,\n        edges = _store$getState.edges,\n        hasDefaultNodes = _store$getState.hasDefaultNodes,\n        hasDefaultEdges = _store$getState.hasDefaultEdges,\n        onNodesDelete = _store$getState.onNodesDelete,\n        onEdgesDelete = _store$getState.onEdgesDelete;\n\n    var nodes = Array.from(nodeInternals.values());\n    var nodesToRemove = nodes.reduce(function (res, node) {\n      if (!node.selected && node.parentNode && res.find(function (n) {\n        return n.id === node.parentNode;\n      })) {\n        res.push(node);\n      } else if (node.selected) {\n        res.push(node);\n      }\n\n      return res;\n    }, []);\n    var selectedEdges = edges.filter(function (e) {\n      return e.selected;\n    });\n\n    if (deleteKeyPressed && (nodesToRemove || selectedEdges)) {\n      var connectedEdges = getConnectedEdges(nodesToRemove, edges);\n      var edgesToRemove = [].concat(_toConsumableArray(selectedEdges), _toConsumableArray(connectedEdges));\n      var edgeIdsToRemove = edgesToRemove.reduce(function (res, edge) {\n        if (!res.includes(edge.id)) {\n          res.push(edge.id);\n        }\n\n        return res;\n      }, []);\n\n      if (hasDefaultEdges || hasDefaultNodes) {\n        if (hasDefaultEdges) {\n          store.setState({\n            edges: edges.filter(function (e) {\n              return !edgeIdsToRemove.includes(e.id);\n            })\n          });\n        }\n\n        if (hasDefaultNodes) {\n          nodesToRemove.forEach(function (node) {\n            nodeInternals[\"delete\"](node.id);\n          });\n          store.setState({\n            nodeInternals: new Map(nodeInternals)\n          });\n        }\n      }\n\n      if (edgeIdsToRemove.length > 0) {\n        onEdgesDelete === null || onEdgesDelete === void 0 ? void 0 : onEdgesDelete(edgesToRemove);\n\n        if (onEdgesChange) {\n          var edgeChanges = edgeIdsToRemove.map(function (id) {\n            return {\n              id: id,\n              type: 'remove'\n            };\n          });\n          onEdgesChange(edgeChanges);\n        }\n      }\n\n      if (nodesToRemove.length > 0) {\n        onNodesDelete === null || onNodesDelete === void 0 ? void 0 : onNodesDelete(nodesToRemove);\n\n        if (onNodesChange) {\n          var nodeChanges = nodesToRemove.map(function (n) {\n            return {\n              id: n.id,\n              type: 'remove'\n            };\n          });\n          onNodesChange(nodeChanges);\n        }\n      }\n\n      store.setState({\n        nodesSelectionActive: false\n      });\n    }\n  }, [deleteKeyPressed, onNodesChange, onEdgesChange]);\n  useEffect(function () {\n    store.setState({\n      multiSelectionActive: multiSelectionKeyPressed\n    });\n  }, [multiSelectionKeyPressed]);\n};\n\nfunction useResizeHandler(rendererNode) {\n  var store = useStoreApi();\n  useEffect(function () {\n    var resizeObserver;\n\n    var updateDimensions = function updateDimensions() {\n      if (!rendererNode.current) {\n        return;\n      }\n\n      var size = getDimensions(rendererNode.current);\n\n      if (size.height === 0 || size.width === 0) {\n        console.warn('The React Flow parent container needs a width and a height to render the graph.');\n      }\n\n      store.setState({\n        width: size.width || 500,\n        height: size.height || 500\n      });\n    };\n\n    updateDimensions();\n    window.onresize = updateDimensions;\n\n    if (rendererNode.current) {\n      resizeObserver = new ResizeObserver(function () {\n        return updateDimensions();\n      });\n      resizeObserver.observe(rendererNode.current);\n    }\n\n    return function () {\n      window.onresize = null;\n\n      if (resizeObserver && rendererNode.current) {\n        resizeObserver.unobserve(rendererNode.current);\n      }\n    };\n  }, []);\n}\n\nvar viewChanged = function viewChanged(prevViewport, eventViewport) {\n  return prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\n};\n\nvar eventToFlowTransform = function eventToFlowTransform(eventViewport) {\n  return {\n    x: eventViewport.x,\n    y: eventViewport.y,\n    zoom: eventViewport.k\n  };\n};\n\nvar isWrappedWithClass = function isWrappedWithClass(event, className) {\n  return event.target.closest(\".\".concat(className));\n};\n\nvar selector$8 = function selector(s) {\n  return {\n    d3Zoom: s.d3Zoom,\n    d3Selection: s.d3Selection,\n    d3ZoomHandler: s.d3ZoomHandler\n  };\n};\n\nvar ZoomPane = function ZoomPane(_ref) {\n  var onMove = _ref.onMove,\n      onMoveStart = _ref.onMoveStart,\n      onMoveEnd = _ref.onMoveEnd,\n      _ref$zoomOnScroll = _ref.zoomOnScroll,\n      zoomOnScroll = _ref$zoomOnScroll === void 0 ? true : _ref$zoomOnScroll,\n      _ref$zoomOnPinch = _ref.zoomOnPinch,\n      zoomOnPinch = _ref$zoomOnPinch === void 0 ? true : _ref$zoomOnPinch,\n      _ref$panOnScroll = _ref.panOnScroll,\n      panOnScroll = _ref$panOnScroll === void 0 ? false : _ref$panOnScroll,\n      _ref$panOnScrollSpeed = _ref.panOnScrollSpeed,\n      panOnScrollSpeed = _ref$panOnScrollSpeed === void 0 ? 0.5 : _ref$panOnScrollSpeed,\n      _ref$panOnScrollMode = _ref.panOnScrollMode,\n      panOnScrollMode = _ref$panOnScrollMode === void 0 ? PanOnScrollMode.Free : _ref$panOnScrollMode,\n      _ref$zoomOnDoubleClic = _ref.zoomOnDoubleClick,\n      zoomOnDoubleClick = _ref$zoomOnDoubleClic === void 0 ? true : _ref$zoomOnDoubleClic,\n      selectionKeyPressed = _ref.selectionKeyPressed,\n      elementsSelectable = _ref.elementsSelectable,\n      _ref$panOnDrag = _ref.panOnDrag,\n      panOnDrag = _ref$panOnDrag === void 0 ? true : _ref$panOnDrag,\n      _ref$defaultPosition = _ref.defaultPosition,\n      defaultPosition = _ref$defaultPosition === void 0 ? [0, 0] : _ref$defaultPosition,\n      _ref$defaultZoom = _ref.defaultZoom,\n      defaultZoom = _ref$defaultZoom === void 0 ? 1 : _ref$defaultZoom,\n      zoomActivationKeyCode = _ref.zoomActivationKeyCode,\n      _ref$preventScrolling = _ref.preventScrolling,\n      preventScrolling = _ref$preventScrolling === void 0 ? true : _ref$preventScrolling,\n      children = _ref.children,\n      noWheelClassName = _ref.noWheelClassName,\n      noPanClassName = _ref.noPanClassName;\n  var store = useStoreApi();\n  var zoomPane = useRef(null);\n  var prevTransform = useRef({\n    x: 0,\n    y: 0,\n    zoom: 0\n  });\n\n  var _useStore = useStore(selector$8, shallow),\n      d3Zoom = _useStore.d3Zoom,\n      d3Selection = _useStore.d3Selection,\n      d3ZoomHandler = _useStore.d3ZoomHandler;\n\n  var zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);\n  useResizeHandler(zoomPane);\n  useEffect(function () {\n    if (zoomPane.current) {\n      var _store$getState = store.getState(),\n          minZoom = _store$getState.minZoom,\n          maxZoom = _store$getState.maxZoom,\n          translateExtent = _store$getState.translateExtent;\n\n      var d3ZoomInstance = zoom().scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n      var selection = select(zoomPane.current).call(d3ZoomInstance);\n      var clampedX = clamp(defaultPosition[0], translateExtent[0][0], translateExtent[1][0]);\n      var clampedY = clamp(defaultPosition[1], translateExtent[0][1], translateExtent[1][1]);\n      var clampedZoom = clamp(defaultZoom, minZoom, maxZoom);\n      var updatedTransform = zoomIdentity.translate(clampedX, clampedY).scale(clampedZoom);\n      d3ZoomInstance.transform(selection, updatedTransform);\n      store.setState({\n        d3Zoom: d3ZoomInstance,\n        d3Selection: selection,\n        d3ZoomHandler: selection.on('wheel.zoom'),\n        // we need to pass transform because zoom handler is not registered when we set the initial transform\n        transform: [clampedX, clampedY, clampedZoom]\n      });\n    }\n  }, []);\n  useEffect(function () {\n    if (d3Selection && d3Zoom) {\n      if (panOnScroll && !zoomActivationKeyPressed) {\n        d3Selection.on('wheel', function (event) {\n          if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n          }\n\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          var currentZoom = d3Selection.property('__zoom').k || 1;\n\n          if (event.ctrlKey && zoomOnPinch) {\n            var point = pointer(event); // taken from https://github.com/d3/d3-zoom/blob/master/src/zoom.js\n\n            var pinchDelta = -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * 10;\n\n            var _zoom = currentZoom * Math.pow(2, pinchDelta);\n\n            d3Zoom.scaleTo(d3Selection, _zoom, point);\n            return;\n          } // increase scroll speed in firefox\n          // firefox: deltaMode === 1; chrome: deltaMode === 0\n\n\n          var deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n          var deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n          var deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n          d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed);\n        }).on('wheel.zoom', null);\n      } else if (typeof d3ZoomHandler !== 'undefined') {\n        d3Selection.on('wheel', function (event) {\n          if (!preventScrolling || isWrappedWithClass(event, noWheelClassName)) {\n            return null;\n          }\n\n          event.preventDefault();\n        }).on('wheel.zoom', d3ZoomHandler);\n      }\n    }\n  }, [panOnScroll, panOnScrollMode, d3Selection, d3Zoom, d3ZoomHandler, zoomActivationKeyPressed, zoomOnPinch, preventScrolling, noWheelClassName]);\n  useEffect(function () {\n    if (d3Zoom) {\n      if (selectionKeyPressed) {\n        d3Zoom.on('zoom', null);\n      } else {\n        d3Zoom.on('zoom', function (event) {\n          store.setState({\n            transform: [event.transform.x, event.transform.y, event.transform.k]\n          });\n\n          if (onMove) {\n            var flowTransform = eventToFlowTransform(event.transform);\n            onMove(event.sourceEvent, flowTransform);\n          }\n        });\n      }\n    }\n  }, [selectionKeyPressed, d3Zoom, onMove]);\n  useEffect(function () {\n    if (d3Zoom) {\n      if (onMoveStart) {\n        d3Zoom.on('start', function (event) {\n          var flowTransform = eventToFlowTransform(event.transform);\n          prevTransform.current = flowTransform;\n          onMoveStart(event.sourceEvent, flowTransform);\n        });\n      } else {\n        d3Zoom.on('start', null);\n      }\n    }\n  }, [d3Zoom, onMoveStart]);\n  useEffect(function () {\n    if (d3Zoom) {\n      if (onMoveEnd) {\n        d3Zoom.on('end', function (event) {\n          if (viewChanged(prevTransform.current, event.transform)) {\n            var flowTransform = eventToFlowTransform(event.transform);\n            prevTransform.current = flowTransform;\n            onMoveEnd(event.sourceEvent, flowTransform);\n          }\n        });\n      } else {\n        d3Zoom.on('end', null);\n      }\n    }\n  }, [d3Zoom, onMoveEnd]);\n  useEffect(function () {\n    if (d3Zoom) {\n      d3Zoom.filter(function (event) {\n        var zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        var pinchZoom = zoomOnPinch && event.ctrlKey; // if all interactions are disabled, we prevent all zoom events\n\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n          return false;\n        } // during a selection we prevent all other interactions\n\n\n        if (selectionKeyPressed) {\n          return false;\n        } // if zoom on double click is disabled, we prevent the double click event\n\n\n        if (!zoomOnDoubleClick && event.type === 'dblclick') {\n          return false;\n        } // if the target element is inside an element with the nowheel class, we prevent zooming\n\n\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n          return false;\n        } // if the target element is inside an element with the nopan class, we prevent panning\n\n\n        if (isWrappedWithClass(event, noPanClassName) && event.type !== 'wheel') {\n          return false;\n        }\n\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n          return false;\n        } // when there is no scroll handling enabled, we prevent all wheel events\n\n\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n          return false;\n        } // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n\n\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n          return false;\n        } // default filter for d3-zoom\n\n\n        return (!event.ctrlKey || event.type === 'wheel') && !event.button;\n      });\n    }\n  }, [d3Zoom, zoomOnScroll, zoomOnPinch, panOnScroll, zoomOnDoubleClick, panOnDrag, selectionKeyPressed, elementsSelectable, zoomActivationKeyPressed]);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__renderer react-flow__container\",\n      ref: zoomPane\n    }, children)\n  );\n};\n\nfunction ownKeys$6(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$6(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction getMousePosition(event, containerBounds) {\n  return {\n    x: event.clientX - containerBounds.left,\n    y: event.clientY - containerBounds.top\n  };\n}\n\nvar selector$7 = function selector(s) {\n  return {\n    userSelectionActive: s.userSelectionActive,\n    elementsSelectable: s.elementsSelectable\n  };\n};\n\nvar initialRect = {\n  startX: 0,\n  startY: 0,\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  draw: false\n};\nvar UserSelection =\n/*#__PURE__*/\nmemo(function (_ref) {\n  var selectionKeyPressed = _ref.selectionKeyPressed;\n  var store = useStoreApi();\n  var prevSelectedNodesCount = useRef(0);\n  var prevSelectedEdgesCount = useRef(0);\n  var containerBounds = useRef();\n\n  var _useState = useState(initialRect),\n      _useState2 = _slicedToArray(_useState, 2),\n      userSelectionRect = _useState2[0],\n      setUserSelectionRect = _useState2[1];\n\n  var _useStore = useStore(selector$7, shallow),\n      userSelectionActive = _useStore.userSelectionActive,\n      elementsSelectable = _useStore.elementsSelectable;\n\n  var renderUserSelectionPane = userSelectionActive || selectionKeyPressed;\n  var resetUserSelection = useCallback(function () {\n    setUserSelectionRect(initialRect);\n    store.setState({\n      userSelectionActive: false\n    });\n    prevSelectedNodesCount.current = 0;\n    prevSelectedEdgesCount.current = 0;\n  }, []);\n  var onMouseDown = useCallback(function (event) {\n    var reactFlowNode = event.target.closest('.react-flow');\n    containerBounds.current = reactFlowNode.getBoundingClientRect();\n    var mousePos = getMousePosition(event, containerBounds.current);\n    setUserSelectionRect({\n      width: 0,\n      height: 0,\n      startX: mousePos.x,\n      startY: mousePos.y,\n      x: mousePos.x,\n      y: mousePos.y,\n      draw: true\n    });\n    store.setState({\n      userSelectionActive: true,\n      nodesSelectionActive: false\n    });\n  }, []);\n\n  var onMouseMove = function onMouseMove(event) {\n    var _userSelectionRect$st, _userSelectionRect$st2;\n\n    if (!selectionKeyPressed || !userSelectionRect.draw || !containerBounds.current) {\n      return;\n    }\n\n    var mousePos = getMousePosition(event, containerBounds.current);\n    var startX = (_userSelectionRect$st = userSelectionRect.startX) !== null && _userSelectionRect$st !== void 0 ? _userSelectionRect$st : 0;\n    var startY = (_userSelectionRect$st2 = userSelectionRect.startY) !== null && _userSelectionRect$st2 !== void 0 ? _userSelectionRect$st2 : 0;\n\n    var nextUserSelectRect = _objectSpread$6(_objectSpread$6({}, userSelectionRect), {}, {\n      x: mousePos.x < startX ? mousePos.x : startX,\n      y: mousePos.y < startY ? mousePos.y : startY,\n      width: Math.abs(mousePos.x - startX),\n      height: Math.abs(mousePos.y - startY)\n    });\n\n    var _store$getState = store.getState(),\n        nodeInternals = _store$getState.nodeInternals,\n        edges = _store$getState.edges,\n        transform = _store$getState.transform,\n        onNodesChange = _store$getState.onNodesChange,\n        onEdgesChange = _store$getState.onEdgesChange;\n\n    var nodes = Array.from(nodeInternals).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n\n      _ref3[0];\n      var node = _ref3[1];\n      return node;\n    });\n    var selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform, false, true);\n    var selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map(function (e) {\n      return e.id;\n    });\n    var selectedNodeIds = selectedNodes.map(function (n) {\n      return n.id;\n    });\n\n    if (prevSelectedNodesCount.current !== selectedNodeIds.length) {\n      prevSelectedNodesCount.current = selectedNodeIds.length;\n      var changes = getSelectionChanges(nodes, selectedNodeIds);\n\n      if (changes.length) {\n        onNodesChange === null || onNodesChange === void 0 ? void 0 : onNodesChange(changes);\n      }\n    }\n\n    if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {\n      prevSelectedEdgesCount.current = selectedEdgeIds.length;\n\n      var _changes = getSelectionChanges(edges, selectedEdgeIds);\n\n      if (_changes.length) {\n        onEdgesChange === null || onEdgesChange === void 0 ? void 0 : onEdgesChange(_changes);\n      }\n    }\n\n    setUserSelectionRect(nextUserSelectRect);\n  };\n\n  var onMouseUp = useCallback(function () {\n    store.setState({\n      nodesSelectionActive: prevSelectedNodesCount.current > 0\n    });\n    resetUserSelection();\n  }, []);\n  var onMouseLeave = useCallback(function () {\n    store.setState({\n      nodesSelectionActive: false\n    });\n    resetUserSelection();\n  }, []);\n\n  if (!elementsSelectable || !renderUserSelectionPane) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__selectionpane react-flow__container\",\n      onMouseDown: onMouseDown,\n      onMouseMove: onMouseMove,\n      onMouseUp: onMouseUp,\n      onMouseLeave: onMouseLeave\n    }, userSelectionRect.draw &&\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__selection react-flow__container\",\n      style: {\n        width: userSelectionRect.width,\n        height: userSelectionRect.height,\n        transform: \"translate(\".concat(userSelectionRect.x, \"px, \").concat(userSelectionRect.y, \"px)\")\n      }\n    }))\n  );\n});\n\nvar selector$6 = function selector(s) {\n  return {\n    transform: s.transform,\n    selectedNodesBbox: s.selectedNodesBbox,\n    userSelectionActive: s.userSelectionActive,\n    selectedNodes: Array.from(s.nodeInternals).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      _ref2[0];\n      var n = _ref2[1];\n      return n.selected;\n    }).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      _ref4[0];\n      var n = _ref4[1];\n      return n;\n    }),\n    snapToGrid: s.snapToGrid,\n    snapGrid: s.snapGrid,\n    updateNodePosition: s.updateNodePosition\n  };\n};\n\nfunction NodesSelection(_ref5) {\n  var onSelectionDragStart = _ref5.onSelectionDragStart,\n      onSelectionDrag = _ref5.onSelectionDrag,\n      onSelectionDragStop = _ref5.onSelectionDragStop,\n      onSelectionContextMenu = _ref5.onSelectionContextMenu,\n      noPanClassName = _ref5.noPanClassName;\n\n  var _useStore = useStore(selector$6, shallow),\n      transform = _useStore.transform,\n      userSelectionActive = _useStore.userSelectionActive,\n      selectedNodes = _useStore.selectedNodes,\n      snapToGrid = _useStore.snapToGrid,\n      snapGrid = _useStore.snapGrid,\n      updateNodePosition = _useStore.updateNodePosition;\n\n  var _transform = _slicedToArray(transform, 3),\n      tX = _transform[0],\n      tY = _transform[1],\n      tScale = _transform[2];\n\n  var nodeRef = useRef(null);\n  var grid = useMemo(function () {\n    return snapToGrid ? snapGrid : [1, 1];\n  }, [snapToGrid, snapGrid]);\n  var style = useMemo(function () {\n    return {\n      transform: \"translate(\".concat(tX, \"px,\").concat(tY, \"px) scale(\").concat(tScale, \")\")\n    };\n  }, [tX, tY, tScale]);\n  var selectedNodesBbox = useMemo(function () {\n    return getRectOfNodes(selectedNodes);\n  }, [selectedNodes]);\n  var innerStyle = useMemo(function () {\n    return {\n      width: selectedNodesBbox.width,\n      height: selectedNodesBbox.height,\n      top: selectedNodesBbox.y,\n      left: selectedNodesBbox.x\n    };\n  }, [selectedNodesBbox]);\n\n  var _onStart = useCallback(function (event) {\n    onSelectionDragStart === null || onSelectionDragStart === void 0 ? void 0 : onSelectionDragStart(event, selectedNodes);\n  }, [onSelectionDragStart, selectedNodes]);\n\n  var _onDrag = useCallback(function (event, data) {\n    updateNodePosition({\n      diff: {\n        x: data.deltaX,\n        y: data.deltaY\n      },\n      dragging: true\n    });\n    onSelectionDrag === null || onSelectionDrag === void 0 ? void 0 : onSelectionDrag(event, selectedNodes);\n  }, [onSelectionDrag, selectedNodes, updateNodePosition]);\n\n  var _onStop = useCallback(function (event) {\n    updateNodePosition({\n      dragging: false\n    });\n    onSelectionDragStop === null || onSelectionDragStop === void 0 ? void 0 : onSelectionDragStop(event, selectedNodes);\n  }, [selectedNodes, onSelectionDragStop]);\n\n  var onContextMenu = useCallback(function (event) {\n    onSelectionContextMenu === null || onSelectionContextMenu === void 0 ? void 0 : onSelectionContextMenu(event, selectedNodes);\n  }, [onSelectionContextMenu, selectedNodes]);\n\n  if (!(selectedNodes !== null && selectedNodes !== void 0 && selectedNodes.length) || userSelectionActive) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: cc(['react-flow__nodesselection', 'react-flow__container', noPanClassName]),\n      style: style\n    },\n    /*#__PURE__*/\n    React__default.createElement(DraggableCore, {\n      scale: tScale,\n      grid: grid,\n      onStart: function onStart(event) {\n        return _onStart(event);\n      },\n      onDrag: function onDrag(event, data) {\n        return _onDrag(event, data);\n      },\n      onStop: function onStop(event) {\n        return _onStop(event);\n      },\n      nodeRef: nodeRef,\n      enableUserSelectHack: false\n    },\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      ref: nodeRef,\n      className: \"react-flow__nodesselection-rect\",\n      onContextMenu: onContextMenu,\n      style: innerStyle\n    })))\n  );\n}\n\nvar NodesSelection$1 =\n/*#__PURE__*/\nmemo(NodesSelection);\n\nvar selector$5 = function selector(s) {\n  return {\n    resetSelectedElements: s.resetSelectedElements,\n    nodesSelectionActive: s.nodesSelectionActive\n  };\n};\n\nvar FlowRenderer = function FlowRenderer(_ref) {\n  var children = _ref.children,\n      onPaneClick = _ref.onPaneClick,\n      onPaneContextMenu = _ref.onPaneContextMenu,\n      onPaneScroll = _ref.onPaneScroll,\n      deleteKeyCode = _ref.deleteKeyCode,\n      onMove = _ref.onMove,\n      onMoveStart = _ref.onMoveStart,\n      onMoveEnd = _ref.onMoveEnd,\n      selectionKeyCode = _ref.selectionKeyCode,\n      multiSelectionKeyCode = _ref.multiSelectionKeyCode,\n      zoomActivationKeyCode = _ref.zoomActivationKeyCode,\n      elementsSelectable = _ref.elementsSelectable,\n      zoomOnScroll = _ref.zoomOnScroll,\n      zoomOnPinch = _ref.zoomOnPinch,\n      panOnScroll = _ref.panOnScroll,\n      panOnScrollSpeed = _ref.panOnScrollSpeed,\n      panOnScrollMode = _ref.panOnScrollMode,\n      zoomOnDoubleClick = _ref.zoomOnDoubleClick,\n      panOnDrag = _ref.panOnDrag,\n      defaultPosition = _ref.defaultPosition,\n      defaultZoom = _ref.defaultZoom,\n      preventScrolling = _ref.preventScrolling,\n      onSelectionDragStart = _ref.onSelectionDragStart,\n      onSelectionDrag = _ref.onSelectionDrag,\n      onSelectionDragStop = _ref.onSelectionDragStop,\n      onSelectionContextMenu = _ref.onSelectionContextMenu,\n      noWheelClassName = _ref.noWheelClassName,\n      noPanClassName = _ref.noPanClassName;\n  var store = useStoreApi();\n\n  var _useStore = useStore(selector$5, shallow),\n      resetSelectedElements = _useStore.resetSelectedElements,\n      nodesSelectionActive = _useStore.nodesSelectionActive;\n\n  var selectionKeyPressed = useKeyPress(selectionKeyCode);\n  useGlobalKeyHandler({\n    deleteKeyCode: deleteKeyCode,\n    multiSelectionKeyCode: multiSelectionKeyCode\n  });\n  var onClick = useCallback(function (event) {\n    onPaneClick === null || onPaneClick === void 0 ? void 0 : onPaneClick(event);\n    resetSelectedElements();\n    store.setState({\n      nodesSelectionActive: false\n    });\n  }, [onPaneClick]);\n  var onContextMenu = useCallback(function (event) {\n    return onPaneContextMenu === null || onPaneContextMenu === void 0 ? void 0 : onPaneContextMenu(event);\n  }, [onPaneContextMenu]);\n  var onWheel = useCallback(function (event) {\n    return onPaneScroll === null || onPaneScroll === void 0 ? void 0 : onPaneScroll(event);\n  }, [onPaneScroll]);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(ZoomPane, {\n      onMove: onMove,\n      onMoveStart: onMoveStart,\n      onMoveEnd: onMoveEnd,\n      selectionKeyPressed: selectionKeyPressed,\n      elementsSelectable: elementsSelectable,\n      zoomOnScroll: zoomOnScroll,\n      zoomOnPinch: zoomOnPinch,\n      panOnScroll: panOnScroll,\n      panOnScrollSpeed: panOnScrollSpeed,\n      panOnScrollMode: panOnScrollMode,\n      zoomOnDoubleClick: zoomOnDoubleClick,\n      panOnDrag: panOnDrag,\n      defaultPosition: defaultPosition,\n      defaultZoom: defaultZoom,\n      zoomActivationKeyCode: zoomActivationKeyCode,\n      preventScrolling: preventScrolling,\n      noWheelClassName: noWheelClassName,\n      noPanClassName: noPanClassName\n    }, children,\n    /*#__PURE__*/\n    React__default.createElement(UserSelection, {\n      selectionKeyPressed: selectionKeyPressed\n    }), nodesSelectionActive &&\n    /*#__PURE__*/\n    React__default.createElement(NodesSelection$1, {\n      onSelectionDragStart: onSelectionDragStart,\n      onSelectionDrag: onSelectionDrag,\n      onSelectionDragStop: onSelectionDragStop,\n      onSelectionContextMenu: onSelectionContextMenu,\n      noPanClassName: noPanClassName\n    }),\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__pane react-flow__container\",\n      onClick: onClick,\n      onContextMenu: onContextMenu,\n      onWheel: onWheel\n    }))\n  );\n};\n\nFlowRenderer.displayName = 'FlowRenderer';\nvar FlowRenderer$1 =\n/*#__PURE__*/\nmemo(FlowRenderer);\n\nfunction useVisibleNodes(onlyRenderVisible) {\n  var nodes = useStore(useCallback(function (s) {\n    return onlyRenderVisible ? getNodesInside(s.nodeInternals, {\n      x: 0,\n      y: 0,\n      width: s.width,\n      height: s.height\n    }, s.transform, true) : Array.from(s.nodeInternals).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      _ref2[0];\n      var node = _ref2[1];\n      return node;\n    });\n  }, [onlyRenderVisible]));\n  return nodes;\n}\n\nvar selector$4 = function selector(s) {\n  return {\n    scale: s.transform[2],\n    nodesDraggable: s.nodesDraggable,\n    nodesConnectable: s.nodesConnectable,\n    elementsSelectable: s.elementsSelectable,\n    updateNodeDimensions: s.updateNodeDimensions,\n    snapGrid: s.snapGrid,\n    snapToGrid: s.snapToGrid,\n    nodeInternals: s.nodeInternals\n  };\n};\n\nvar NodeRenderer = function NodeRenderer(props) {\n  var _useStore = useStore(selector$4, shallow),\n      scale = _useStore.scale,\n      nodesDraggable = _useStore.nodesDraggable,\n      nodesConnectable = _useStore.nodesConnectable,\n      elementsSelectable = _useStore.elementsSelectable,\n      updateNodeDimensions = _useStore.updateNodeDimensions,\n      snapGrid = _useStore.snapGrid,\n      snapToGrid = _useStore.snapToGrid;\n\n  var nodes = useVisibleNodes(props.onlyRenderVisibleElements);\n  var resizeObserverRef = useRef();\n  var resizeObserver = useMemo(function () {\n    if (typeof ResizeObserver === 'undefined') {\n      return null;\n    }\n\n    var observer = new ResizeObserver(function (entries) {\n      var updates = entries.map(function (entry) {\n        return {\n          id: entry.target.getAttribute('data-id'),\n          nodeElement: entry.target,\n          forceUpdate: true\n        };\n      });\n      updateNodeDimensions(updates);\n    });\n    resizeObserverRef.current = observer;\n    return observer;\n  }, []);\n  useEffect(function () {\n    return function () {\n      var _resizeObserverRef$cu;\n\n      resizeObserverRef === null || resizeObserverRef === void 0 ? void 0 : (_resizeObserverRef$cu = resizeObserverRef.current) === null || _resizeObserverRef$cu === void 0 ? void 0 : _resizeObserverRef$cu.disconnect();\n    };\n  }, []);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__nodes react-flow__container\"\n    }, nodes.map(function (node) {\n      var _node$positionAbsolut, _node$positionAbsolut2, _node$positionAbsolut3, _node$positionAbsolut4, _node$z;\n\n      var nodeType = node.type || 'default';\n\n      if (!props.nodeTypes[nodeType]) {\n        console.warn(\"Node type \\\"\".concat(nodeType, \"\\\" not found. Using fallback type \\\"default\\\".\"));\n      }\n\n      var NodeComponent = props.nodeTypes[nodeType] || props.nodeTypes[\"default\"];\n      var isDraggable = !!(node.draggable || nodesDraggable && typeof node.draggable === 'undefined');\n      var isSelectable = !!(node.selectable || elementsSelectable && typeof node.selectable === 'undefined');\n      var isConnectable = !!(node.connectable || nodesConnectable && typeof node.connectable === 'undefined');\n      return (\n        /*#__PURE__*/\n        React__default.createElement(NodeComponent, {\n          key: node.id,\n          id: node.id,\n          className: node.className,\n          style: node.style,\n          type: nodeType,\n          data: node.data,\n          sourcePosition: node.sourcePosition || Position.Bottom,\n          targetPosition: node.targetPosition || Position.Top,\n          hidden: node.hidden,\n          xPos: (_node$positionAbsolut = (_node$positionAbsolut2 = node.positionAbsolute) === null || _node$positionAbsolut2 === void 0 ? void 0 : _node$positionAbsolut2.x) !== null && _node$positionAbsolut !== void 0 ? _node$positionAbsolut : 0,\n          yPos: (_node$positionAbsolut3 = (_node$positionAbsolut4 = node.positionAbsolute) === null || _node$positionAbsolut4 === void 0 ? void 0 : _node$positionAbsolut4.y) !== null && _node$positionAbsolut3 !== void 0 ? _node$positionAbsolut3 : 0,\n          dragging: !!node.dragging,\n          snapGrid: snapGrid,\n          snapToGrid: snapToGrid,\n          selectNodesOnDrag: props.selectNodesOnDrag,\n          onClick: props.onNodeClick,\n          onMouseEnter: props.onNodeMouseEnter,\n          onMouseMove: props.onNodeMouseMove,\n          onMouseLeave: props.onNodeMouseLeave,\n          onContextMenu: props.onNodeContextMenu,\n          onNodeDoubleClick: props.onNodeDoubleClick,\n          onNodeDragStart: props.onNodeDragStart,\n          onNodeDrag: props.onNodeDrag,\n          onNodeDragStop: props.onNodeDragStop,\n          scale: scale,\n          selected: !!node.selected,\n          isDraggable: isDraggable,\n          isSelectable: isSelectable,\n          isConnectable: isConnectable,\n          resizeObserver: resizeObserver,\n          dragHandle: node.dragHandle,\n          zIndex: (_node$z = node.z) !== null && _node$z !== void 0 ? _node$z : 0,\n          isParent: !!node.isParent,\n          noDragClassName: props.noDragClassName,\n          noPanClassName: props.noPanClassName\n        })\n      );\n    }))\n  );\n};\n\nNodeRenderer.displayName = 'NodeRenderer';\nvar NodeRenderer$1 =\n/*#__PURE__*/\nmemo(NodeRenderer);\n\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar selector$3 = function selector(s) {\n  return {\n    nodeInternals: s.nodeInternals,\n    transform: s.transform\n  };\n};\n\nvar ConnectionLine = function ConnectionLine(_ref) {\n  var _fromNode$current$han, _fromNode$current$han2, _fromNode$current$wid, _fromNode$current, _fromNode$current$hei, _fromNode$current2, _fromNode$current$pos, _fromNode$current$pos2;\n\n  var connectionNodeId = _ref.connectionNodeId,\n      connectionHandleId = _ref.connectionHandleId,\n      connectionHandleType = _ref.connectionHandleType,\n      connectionLineStyle = _ref.connectionLineStyle,\n      connectionPositionX = _ref.connectionPositionX,\n      connectionPositionY = _ref.connectionPositionY,\n      _ref$connectionLineTy = _ref.connectionLineType,\n      connectionLineType = _ref$connectionLineTy === void 0 ? ConnectionLineType.Bezier : _ref$connectionLineTy,\n      isConnectable = _ref.isConnectable,\n      CustomConnectionLineComponent = _ref.CustomConnectionLineComponent;\n  var nodeId = connectionNodeId;\n  var handleId = connectionHandleId;\n\n  var _useStore = useStore(selector$3, shallow),\n      nodeInternals = _useStore.nodeInternals,\n      transform = _useStore.transform;\n\n  var fromNode = useRef(nodeInternals.get(nodeId));\n\n  if (!fromNode.current || !fromNode.current || !isConnectable || !((_fromNode$current$han = fromNode.current.handleBounds) !== null && _fromNode$current$han !== void 0 && _fromNode$current$han[connectionHandleType])) {\n    return null;\n  }\n\n  var handleBound = (_fromNode$current$han2 = fromNode.current.handleBounds) === null || _fromNode$current$han2 === void 0 ? void 0 : _fromNode$current$han2[connectionHandleType];\n  var fromHandle = handleId ? handleBound === null || handleBound === void 0 ? void 0 : handleBound.find(function (d) {\n    return d.id === handleId;\n  }) : handleBound === null || handleBound === void 0 ? void 0 : handleBound[0];\n  var fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : ((_fromNode$current$wid = (_fromNode$current = fromNode.current) === null || _fromNode$current === void 0 ? void 0 : _fromNode$current.width) !== null && _fromNode$current$wid !== void 0 ? _fromNode$current$wid : 0) / 2;\n  var fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : (_fromNode$current$hei = (_fromNode$current2 = fromNode.current) === null || _fromNode$current2 === void 0 ? void 0 : _fromNode$current2.height) !== null && _fromNode$current$hei !== void 0 ? _fromNode$current$hei : 0;\n  var fromX = (((_fromNode$current$pos = fromNode.current.positionAbsolute) === null || _fromNode$current$pos === void 0 ? void 0 : _fromNode$current$pos.x) || 0) + fromHandleX;\n  var fromY = (((_fromNode$current$pos2 = fromNode.current.positionAbsolute) === null || _fromNode$current$pos2 === void 0 ? void 0 : _fromNode$current$pos2.y) || 0) + fromHandleY;\n  var toX = (connectionPositionX - transform[0]) / transform[2];\n  var toY = (connectionPositionY - transform[1]) / transform[2];\n  var fromPosition = fromHandle === null || fromHandle === void 0 ? void 0 : fromHandle.position;\n  var toPosition;\n\n  switch (fromPosition) {\n    case Position.Left:\n      toPosition = Position.Right;\n      break;\n\n    case Position.Right:\n      toPosition = Position.Left;\n      break;\n\n    case Position.Top:\n      toPosition = Position.Bottom;\n      break;\n\n    case Position.Bottom:\n      toPosition = Position.Top;\n      break;\n  }\n\n  var sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition;\n\n  switch (connectionHandleType) {\n    case 'source':\n      {\n        sourceX = fromX;\n        sourceY = fromY;\n        sourcePosition = fromPosition;\n        targetX = toX;\n        targetY = toY;\n        targetPosition = toPosition;\n      }\n      break;\n\n    case 'target':\n      {\n        sourceX = toX;\n        sourceY = toY;\n        sourcePosition = toPosition;\n        targetX = fromX;\n        targetY = fromY;\n        targetPosition = fromPosition;\n      }\n      break;\n  }\n\n  if (CustomConnectionLineComponent) {\n    return (\n      /*#__PURE__*/\n      React__default.createElement(\"g\", {\n        className: \"react-flow__connection\"\n      },\n      /*#__PURE__*/\n      React__default.createElement(CustomConnectionLineComponent, {\n        sourceX: sourceX,\n        sourceY: sourceY,\n        sourcePosition: sourcePosition,\n        targetX: targetX,\n        targetY: targetY,\n        targetPosition: targetPosition,\n        connectionLineType: connectionLineType,\n        connectionLineStyle: connectionLineStyle,\n        fromNode: fromNode.current,\n        fromHandle: fromHandle,\n        // backward compatibility, mark as deprecated?\n        sourceNode: fromNode.current,\n        sourceHandle: fromHandle\n      }))\n    );\n  }\n\n  var dAttr = '';\n  var pathParams = {\n    sourceX: sourceX,\n    sourceY: sourceY,\n    sourcePosition: sourcePosition,\n    targetX: targetX,\n    targetY: targetY,\n    targetPosition: targetPosition\n  };\n\n  if (connectionLineType === ConnectionLineType.Bezier) {\n    // we assume the destination position is opposite to the source position\n    dAttr = getBezierPath(pathParams);\n  } else if (connectionLineType === ConnectionLineType.Step) {\n    dAttr = getSmoothStepPath(_objectSpread$5(_objectSpread$5({}, pathParams), {}, {\n      borderRadius: 0\n    }));\n  } else if (connectionLineType === ConnectionLineType.SmoothStep) {\n    dAttr = getSmoothStepPath(pathParams);\n  } else if (connectionLineType === ConnectionLineType.SimpleBezier) {\n    dAttr = getSimpleBezierPath(pathParams);\n  } else {\n    dAttr = \"M\".concat(sourceX, \",\").concat(sourceY, \" \").concat(targetX, \",\").concat(targetY);\n  }\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"g\", {\n      className: \"react-flow__connection\"\n    },\n    /*#__PURE__*/\n    React__default.createElement(\"path\", {\n      d: dAttr,\n      className: \"react-flow__connection-path\",\n      style: connectionLineStyle\n    }))\n  );\n};\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nvar _MarkerSymbols;\n\nvar ArrowSymbol = function ArrowSymbol(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'none' : _ref$color,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"polyline\", {\n      stroke: color,\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeWidth: strokeWidth,\n      fill: \"none\",\n      points: \"-5,-4 0,0 -5,4\"\n    })\n  );\n};\n\nvar ArrowClosedSymbol = function ArrowClosedSymbol(_ref2) {\n  var _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'none' : _ref2$color,\n      _ref2$strokeWidth = _ref2.strokeWidth,\n      strokeWidth = _ref2$strokeWidth === void 0 ? 1 : _ref2$strokeWidth;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"polyline\", {\n      stroke: color,\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeWidth: strokeWidth,\n      fill: color,\n      points: \"-5,-4 0,0 -5,4 -5,-4\"\n    })\n  );\n};\n\nvar MarkerSymbols = (_MarkerSymbols = {}, _defineProperty(_MarkerSymbols, MarkerType.Arrow, ArrowSymbol), _defineProperty(_MarkerSymbols, MarkerType.ArrowClosed, ArrowClosedSymbol), _MarkerSymbols);\n\nfunction useMarkerSymbol(type) {\n  var symbol = useMemo(function () {\n    var symbolExists = MarkerSymbols.hasOwnProperty(type);\n\n    if (!symbolExists) {\n      console.warn(\"marker type \\\"\".concat(type, \"\\\" doesn't exist.\"));\n      return function () {\n        return null;\n      };\n    }\n\n    return MarkerSymbols[type];\n  }, [type]);\n  return symbol;\n}\n\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar Marker = function Marker(_ref) {\n  var id = _ref.id,\n      type = _ref.type,\n      color = _ref.color,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 12.5 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 12.5 : _ref$height,\n      _ref$markerUnits = _ref.markerUnits,\n      markerUnits = _ref$markerUnits === void 0 ? 'strokeWidth' : _ref$markerUnits,\n      strokeWidth = _ref.strokeWidth,\n      _ref$orient = _ref.orient,\n      orient = _ref$orient === void 0 ? 'auto' : _ref$orient;\n\n  var _Symbol = useMarkerSymbol(type);\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"marker\", {\n      className: \"react-flow__arrowhead\",\n      id: id,\n      markerWidth: \"\".concat(width),\n      markerHeight: \"\".concat(height),\n      viewBox: \"-10 -10 20 20\",\n      markerUnits: markerUnits,\n      orient: orient,\n      refX: \"0\",\n      refY: \"0\"\n    },\n    /*#__PURE__*/\n    React__default.createElement(_Symbol, {\n      color: color,\n      strokeWidth: strokeWidth\n    }))\n  );\n};\n\nvar edgesSelector = function edgesSelector(s) {\n  return s.edges;\n};\n\nvar MarkerDefinitions = function MarkerDefinitions(_ref2) {\n  var defaultColor = _ref2.defaultColor;\n  var edges = useStore(edgesSelector);\n  var markers = useMemo(function () {\n    var ids = [];\n    return edges.reduce(function (markers, edge) {\n      [edge.markerStart, edge.markerEnd].forEach(function (marker) {\n        if (marker && _typeof(marker) === 'object') {\n          var markerId = getMarkerId(marker);\n\n          if (!ids.includes(markerId)) {\n            markers.push(_objectSpread$4({\n              id: markerId,\n              color: marker.color || defaultColor\n            }, marker));\n            ids.push(markerId);\n          }\n        }\n      });\n      return markers.sort(function (a, b) {\n        return a.id.localeCompare(b.id);\n      });\n    }, []);\n  }, [edges, defaultColor]);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"defs\", null, markers.map(function (marker) {\n      return (\n        /*#__PURE__*/\n        React__default.createElement(Marker, {\n          id: marker.id,\n          key: marker.id,\n          type: marker.type,\n          color: marker.color,\n          width: marker.width,\n          height: marker.height,\n          markerUnits: marker.markerUnits,\n          strokeWidth: marker.strokeWidth,\n          orient: marker.orient\n        })\n      );\n    }))\n  );\n};\n\nMarkerDefinitions.displayName = 'MarkerDefinitions';\nvar defaultEdgeTree = [{\n  level: 0,\n  isMaxLevel: true,\n  edges: []\n}];\n\nfunction groupEdgesByZLevel(edges, nodeInternals) {\n  var maxLevel = -1;\n  var levelLookup = edges.reduce(function (tree, edge) {\n    var _nodeInternals$get, _nodeInternals$get2;\n\n    var z = isNumeric(edge.zIndex) ? edge.zIndex : Math.max(((_nodeInternals$get = nodeInternals.get(edge.source)) === null || _nodeInternals$get === void 0 ? void 0 : _nodeInternals$get.z) || 0, ((_nodeInternals$get2 = nodeInternals.get(edge.target)) === null || _nodeInternals$get2 === void 0 ? void 0 : _nodeInternals$get2.z) || 0);\n\n    if (tree[z]) {\n      tree[z].push(edge);\n    } else {\n      tree[z] = [edge];\n    }\n\n    maxLevel = z > maxLevel ? z : maxLevel;\n    return tree;\n  }, {});\n  var edgeTree = Object.entries(levelLookup).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        edges = _ref2[1];\n\n    var level = +key;\n    return {\n      edges: edges,\n      level: level,\n      isMaxLevel: level === maxLevel\n    };\n  });\n\n  if (edgeTree.length === 0) {\n    return defaultEdgeTree;\n  }\n\n  return edgeTree;\n}\n\nfunction useVisibleEdges(onlyRenderVisible, nodeInternals) {\n  var edges = useStore(useCallback(function (s) {\n    if (!onlyRenderVisible) {\n      return s.edges;\n    }\n\n    return s.edges.filter(function (e) {\n      var sourceNode = nodeInternals.get(e.source);\n      var targetNode = nodeInternals.get(e.target);\n      return (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.width) && (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.height) && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.width) && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.height) && isEdgeVisible({\n        sourcePos: sourceNode.position || {\n          x: 0,\n          y: 0\n        },\n        targetPos: targetNode.position || {\n          x: 0,\n          y: 0\n        },\n        sourceWidth: sourceNode.width,\n        sourceHeight: sourceNode.height,\n        targetWidth: targetNode.width,\n        targetHeight: targetNode.height,\n        width: s.width,\n        height: s.height,\n        transform: s.transform\n      });\n    });\n  }, [onlyRenderVisible, nodeInternals]));\n  return groupEdgesByZLevel(edges, nodeInternals);\n}\n\nvar selector$2 = function selector(s) {\n  return {\n    connectionNodeId: s.connectionNodeId,\n    connectionHandleId: s.connectionHandleId,\n    connectionHandleType: s.connectionHandleType,\n    connectionPosition: s.connectionPosition,\n    nodesConnectable: s.nodesConnectable,\n    elementsSelectable: s.elementsSelectable,\n    width: s.width,\n    height: s.height,\n    connectionMode: s.connectionMode,\n    nodeInternals: s.nodeInternals\n  };\n};\n\nvar EdgeRenderer = function EdgeRenderer(props) {\n  var _useStore = useStore(selector$2, shallow),\n      connectionNodeId = _useStore.connectionNodeId,\n      connectionHandleId = _useStore.connectionHandleId,\n      connectionHandleType = _useStore.connectionHandleType,\n      connectionPosition = _useStore.connectionPosition,\n      nodesConnectable = _useStore.nodesConnectable,\n      elementsSelectable = _useStore.elementsSelectable,\n      width = _useStore.width,\n      height = _useStore.height,\n      connectionMode = _useStore.connectionMode,\n      nodeInternals = _useStore.nodeInternals;\n\n  var edgeTree = useVisibleEdges(props.onlyRenderVisibleElements, nodeInternals);\n\n  if (!width) {\n    return null;\n  }\n\n  var connectionLineType = props.connectionLineType,\n      defaultMarkerColor = props.defaultMarkerColor,\n      connectionLineStyle = props.connectionLineStyle,\n      connectionLineComponent = props.connectionLineComponent;\n  var renderConnectionLine = connectionNodeId && connectionHandleType;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(React__default.Fragment, null, edgeTree.map(function (_ref) {\n      var level = _ref.level,\n          edges = _ref.edges,\n          isMaxLevel = _ref.isMaxLevel;\n      return (\n        /*#__PURE__*/\n        React__default.createElement(\"svg\", {\n          key: level,\n          style: {\n            zIndex: level\n          },\n          width: width,\n          height: height,\n          className: \"react-flow__edges react-flow__container\"\n        }, isMaxLevel &&\n        /*#__PURE__*/\n        React__default.createElement(MarkerDefinitions, {\n          defaultColor: defaultMarkerColor\n        }),\n        /*#__PURE__*/\n        React__default.createElement(\"g\", null, edges.map(function (edge) {\n          var _getNodeData = getNodeData(nodeInternals, edge.source),\n              _getNodeData2 = _slicedToArray(_getNodeData, 3),\n              sourceNodeRect = _getNodeData2[0],\n              sourceHandleBounds = _getNodeData2[1],\n              sourceIsValid = _getNodeData2[2];\n\n          var _getNodeData3 = getNodeData(nodeInternals, edge.target),\n              _getNodeData4 = _slicedToArray(_getNodeData3, 3),\n              targetNodeRect = _getNodeData4[0],\n              targetHandleBounds = _getNodeData4[1],\n              targetIsValid = _getNodeData4[2];\n\n          if (!sourceIsValid || !targetIsValid) {\n            return null;\n          }\n\n          var edgeType = edge.type || 'default';\n          var EdgeComponent = props.edgeTypes[edgeType] || props.edgeTypes[\"default\"]; // when connection type is loose we can define all handles as sources\n\n          var targetNodeHandles = connectionMode === ConnectionMode.Strict ? targetHandleBounds.target : targetHandleBounds.target || targetHandleBounds.source;\n          var sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle || null);\n          var targetHandle = getHandle(targetNodeHandles, edge.targetHandle || null);\n          var sourcePosition = (sourceHandle === null || sourceHandle === void 0 ? void 0 : sourceHandle.position) || Position.Bottom;\n          var targetPosition = (targetHandle === null || targetHandle === void 0 ? void 0 : targetHandle.position) || Position.Top;\n\n          if (!sourceHandle) {\n            console.warn(\"couldn't create edge for source handle id: \".concat(edge.sourceHandle, \"; edge id: \").concat(edge.id));\n            return null;\n          }\n\n          if (!targetHandle) {\n            console.warn(\"couldn't create edge for target handle id: \".concat(edge.targetHandle, \"; edge id: \").concat(edge.id));\n            return null;\n          }\n\n          var _getEdgePositions = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition),\n              sourceX = _getEdgePositions.sourceX,\n              sourceY = _getEdgePositions.sourceY,\n              targetX = _getEdgePositions.targetX,\n              targetY = _getEdgePositions.targetY;\n\n          return (\n            /*#__PURE__*/\n            React__default.createElement(EdgeComponent, {\n              key: edge.id,\n              id: edge.id,\n              className: cc([edge.className, props.noPanClassName]),\n              type: edgeType,\n              data: edge.data,\n              selected: !!edge.selected,\n              animated: !!edge.animated,\n              hidden: !!edge.hidden,\n              label: edge.label,\n              labelStyle: edge.labelStyle,\n              labelShowBg: edge.labelShowBg,\n              labelBgStyle: edge.labelBgStyle,\n              labelBgPadding: edge.labelBgPadding,\n              labelBgBorderRadius: edge.labelBgBorderRadius,\n              style: edge.style,\n              source: edge.source,\n              target: edge.target,\n              sourceHandleId: edge.sourceHandle,\n              targetHandleId: edge.targetHandle,\n              markerEnd: edge.markerEnd,\n              markerStart: edge.markerStart,\n              sourceX: sourceX,\n              sourceY: sourceY,\n              targetX: targetX,\n              targetY: targetY,\n              sourcePosition: sourcePosition,\n              targetPosition: targetPosition,\n              elementsSelectable: elementsSelectable,\n              onEdgeUpdate: props.onEdgeUpdate,\n              onContextMenu: props.onEdgeContextMenu,\n              onMouseEnter: props.onEdgeMouseEnter,\n              onMouseMove: props.onEdgeMouseMove,\n              onMouseLeave: props.onEdgeMouseLeave,\n              onClick: props.onEdgeClick,\n              edgeUpdaterRadius: props.edgeUpdaterRadius,\n              onEdgeDoubleClick: props.onEdgeDoubleClick,\n              onEdgeUpdateStart: props.onEdgeUpdateStart,\n              onEdgeUpdateEnd: props.onEdgeUpdateEnd\n            })\n          );\n        }), renderConnectionLine && isMaxLevel &&\n        /*#__PURE__*/\n        React__default.createElement(ConnectionLine, {\n          connectionNodeId: connectionNodeId,\n          connectionHandleId: connectionHandleId,\n          connectionHandleType: connectionHandleType,\n          connectionPositionX: connectionPosition.x,\n          connectionPositionY: connectionPosition.y,\n          connectionLineStyle: connectionLineStyle,\n          connectionLineType: connectionLineType,\n          isConnectable: nodesConnectable,\n          CustomConnectionLineComponent: connectionLineComponent\n        })))\n      );\n    }))\n  );\n};\n\nEdgeRenderer.displayName = 'EdgeRenderer';\nvar EdgeRenderer$1 =\n/*#__PURE__*/\nmemo(EdgeRenderer);\n\nvar selector$1 = function selector(s) {\n  return s.transform;\n};\n\nfunction Viewport(_ref) {\n  var children = _ref.children;\n  var transform = useStore(selector$1);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", {\n      className: \"react-flow__viewport react-flow__container\",\n      style: {\n        transform: \"translate(\".concat(transform[0], \"px,\").concat(transform[1], \"px) scale(\").concat(transform[2], \")\")\n      }\n    }, children)\n  );\n}\n\nfunction useOnInitHandler(onInit) {\n  var ReactFlowInstance = useReactFlow();\n  var isInitialized = useRef(false);\n  useEffect(function () {\n    if (!isInitialized.current && ReactFlowInstance.viewportInitialized && onInit) {\n      setTimeout(function () {\n        return onInit(ReactFlowInstance);\n      }, 1);\n      isInitialized.current = true;\n    }\n  }, [onInit, ReactFlowInstance.viewportInitialized]);\n}\n\nvar GraphView = function GraphView(_ref) {\n  var nodeTypes = _ref.nodeTypes,\n      edgeTypes = _ref.edgeTypes,\n      onMove = _ref.onMove,\n      onMoveStart = _ref.onMoveStart,\n      onMoveEnd = _ref.onMoveEnd,\n      onInit = _ref.onInit,\n      onNodeClick = _ref.onNodeClick,\n      onEdgeClick = _ref.onEdgeClick,\n      onNodeDoubleClick = _ref.onNodeDoubleClick,\n      onEdgeDoubleClick = _ref.onEdgeDoubleClick,\n      onNodeMouseEnter = _ref.onNodeMouseEnter,\n      onNodeMouseMove = _ref.onNodeMouseMove,\n      onNodeMouseLeave = _ref.onNodeMouseLeave,\n      onNodeContextMenu = _ref.onNodeContextMenu,\n      onNodeDragStart = _ref.onNodeDragStart,\n      onNodeDrag = _ref.onNodeDrag,\n      onNodeDragStop = _ref.onNodeDragStop,\n      onSelectionDragStart = _ref.onSelectionDragStart,\n      onSelectionDrag = _ref.onSelectionDrag,\n      onSelectionDragStop = _ref.onSelectionDragStop,\n      onSelectionContextMenu = _ref.onSelectionContextMenu,\n      connectionLineType = _ref.connectionLineType,\n      connectionLineStyle = _ref.connectionLineStyle,\n      connectionLineComponent = _ref.connectionLineComponent,\n      selectionKeyCode = _ref.selectionKeyCode,\n      multiSelectionKeyCode = _ref.multiSelectionKeyCode,\n      zoomActivationKeyCode = _ref.zoomActivationKeyCode,\n      deleteKeyCode = _ref.deleteKeyCode,\n      onlyRenderVisibleElements = _ref.onlyRenderVisibleElements,\n      elementsSelectable = _ref.elementsSelectable,\n      selectNodesOnDrag = _ref.selectNodesOnDrag,\n      defaultZoom = _ref.defaultZoom,\n      defaultPosition = _ref.defaultPosition,\n      preventScrolling = _ref.preventScrolling,\n      defaultMarkerColor = _ref.defaultMarkerColor,\n      zoomOnScroll = _ref.zoomOnScroll,\n      zoomOnPinch = _ref.zoomOnPinch,\n      panOnScroll = _ref.panOnScroll,\n      panOnScrollSpeed = _ref.panOnScrollSpeed,\n      panOnScrollMode = _ref.panOnScrollMode,\n      zoomOnDoubleClick = _ref.zoomOnDoubleClick,\n      panOnDrag = _ref.panOnDrag,\n      onPaneClick = _ref.onPaneClick,\n      onPaneScroll = _ref.onPaneScroll,\n      onPaneContextMenu = _ref.onPaneContextMenu,\n      onEdgeUpdate = _ref.onEdgeUpdate,\n      onEdgeContextMenu = _ref.onEdgeContextMenu,\n      onEdgeMouseEnter = _ref.onEdgeMouseEnter,\n      onEdgeMouseMove = _ref.onEdgeMouseMove,\n      onEdgeMouseLeave = _ref.onEdgeMouseLeave,\n      edgeUpdaterRadius = _ref.edgeUpdaterRadius,\n      onEdgeUpdateStart = _ref.onEdgeUpdateStart,\n      onEdgeUpdateEnd = _ref.onEdgeUpdateEnd,\n      noDragClassName = _ref.noDragClassName,\n      noWheelClassName = _ref.noWheelClassName,\n      noPanClassName = _ref.noPanClassName;\n  useOnInitHandler(onInit);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(FlowRenderer$1, {\n      onPaneClick: onPaneClick,\n      onPaneContextMenu: onPaneContextMenu,\n      onPaneScroll: onPaneScroll,\n      deleteKeyCode: deleteKeyCode,\n      selectionKeyCode: selectionKeyCode,\n      multiSelectionKeyCode: multiSelectionKeyCode,\n      zoomActivationKeyCode: zoomActivationKeyCode,\n      elementsSelectable: elementsSelectable,\n      onMove: onMove,\n      onMoveStart: onMoveStart,\n      onMoveEnd: onMoveEnd,\n      zoomOnScroll: zoomOnScroll,\n      zoomOnPinch: zoomOnPinch,\n      zoomOnDoubleClick: zoomOnDoubleClick,\n      panOnScroll: panOnScroll,\n      panOnScrollSpeed: panOnScrollSpeed,\n      panOnScrollMode: panOnScrollMode,\n      panOnDrag: panOnDrag,\n      defaultPosition: defaultPosition,\n      defaultZoom: defaultZoom,\n      onSelectionDragStart: onSelectionDragStart,\n      onSelectionDrag: onSelectionDrag,\n      onSelectionDragStop: onSelectionDragStop,\n      onSelectionContextMenu: onSelectionContextMenu,\n      preventScrolling: preventScrolling,\n      noDragClassName: noDragClassName,\n      noWheelClassName: noWheelClassName,\n      noPanClassName: noPanClassName\n    },\n    /*#__PURE__*/\n    React__default.createElement(Viewport, null,\n    /*#__PURE__*/\n    React__default.createElement(EdgeRenderer$1, {\n      edgeTypes: edgeTypes,\n      onEdgeClick: onEdgeClick,\n      onEdgeDoubleClick: onEdgeDoubleClick,\n      connectionLineType: connectionLineType,\n      connectionLineStyle: connectionLineStyle,\n      connectionLineComponent: connectionLineComponent,\n      onEdgeUpdate: onEdgeUpdate,\n      onlyRenderVisibleElements: onlyRenderVisibleElements,\n      onEdgeContextMenu: onEdgeContextMenu,\n      onEdgeMouseEnter: onEdgeMouseEnter,\n      onEdgeMouseMove: onEdgeMouseMove,\n      onEdgeMouseLeave: onEdgeMouseLeave,\n      onEdgeUpdateStart: onEdgeUpdateStart,\n      onEdgeUpdateEnd: onEdgeUpdateEnd,\n      edgeUpdaterRadius: edgeUpdaterRadius,\n      defaultMarkerColor: defaultMarkerColor,\n      noPanClassName: noPanClassName\n    }),\n    /*#__PURE__*/\n    React__default.createElement(NodeRenderer$1, {\n      nodeTypes: nodeTypes,\n      onNodeClick: onNodeClick,\n      onNodeDoubleClick: onNodeDoubleClick,\n      onNodeMouseEnter: onNodeMouseEnter,\n      onNodeMouseMove: onNodeMouseMove,\n      onNodeMouseLeave: onNodeMouseLeave,\n      onNodeContextMenu: onNodeContextMenu,\n      onNodeDragStop: onNodeDragStop,\n      onNodeDrag: onNodeDrag,\n      onNodeDragStart: onNodeDragStart,\n      selectNodesOnDrag: selectNodesOnDrag,\n      onlyRenderVisibleElements: onlyRenderVisibleElements,\n      noPanClassName: noPanClassName,\n      noDragClassName: noDragClassName\n    })))\n  );\n};\n\nGraphView.displayName = 'GraphView';\nvar GraphView$1 =\n/*#__PURE__*/\nmemo(GraphView);\n\nvar GroupNode = function GroupNode() {\n  return null;\n};\n\nGroupNode.displayName = 'GroupNode';\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction useMemoizedMouseHandler(id, dragging, getState, handler) {\n  var memoizedHandler = useCallback(function (event) {\n    if (typeof handler !== 'undefined' && !dragging) {\n      var node = getState().nodeInternals.get(id);\n      handler(event, _objectSpread$3({}, node));\n    }\n  }, [handler, dragging, id]);\n  return memoizedHandler;\n}\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar selector = function selector(s) {\n  return {\n    addSelectedNodes: s.addSelectedNodes,\n    updateNodePosition: s.updateNodePosition,\n    unselectNodesAndEdges: s.unselectNodesAndEdges,\n    updateNodeDimensions: s.updateNodeDimensions\n  };\n};\n\nvar wrapNode = function wrapNode(NodeComponent) {\n  var NodeWrapper = function NodeWrapper(_ref) {\n    var id = _ref.id,\n        type = _ref.type,\n        data = _ref.data,\n        scale = _ref.scale,\n        xPos = _ref.xPos,\n        yPos = _ref.yPos,\n        selected = _ref.selected,\n        onClick = _ref.onClick,\n        onMouseEnter = _ref.onMouseEnter,\n        onMouseMove = _ref.onMouseMove,\n        onMouseLeave = _ref.onMouseLeave,\n        onContextMenu = _ref.onContextMenu,\n        onNodeDoubleClick = _ref.onNodeDoubleClick,\n        onNodeDragStart = _ref.onNodeDragStart,\n        onNodeDrag = _ref.onNodeDrag,\n        onNodeDragStop = _ref.onNodeDragStop,\n        style = _ref.style,\n        className = _ref.className,\n        isDraggable = _ref.isDraggable,\n        isSelectable = _ref.isSelectable,\n        isConnectable = _ref.isConnectable,\n        selectNodesOnDrag = _ref.selectNodesOnDrag,\n        sourcePosition = _ref.sourcePosition,\n        targetPosition = _ref.targetPosition,\n        hidden = _ref.hidden,\n        snapToGrid = _ref.snapToGrid,\n        snapGrid = _ref.snapGrid,\n        dragging = _ref.dragging,\n        resizeObserver = _ref.resizeObserver,\n        dragHandle = _ref.dragHandle,\n        zIndex = _ref.zIndex,\n        isParent = _ref.isParent,\n        noPanClassName = _ref.noPanClassName,\n        noDragClassName = _ref.noDragClassName;\n    var store = useStoreApi();\n\n    var _useStore = useStore(selector, shallow),\n        addSelectedNodes = _useStore.addSelectedNodes,\n        unselectNodesAndEdges = _useStore.unselectNodesAndEdges,\n        updateNodePosition = _useStore.updateNodePosition,\n        updateNodeDimensions = _useStore.updateNodeDimensions;\n\n    var nodeElement = useRef(null);\n    var prevSourcePosition = useRef(sourcePosition);\n    var prevTargetPosition = useRef(targetPosition);\n    var prevType = useRef(type);\n    var hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;\n    var nodeStyle = useMemo(function () {\n      return _objectSpread$2({\n        zIndex: zIndex,\n        transform: \"translate(\".concat(xPos, \"px,\").concat(yPos, \"px)\"),\n        pointerEvents: hasPointerEvents ? 'all' : 'none'\n      }, style);\n    }, [zIndex, xPos, yPos, hasPointerEvents, style]);\n    var grid = useMemo(function () {\n      return snapToGrid ? snapGrid : [1, 1];\n    }, [snapToGrid, snapGrid === null || snapGrid === void 0 ? void 0 : snapGrid[0], snapGrid === null || snapGrid === void 0 ? void 0 : snapGrid[1]]);\n    var onMouseEnterHandler = useMemoizedMouseHandler(id, dragging, store.getState, onMouseEnter);\n    var onMouseMoveHandler = useMemoizedMouseHandler(id, dragging, store.getState, onMouseMove);\n    var onMouseLeaveHandler = useMemoizedMouseHandler(id, dragging, store.getState, onMouseLeave);\n    var onContextMenuHandler = useMemoizedMouseHandler(id, false, store.getState, onContextMenu);\n    var onNodeDoubleClickHandler = useMemoizedMouseHandler(id, false, store.getState, onNodeDoubleClick);\n    var onSelectNodeHandler = useCallback(function (event) {\n      if (!isDraggable) {\n        if (isSelectable) {\n          store.setState({\n            nodesSelectionActive: false\n          });\n\n          if (!selected) {\n            addSelectedNodes([id]);\n          }\n        }\n\n        if (onClick) {\n          var node = store.getState().nodeInternals.get(id);\n          onClick(event, _objectSpread$2({}, node));\n        }\n      }\n    }, [isSelectable, selected, isDraggable, onClick, id]);\n    var onDragStart = useCallback(function (event) {\n      if (selectNodesOnDrag && isSelectable) {\n        store.setState({\n          nodesSelectionActive: false\n        });\n\n        if (!selected) {\n          addSelectedNodes([id]);\n        }\n      } else if (!selectNodesOnDrag && !selected && isSelectable) {\n        var _store$getState = store.getState(),\n            multiSelectionActive = _store$getState.multiSelectionActive;\n\n        if (multiSelectionActive) {\n          addSelectedNodes([id]);\n        } else {\n          unselectNodesAndEdges();\n          store.setState({\n            nodesSelectionActive: false\n          });\n        }\n      }\n\n      if (onNodeDragStart) {\n        var node = store.getState().nodeInternals.get(id);\n        onNodeDragStart(event, _objectSpread$2({}, node));\n      }\n    }, [id, selected, selectNodesOnDrag, isSelectable, onNodeDragStart]);\n    var onDrag = useCallback(function (event, draggableData) {\n      updateNodePosition({\n        id: id,\n        dragging: true,\n        diff: {\n          x: draggableData.deltaX,\n          y: draggableData.deltaY\n        }\n      });\n\n      if (onNodeDrag) {\n        var _node$positionAbsolut, _node$positionAbsolut2;\n\n        var node = store.getState().nodeInternals.get(id);\n        onNodeDrag(event, _objectSpread$2(_objectSpread$2({}, node), {}, {\n          dragging: true,\n          position: {\n            x: node.position.x + draggableData.deltaX,\n            y: node.position.y + draggableData.deltaY\n          },\n          positionAbsolute: {\n            x: (((_node$positionAbsolut = node.positionAbsolute) === null || _node$positionAbsolut === void 0 ? void 0 : _node$positionAbsolut.x) || 0) + draggableData.deltaX,\n            y: (((_node$positionAbsolut2 = node.positionAbsolute) === null || _node$positionAbsolut2 === void 0 ? void 0 : _node$positionAbsolut2.y) || 0) + draggableData.deltaY\n          }\n        }));\n      }\n    }, [id, onNodeDrag]);\n    var onDragStop = useCallback(function (event) {\n      // onDragStop also gets called when user just clicks on a node.\n      // Because of that we set dragging to true inside the onDrag handler and handle the click here\n      var node;\n\n      if (onClick || onNodeDragStop) {\n        node = store.getState().nodeInternals.get(id);\n      }\n\n      if (!dragging) {\n        if (isSelectable && !selectNodesOnDrag && !selected) {\n          addSelectedNodes([id]);\n        }\n\n        if (onClick && node) {\n          onClick(event, _objectSpread$2({}, node));\n        }\n\n        return;\n      }\n\n      updateNodePosition({\n        id: id,\n        dragging: false\n      });\n\n      if (onNodeDragStop && node) {\n        onNodeDragStop(event, _objectSpread$2(_objectSpread$2({}, node), {}, {\n          dragging: false\n        }));\n      }\n    }, [id, isSelectable, selectNodesOnDrag, onClick, onNodeDragStop, dragging, selected]);\n    useEffect(function () {\n      if (nodeElement.current && !hidden) {\n        var currNode = nodeElement.current;\n        resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.observe(currNode);\n        return function () {\n          return resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.unobserve(currNode);\n        };\n      }\n    }, [hidden]);\n    useEffect(function () {\n      // when the user programmatically changes the source or handle position, we re-initialize the node\n      var typeChanged = prevType.current !== type;\n      var sourcePosChanged = prevSourcePosition.current !== sourcePosition;\n      var targetPosChanged = prevTargetPosition.current !== targetPosition;\n\n      if (nodeElement.current && (typeChanged || sourcePosChanged || targetPosChanged)) {\n        if (typeChanged) {\n          prevType.current = type;\n        }\n\n        if (sourcePosChanged) {\n          prevSourcePosition.current = sourcePosition;\n        }\n\n        if (targetPosChanged) {\n          prevTargetPosition.current = targetPosition;\n        }\n\n        updateNodeDimensions([{\n          id: id,\n          nodeElement: nodeElement.current,\n          forceUpdate: true\n        }]);\n      }\n    }, [id, type, sourcePosition, targetPosition]);\n\n    if (hidden) {\n      return null;\n    }\n\n    var nodeClasses = cc(['react-flow__node', \"react-flow__node-\".concat(type), noPanClassName, className, {\n      selected: selected,\n      selectable: isSelectable,\n      parent: isParent\n    }]);\n    return (\n      /*#__PURE__*/\n      React__default.createElement(DraggableCore, {\n        onStart: onDragStart,\n        onDrag: onDrag,\n        onStop: onDragStop,\n        scale: scale,\n        disabled: !isDraggable,\n        cancel: \".\".concat(noDragClassName),\n        nodeRef: nodeElement,\n        grid: grid,\n        enableUserSelectHack: false,\n        handle: dragHandle\n      },\n      /*#__PURE__*/\n      React__default.createElement(\"div\", {\n        className: nodeClasses,\n        ref: nodeElement,\n        style: nodeStyle,\n        onMouseEnter: onMouseEnterHandler,\n        onMouseMove: onMouseMoveHandler,\n        onMouseLeave: onMouseLeaveHandler,\n        onContextMenu: onContextMenuHandler,\n        onClick: onSelectNodeHandler,\n        onDoubleClick: onNodeDoubleClickHandler,\n        \"data-id\": id\n      },\n      /*#__PURE__*/\n      React__default.createElement(Provider, {\n        value: id\n      },\n      /*#__PURE__*/\n      React__default.createElement(NodeComponent, {\n        id: id,\n        data: data,\n        type: type,\n        xPos: xPos,\n        yPos: yPos,\n        selected: selected,\n        isConnectable: isConnectable,\n        sourcePosition: sourcePosition,\n        targetPosition: targetPosition,\n        dragging: dragging,\n        dragHandle: dragHandle,\n        zIndex: zIndex\n      }))))\n    );\n  };\n\n  NodeWrapper.displayName = 'NodeWrapper';\n  return (\n    /*#__PURE__*/\n    memo(NodeWrapper)\n  );\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction createNodeTypes(nodeTypes) {\n  var standardTypes = {\n    input: wrapNode(nodeTypes.input || InputNode$1),\n    \"default\": wrapNode(nodeTypes[\"default\"] || DefaultNode$1),\n    output: wrapNode(nodeTypes.output || OutputNode$1),\n    group: wrapNode(nodeTypes.group || GroupNode)\n  };\n  var wrappedTypes = {};\n  var specialTypes = Object.keys(nodeTypes).filter(function (k) {\n    return !['input', 'default', 'output', 'group'].includes(k);\n  }).reduce(function (res, key) {\n    res[key] = wrapNode(nodeTypes[key] || DefaultNode$1);\n    return res;\n  }, wrappedTypes);\n  return _objectSpread$1(_objectSpread$1({}, standardTypes), specialTypes);\n}\n\nfunction useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {\n  var typesKeysRef = useRef(null);\n  var typesParsed = useMemo(function () {\n    if (process.env.NODE_ENV === 'development') {\n      var typeKeys = Object.keys(nodeOrEdgeTypes);\n\n      if (shallow(typesKeysRef.current, typeKeys)) {\n        console.warn(\"React Flow: It looks like that you created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\");\n      }\n\n      typesKeysRef.current = typeKeys;\n    }\n\n    return createTypes(nodeOrEdgeTypes);\n  }, [nodeOrEdgeTypes]);\n  return typesParsed;\n}\n\nfunction injectStyle(css) {\n  if (!css || typeof document === 'undefined') return;\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  head.appendChild(style);\n  style.appendChild(document.createTextNode(css));\n}\n\nvar Wrapper = function Wrapper(_ref) {\n  var children = _ref.children;\n  var isWrapped = true;\n\n  try {\n    useStoreApi();\n  } catch (e) {\n    isWrapped = false;\n  }\n\n  if (isWrapped) {\n    // we need to wrap it with a fragment because it's not allowed for children to be a ReactNode\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051\n    return (\n      /*#__PURE__*/\n      React__default.createElement(React__default.Fragment, null, children)\n    );\n  }\n\n  return (\n    /*#__PURE__*/\n    React__default.createElement(Provider$1, {\n      createStore: createStore\n    }, children)\n  );\n};\n\nWrapper.displayName = 'ReactFlowWrapper';\nvar _excluded = [\"nodes\", \"edges\", \"defaultNodes\", \"defaultEdges\", \"className\", \"nodeTypes\", \"edgeTypes\", \"onNodeClick\", \"onEdgeClick\", \"onInit\", \"onMove\", \"onMoveStart\", \"onMoveEnd\", \"onConnect\", \"onConnectStart\", \"onConnectStop\", \"onConnectEnd\", \"onNodeMouseEnter\", \"onNodeMouseMove\", \"onNodeMouseLeave\", \"onNodeContextMenu\", \"onNodeDoubleClick\", \"onNodeDragStart\", \"onNodeDrag\", \"onNodeDragStop\", \"onNodesDelete\", \"onEdgesDelete\", \"onSelectionChange\", \"onSelectionDragStart\", \"onSelectionDrag\", \"onSelectionDragStop\", \"onSelectionContextMenu\", \"connectionMode\", \"connectionLineType\", \"connectionLineStyle\", \"connectionLineComponent\", \"deleteKeyCode\", \"selectionKeyCode\", \"multiSelectionKeyCode\", \"zoomActivationKeyCode\", \"snapToGrid\", \"snapGrid\", \"onlyRenderVisibleElements\", \"selectNodesOnDrag\", \"nodesDraggable\", \"nodesConnectable\", \"elementsSelectable\", \"minZoom\", \"maxZoom\", \"defaultZoom\", \"defaultPosition\", \"translateExtent\", \"preventScrolling\", \"nodeExtent\", \"defaultMarkerColor\", \"zoomOnScroll\", \"zoomOnPinch\", \"panOnScroll\", \"panOnScrollSpeed\", \"panOnScrollMode\", \"zoomOnDoubleClick\", \"panOnDrag\", \"onPaneClick\", \"onPaneScroll\", \"onPaneContextMenu\", \"children\", \"onEdgeUpdate\", \"onEdgeContextMenu\", \"onEdgeDoubleClick\", \"onEdgeMouseEnter\", \"onEdgeMouseMove\", \"onEdgeMouseLeave\", \"onEdgeUpdateStart\", \"onEdgeUpdateEnd\", \"edgeUpdaterRadius\", \"onNodesChange\", \"onEdgesChange\", \"noDragClassName\", \"noWheelClassName\", \"noPanClassName\", \"fitView\", \"fitViewOptions\", \"connectOnClick\", \"attributionPosition\", \"proOptions\", \"defaultEdgeOptions\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\n{\n  injectStyle(css_248z$1);\n  injectStyle(css_248z);\n}\nvar defaultNodeTypes = {\n  input: InputNode$1,\n  \"default\": DefaultNode$1,\n  output: OutputNode$1\n};\nvar defaultEdgeTypes = {\n  \"default\": BezierEdge,\n  straight: StraightEdge,\n  step: StepEdge,\n  smoothstep: SmoothStepEdge,\n  simplebezier: SimpleBezierEdge\n};\nvar initSnapGrid = [15, 15];\nvar initDefaultPosition = [0, 0];\nvar ReactFlow =\n/*#__PURE__*/\nforwardRef(function (_ref, ref) {\n  var nodes = _ref.nodes,\n      edges = _ref.edges,\n      defaultNodes = _ref.defaultNodes,\n      defaultEdges = _ref.defaultEdges,\n      className = _ref.className,\n      _ref$nodeTypes = _ref.nodeTypes,\n      nodeTypes = _ref$nodeTypes === void 0 ? defaultNodeTypes : _ref$nodeTypes,\n      _ref$edgeTypes = _ref.edgeTypes,\n      edgeTypes = _ref$edgeTypes === void 0 ? defaultEdgeTypes : _ref$edgeTypes,\n      onNodeClick = _ref.onNodeClick,\n      onEdgeClick = _ref.onEdgeClick,\n      onInit = _ref.onInit,\n      onMove = _ref.onMove,\n      onMoveStart = _ref.onMoveStart,\n      onMoveEnd = _ref.onMoveEnd,\n      onConnect = _ref.onConnect,\n      onConnectStart = _ref.onConnectStart,\n      onConnectStop = _ref.onConnectStop,\n      onConnectEnd = _ref.onConnectEnd,\n      onNodeMouseEnter = _ref.onNodeMouseEnter,\n      onNodeMouseMove = _ref.onNodeMouseMove,\n      onNodeMouseLeave = _ref.onNodeMouseLeave,\n      onNodeContextMenu = _ref.onNodeContextMenu,\n      onNodeDoubleClick = _ref.onNodeDoubleClick,\n      onNodeDragStart = _ref.onNodeDragStart,\n      onNodeDrag = _ref.onNodeDrag,\n      onNodeDragStop = _ref.onNodeDragStop,\n      onNodesDelete = _ref.onNodesDelete,\n      onEdgesDelete = _ref.onEdgesDelete,\n      onSelectionChange = _ref.onSelectionChange,\n      onSelectionDragStart = _ref.onSelectionDragStart,\n      onSelectionDrag = _ref.onSelectionDrag,\n      onSelectionDragStop = _ref.onSelectionDragStop,\n      onSelectionContextMenu = _ref.onSelectionContextMenu,\n      _ref$connectionMode = _ref.connectionMode,\n      connectionMode = _ref$connectionMode === void 0 ? ConnectionMode.Strict : _ref$connectionMode,\n      _ref$connectionLineTy = _ref.connectionLineType,\n      connectionLineType = _ref$connectionLineTy === void 0 ? ConnectionLineType.Bezier : _ref$connectionLineTy,\n      connectionLineStyle = _ref.connectionLineStyle,\n      connectionLineComponent = _ref.connectionLineComponent,\n      _ref$deleteKeyCode = _ref.deleteKeyCode,\n      deleteKeyCode = _ref$deleteKeyCode === void 0 ? 'Backspace' : _ref$deleteKeyCode,\n      _ref$selectionKeyCode = _ref.selectionKeyCode,\n      selectionKeyCode = _ref$selectionKeyCode === void 0 ? 'Shift' : _ref$selectionKeyCode,\n      _ref$multiSelectionKe = _ref.multiSelectionKeyCode,\n      multiSelectionKeyCode = _ref$multiSelectionKe === void 0 ? 'Meta' : _ref$multiSelectionKe,\n      _ref$zoomActivationKe = _ref.zoomActivationKeyCode,\n      zoomActivationKeyCode = _ref$zoomActivationKe === void 0 ? 'Meta' : _ref$zoomActivationKe,\n      _ref$snapToGrid = _ref.snapToGrid,\n      snapToGrid = _ref$snapToGrid === void 0 ? false : _ref$snapToGrid,\n      _ref$snapGrid = _ref.snapGrid,\n      snapGrid = _ref$snapGrid === void 0 ? initSnapGrid : _ref$snapGrid,\n      _ref$onlyRenderVisibl = _ref.onlyRenderVisibleElements,\n      onlyRenderVisibleElements = _ref$onlyRenderVisibl === void 0 ? false : _ref$onlyRenderVisibl,\n      _ref$selectNodesOnDra = _ref.selectNodesOnDrag,\n      selectNodesOnDrag = _ref$selectNodesOnDra === void 0 ? true : _ref$selectNodesOnDra,\n      nodesDraggable = _ref.nodesDraggable,\n      nodesConnectable = _ref.nodesConnectable,\n      elementsSelectable = _ref.elementsSelectable,\n      minZoom = _ref.minZoom,\n      maxZoom = _ref.maxZoom,\n      _ref$defaultZoom = _ref.defaultZoom,\n      defaultZoom = _ref$defaultZoom === void 0 ? 1 : _ref$defaultZoom,\n      _ref$defaultPosition = _ref.defaultPosition,\n      defaultPosition = _ref$defaultPosition === void 0 ? initDefaultPosition : _ref$defaultPosition,\n      translateExtent = _ref.translateExtent,\n      _ref$preventScrolling = _ref.preventScrolling,\n      preventScrolling = _ref$preventScrolling === void 0 ? true : _ref$preventScrolling,\n      nodeExtent = _ref.nodeExtent,\n      _ref$defaultMarkerCol = _ref.defaultMarkerColor,\n      defaultMarkerColor = _ref$defaultMarkerCol === void 0 ? '#b1b1b7' : _ref$defaultMarkerCol,\n      _ref$zoomOnScroll = _ref.zoomOnScroll,\n      zoomOnScroll = _ref$zoomOnScroll === void 0 ? true : _ref$zoomOnScroll,\n      _ref$zoomOnPinch = _ref.zoomOnPinch,\n      zoomOnPinch = _ref$zoomOnPinch === void 0 ? true : _ref$zoomOnPinch,\n      _ref$panOnScroll = _ref.panOnScroll,\n      panOnScroll = _ref$panOnScroll === void 0 ? false : _ref$panOnScroll,\n      _ref$panOnScrollSpeed = _ref.panOnScrollSpeed,\n      panOnScrollSpeed = _ref$panOnScrollSpeed === void 0 ? 0.5 : _ref$panOnScrollSpeed,\n      _ref$panOnScrollMode = _ref.panOnScrollMode,\n      panOnScrollMode = _ref$panOnScrollMode === void 0 ? PanOnScrollMode.Free : _ref$panOnScrollMode,\n      _ref$zoomOnDoubleClic = _ref.zoomOnDoubleClick,\n      zoomOnDoubleClick = _ref$zoomOnDoubleClic === void 0 ? true : _ref$zoomOnDoubleClic,\n      _ref$panOnDrag = _ref.panOnDrag,\n      panOnDrag = _ref$panOnDrag === void 0 ? true : _ref$panOnDrag,\n      onPaneClick = _ref.onPaneClick,\n      onPaneScroll = _ref.onPaneScroll,\n      onPaneContextMenu = _ref.onPaneContextMenu,\n      children = _ref.children,\n      onEdgeUpdate = _ref.onEdgeUpdate,\n      onEdgeContextMenu = _ref.onEdgeContextMenu,\n      onEdgeDoubleClick = _ref.onEdgeDoubleClick,\n      onEdgeMouseEnter = _ref.onEdgeMouseEnter,\n      onEdgeMouseMove = _ref.onEdgeMouseMove,\n      onEdgeMouseLeave = _ref.onEdgeMouseLeave,\n      onEdgeUpdateStart = _ref.onEdgeUpdateStart,\n      onEdgeUpdateEnd = _ref.onEdgeUpdateEnd,\n      _ref$edgeUpdaterRadiu = _ref.edgeUpdaterRadius,\n      edgeUpdaterRadius = _ref$edgeUpdaterRadiu === void 0 ? 10 : _ref$edgeUpdaterRadiu,\n      onNodesChange = _ref.onNodesChange,\n      onEdgesChange = _ref.onEdgesChange,\n      _ref$noDragClassName = _ref.noDragClassName,\n      noDragClassName = _ref$noDragClassName === void 0 ? 'nodrag' : _ref$noDragClassName,\n      _ref$noWheelClassName = _ref.noWheelClassName,\n      noWheelClassName = _ref$noWheelClassName === void 0 ? 'nowheel' : _ref$noWheelClassName,\n      _ref$noPanClassName = _ref.noPanClassName,\n      noPanClassName = _ref$noPanClassName === void 0 ? 'nopan' : _ref$noPanClassName,\n      _ref$fitView = _ref.fitView,\n      fitView = _ref$fitView === void 0 ? false : _ref$fitView,\n      fitViewOptions = _ref.fitViewOptions,\n      _ref$connectOnClick = _ref.connectOnClick,\n      connectOnClick = _ref$connectOnClick === void 0 ? true : _ref$connectOnClick,\n      attributionPosition = _ref.attributionPosition,\n      proOptions = _ref.proOptions,\n      defaultEdgeOptions = _ref.defaultEdgeOptions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var nodeTypesParsed = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);\n  var edgeTypesParsed = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);\n  var reactFlowClasses = cc(['react-flow', className]);\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"div\", _objectSpread(_objectSpread({}, rest), {}, {\n      ref: ref,\n      className: reactFlowClasses\n    }),\n    /*#__PURE__*/\n    React__default.createElement(Wrapper, null,\n    /*#__PURE__*/\n    React__default.createElement(GraphView$1, {\n      onInit: onInit,\n      onMove: onMove,\n      onMoveStart: onMoveStart,\n      onMoveEnd: onMoveEnd,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      onNodeMouseEnter: onNodeMouseEnter,\n      onNodeMouseMove: onNodeMouseMove,\n      onNodeMouseLeave: onNodeMouseLeave,\n      onNodeContextMenu: onNodeContextMenu,\n      onNodeDoubleClick: onNodeDoubleClick,\n      onNodeDragStart: onNodeDragStart,\n      onNodeDrag: onNodeDrag,\n      onNodeDragStop: onNodeDragStop,\n      nodeTypes: nodeTypesParsed,\n      edgeTypes: edgeTypesParsed,\n      connectionLineType: connectionLineType,\n      connectionLineStyle: connectionLineStyle,\n      connectionLineComponent: connectionLineComponent,\n      selectionKeyCode: selectionKeyCode,\n      deleteKeyCode: deleteKeyCode,\n      multiSelectionKeyCode: multiSelectionKeyCode,\n      zoomActivationKeyCode: zoomActivationKeyCode,\n      onlyRenderVisibleElements: onlyRenderVisibleElements,\n      selectNodesOnDrag: selectNodesOnDrag,\n      defaultZoom: defaultZoom,\n      defaultPosition: defaultPosition,\n      preventScrolling: preventScrolling,\n      zoomOnScroll: zoomOnScroll,\n      zoomOnPinch: zoomOnPinch,\n      zoomOnDoubleClick: zoomOnDoubleClick,\n      panOnScroll: panOnScroll,\n      panOnScrollSpeed: panOnScrollSpeed,\n      panOnScrollMode: panOnScrollMode,\n      panOnDrag: panOnDrag,\n      onPaneClick: onPaneClick,\n      onPaneScroll: onPaneScroll,\n      onPaneContextMenu: onPaneContextMenu,\n      onSelectionDragStart: onSelectionDragStart,\n      onSelectionDrag: onSelectionDrag,\n      onSelectionDragStop: onSelectionDragStop,\n      onSelectionContextMenu: onSelectionContextMenu,\n      onEdgeUpdate: onEdgeUpdate,\n      onEdgeContextMenu: onEdgeContextMenu,\n      onEdgeDoubleClick: onEdgeDoubleClick,\n      onEdgeMouseEnter: onEdgeMouseEnter,\n      onEdgeMouseMove: onEdgeMouseMove,\n      onEdgeMouseLeave: onEdgeMouseLeave,\n      onEdgeUpdateStart: onEdgeUpdateStart,\n      onEdgeUpdateEnd: onEdgeUpdateEnd,\n      edgeUpdaterRadius: edgeUpdaterRadius,\n      defaultMarkerColor: defaultMarkerColor,\n      noDragClassName: noDragClassName,\n      noWheelClassName: noWheelClassName,\n      noPanClassName: noPanClassName\n    }),\n    /*#__PURE__*/\n    React__default.createElement(StoreUpdater, {\n      nodes: nodes,\n      edges: edges,\n      defaultNodes: defaultNodes,\n      defaultEdges: defaultEdges,\n      onConnect: onConnect,\n      onConnectStart: onConnectStart,\n      onConnectStop: onConnectStop,\n      onConnectEnd: onConnectEnd,\n      nodesDraggable: nodesDraggable,\n      nodesConnectable: nodesConnectable,\n      elementsSelectable: elementsSelectable,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      nodeExtent: nodeExtent,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      snapToGrid: snapToGrid,\n      snapGrid: snapGrid,\n      connectionMode: connectionMode,\n      translateExtent: translateExtent,\n      connectOnClick: connectOnClick,\n      defaultEdgeOptions: defaultEdgeOptions,\n      fitView: fitView,\n      fitViewOptions: fitViewOptions,\n      onNodesDelete: onNodesDelete,\n      onEdgesDelete: onEdgesDelete\n    }), onSelectionChange &&\n    /*#__PURE__*/\n    React__default.createElement(SelectionListener$1, {\n      onSelectionChange: onSelectionChange\n    }), children,\n    /*#__PURE__*/\n    React__default.createElement(Attribution, {\n      proOptions: proOptions,\n      position: attributionPosition\n    })))\n  );\n});\nReactFlow.displayName = 'ReactFlow';\n\nvar ReactFlowProvider = function ReactFlowProvider(_ref) {\n  var children = _ref.children;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(Provider$1, {\n      createStore: createStore\n    }, children)\n  );\n};\n\nReactFlowProvider.displayName = 'ReactFlowProvider';\n\nfunction createUseItemsState(applyChanges) {\n  return function (initialItems) {\n    var _useState = useState(initialItems),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1];\n\n    var onItemsChange = useCallback(function (changes) {\n      return setItems(function (items) {\n        return applyChanges(changes, items);\n      });\n    }, []);\n    return [items, setItems, onItemsChange];\n  };\n}\n\nvar useNodesState = createUseItemsState(applyNodeChanges);\nvar useEdgesState = createUseItemsState(applyEdgeChanges);\nexport { BezierEdge, EdgeText$1 as EdgeText, Handle$1 as Handle, ReactFlowProvider, SimpleBezierEdge, SmoothStepEdge, StepEdge, StraightEdge, ReactFlow as default, getBezierCenter as getBezierEdgeCenter, getBezierPath, getCenter as getEdgeCenter, getMarkerEnd, getSimpleBezierCenter as getSimpleBezierEdgeCenter, getSimpleBezierPath, getSmoothStepPath, useEdgesState, useKeyPress, useNodesState };","map":null,"metadata":{},"sourceType":"module"}