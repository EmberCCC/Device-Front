{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar elementResizeDetectorMaker = require(\"element-resize-detector\");\n\nvar ResizeObserverLite =\n/** @class */\nfunction () {\n  function ResizeObserverLite(handler) {\n    var _this = this;\n\n    this.handler = handler;\n    this.listenedElement = null;\n    this.hasResizeObserver = typeof window.ResizeObserver !== 'undefined';\n\n    if (this.hasResizeObserver) {\n      this.rz = new ResizeObserver(function (entries) {\n        _this.handler(getSize(entries[0].target));\n      });\n    } else {\n      this.erd = elementResizeDetectorMaker({\n        strategy: 'scroll'\n      });\n    }\n  }\n\n  ResizeObserverLite.prototype.observe = function (element) {\n    var _this = this;\n\n    if (this.listenedElement !== element) {\n      if (this.listenedElement) {\n        this.disconnect();\n      }\n\n      if (element) {\n        if (this.hasResizeObserver) {\n          this.rz.observe(element);\n        } else {\n          this.erd.listenTo(element, function (element) {\n            _this.handler(getSize(element));\n          });\n        }\n      }\n\n      this.listenedElement = element;\n    }\n  };\n\n  ResizeObserverLite.prototype.disconnect = function () {\n    if (this.listenedElement) {\n      if (this.hasResizeObserver) {\n        this.rz.disconnect();\n      } else {\n        this.erd.uninstall(this.listenedElement);\n      }\n\n      this.listenedElement = null;\n    }\n  };\n\n  return ResizeObserverLite;\n}();\n\nexports.default = ResizeObserverLite;\n\nfunction getSize(element) {\n  return {\n    width: getNumber(window.getComputedStyle(element)['width']),\n    height: getNumber(window.getComputedStyle(element)['height'])\n  };\n}\n\nfunction getNumber(str) {\n  var m = /^([0-9\\.]+)px$/.exec(str);\n  return m ? parseFloat(m[1]) : 0;\n}","map":null,"metadata":{},"sourceType":"script"}