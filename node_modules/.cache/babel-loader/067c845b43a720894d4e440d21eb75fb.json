{"ast":null,"code":"import _classCallCheck from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\src\\\\layouts\\\\HomeLayout\\\\HomePage\\\\PieChart.js\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nvar PieChart = (_dec = inject('HomeStore'), _dec(_class = observer(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PieChart, _React$Component);\n\n  function PieChart() {\n    _classCallCheck(this, PieChart);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PieChart).apply(this, arguments));\n  }\n\n  _createClass(PieChart, [{\n    key: \"render\",\n    value: function render() {\n      var DataView = DataSet.DataView;\n      var data = this.props.HomeStore.devInfo;\n      var dv = new DataView();\n      dv.source(data).transform({\n        type: \"percent\",\n        field: \"number\",\n        dimension: \"customerName\",\n        as: \"percent\"\n      });\n      var cols = {\n        percent: {\n          formatter: function formatter(val) {\n            val = +Number(val * 100).toFixed(2) + \"%\";\n            return val;\n          }\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: \"300\",\n        data: dv,\n        scale: cols,\n        padding: 'auto',\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Coord, {\n        type: \"theta\",\n        radius: 0.75,\n        innerRadius: 0.6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"percent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        position: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        showTitle: false,\n        itemTpl: \"<li><span style=\\\"background-color:{color};\\\" class=\\\"g2-tooltip-marker\\\"></span>{name}: {value}</li>\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"intervalStack\",\n        position: \"percent\",\n        color: \"customerName\",\n        tooltip: [\"customerName*percent\", function (customerName, percent) {\n          percent = +Number(percent * 100).toFixed(2) + \"%\";\n          return {\n            name: customerName,\n            value: percent\n          };\n        }],\n        style: {\n          lineWidth: 1,\n          stroke: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PieChart;\n}(React.Component)) || _class) || _class);\nexport default PieChart;","map":{"version":3,"sources":["D:\\GGdownload\\设备运维前端\\bl-device-manage\\src\\layouts\\HomeLayout\\HomePage\\PieChart.js"],"names":["React","inject","observer","Chart","Geom","Axis","Tooltip","Coord","Label","Legend","DataSet","PieChart","DataView","data","props","HomeStore","devInfo","dv","source","transform","type","field","dimension","as","cols","percent","formatter","val","Number","toFixed","customerName","name","value","lineWidth","stroke","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SACIC,KADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,OAJJ,EAKIC,KALJ,EAMIC,KANJ,EAOIC,MAPJ,QAQO,WARP;AASA,OAAOC,OAAP,MAAoB,gBAApB;IAIMC,Q,WAFLV,MAAM,CAAC,WAAD,C,gBACNC,Q;;;;;;;;;;;;;6BAEY;AAAA,UACGU,QADH,GACgBF,OADhB,CACGE,QADH;AAEL,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,OAAlC;AACA,UAAMC,EAAE,GAAG,IAAIL,QAAJ,EAAX;AACAK,MAAAA,EAAE,CAACC,MAAH,CAAUL,IAAV,EAAgBM,SAAhB,CAA0B;AACtBC,QAAAA,IAAI,EAAE,SADgB;AAEtBC,QAAAA,KAAK,EAAE,QAFe;AAGtBC,QAAAA,SAAS,EAAE,cAHW;AAItBC,QAAAA,EAAE,EAAE;AAJkB,OAA1B;AAMA,UAAMC,IAAI,GAAG;AACTC,QAAAA,OAAO,EAAE;AACLC,UAAAA,SAAS,EAAE,mBAAAC,GAAG,EAAI;AACdA,YAAAA,GAAG,GAAG,CAACC,MAAM,CAACD,GAAG,GAAG,GAAP,CAAN,CAAkBE,OAAlB,CAA0B,CAA1B,CAAD,GAAgC,GAAtC;AACA,mBAAOF,GAAP;AACH;AAJI;AADA,OAAb;AAQA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,oBAAC,KAAD;AACI,QAAA,MAAM,EAAC,KADX;AAEI,QAAA,IAAI,EAAEV,EAFV;AAGI,QAAA,KAAK,EAAEO,IAHX;AAII,QAAA,OAAO,EAAE,MAJb;AAKI,QAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,OAAb;AAAsB,QAAA,MAAM,EAAE,IAA9B;AAAoC,QAAA,WAAW,EAAE,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAQI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,EASI,oBAAC,MAAD;AACI,QAAA,QAAQ,EAAC,QADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAYI,oBAAC,OAAD;AACI,QAAA,SAAS,EAAE,KADf;AAEI,QAAA,OAAO,EAAC,uGAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,EAgBI,oBAAC,IAAD;AACI,QAAA,IAAI,EAAC,eADT;AAEI,QAAA,QAAQ,EAAC,SAFb;AAGI,QAAA,KAAK,EAAC,cAHV;AAII,QAAA,OAAO,EAAE,CACL,sBADK,EAEL,UAACM,YAAD,EAAeL,OAAf,EAA2B;AACvBA,UAAAA,OAAO,GAAG,CAACG,MAAM,CAACH,OAAO,GAAG,GAAX,CAAN,CAAsBI,OAAtB,CAA8B,CAA9B,CAAD,GAAoC,GAA9C;AACA,iBAAO;AACHE,YAAAA,IAAI,EAAED,YADH;AAEHE,YAAAA,KAAK,EAAEP;AAFJ,WAAP;AAIH,SARI,CAJb;AAcI,QAAA,KAAK,EAAE;AACHQ,UAAAA,SAAS,EAAE,CADR;AAEHC,UAAAA,MAAM,EAAE;AAFL,SAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBJ,CADG,CAAP;AA6CH;;;;EAhEkBlC,KAAK,CAACmC,S;AAmE7B,eAAexB,QAAf","sourcesContent":["import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport {\n    Chart,\n    Geom,\n    Axis,\n    Tooltip,\n    Coord,\n    Label,\n    Legend,\n} from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\n\n@inject('HomeStore')\n@observer\nclass PieChart extends React.Component {\n    render() {\n        const { DataView } = DataSet;\n        const data = this.props.HomeStore.devInfo;\n        const dv = new DataView();\n        dv.source(data).transform({\n            type: \"percent\",\n            field: \"number\",\n            dimension: \"customerName\",\n            as: \"percent\"\n        });\n        const cols = {\n            percent: {\n                formatter: val => {\n                    val = +Number(val * 100).toFixed(2) + \"%\";\n                    return val;\n                }\n            }\n        };\n        return <div>\n            <Chart\n                height='300'\n                data={dv}\n                scale={cols}\n                padding={'auto'}\n                forceFit\n            >\n                <Coord type={\"theta\"} radius={0.75} innerRadius={0.6} />\n                <Axis name=\"percent\" />\n                <Legend\n                    position=\"bottom\"\n                />\n                <Tooltip\n                    showTitle={false}\n                    itemTpl=\"<li><span style=&quot;background-color:{color};&quot; class=&quot;g2-tooltip-marker&quot;></span>{name}: {value}</li>\"\n                />\n                <Geom\n                    type=\"intervalStack\"\n                    position=\"percent\"\n                    color=\"customerName\"\n                    tooltip={[\n                        \"customerName*percent\",\n                        (customerName, percent) => {\n                            percent = +Number(percent * 100).toFixed(2) + \"%\";\n                            return {\n                                name: customerName,\n                                value: percent\n                            };\n                        }\n                    ]}\n                    style={{\n                        lineWidth: 1,\n                        stroke: \"#fff\"\n                    }}\n                >\n                    {/*<Label\n                        content=\"percent\"\n                        formatter={(val, customerName) => {\n                            return customerName.point.customerName + \": \" + val;\n                        }}\n                    />*/}\n                </Geom>\n            </Chart>\n        </div>\n    }\n\n}\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}