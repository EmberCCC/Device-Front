{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nvar _excluded = [\"eventKey\", \"className\", \"style\", \"dragOver\", \"dragOverGapTop\", \"dragOverGapBottom\", \"isLeaf\", \"isStart\", \"isEnd\", \"expanded\", \"selected\", \"checked\", \"halfChecked\", \"loading\", \"domRef\", \"active\", \"data\", \"onMouseMove\", \"selectable\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport pickAttrs from \"rc-util/es/pickAttrs\"; // @ts-ignore\n\nimport { TreeContext } from './contextTypes';\nimport Indent from './Indent';\nimport { convertNodePropsToEventData } from './utils/treeUtil';\nvar ICON_OPEN = 'open';\nvar ICON_CLOSE = 'close';\nvar defaultTitle = '---';\n\nvar InternalTreeNode = /*#__PURE__*/function (_React$Component) {\n  _inherits(InternalTreeNode, _React$Component);\n\n  var _super = _createSuper(InternalTreeNode);\n\n  function InternalTreeNode() {\n    var _this;\n\n    _classCallCheck(this, InternalTreeNode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      dragNodeHighlight: false\n    };\n    _this.selectHandle = void 0;\n\n    _this.onSelectorClick = function (e) {\n      // Click trigger before select/check operation\n      var onNodeClick = _this.props.context.onNodeClick;\n      onNodeClick(e, convertNodePropsToEventData(_this.props));\n\n      if (_this.isSelectable()) {\n        _this.onSelect(e);\n      } else {\n        _this.onCheck(e);\n      }\n    };\n\n    _this.onSelectorDoubleClick = function (e) {\n      var onNodeDoubleClick = _this.props.context.onNodeDoubleClick;\n      onNodeDoubleClick(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.onSelect = function (e) {\n      if (_this.isDisabled()) return;\n      var onNodeSelect = _this.props.context.onNodeSelect;\n      e.preventDefault();\n      onNodeSelect(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.onCheck = function (e) {\n      if (_this.isDisabled()) return;\n      var _this$props = _this.props,\n          disableCheckbox = _this$props.disableCheckbox,\n          checked = _this$props.checked;\n      var onNodeCheck = _this.props.context.onNodeCheck;\n      if (!_this.isCheckable() || disableCheckbox) return;\n      e.preventDefault();\n      var targetChecked = !checked;\n      onNodeCheck(e, convertNodePropsToEventData(_this.props), targetChecked);\n    };\n\n    _this.onMouseEnter = function (e) {\n      var onNodeMouseEnter = _this.props.context.onNodeMouseEnter;\n      onNodeMouseEnter(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.onMouseLeave = function (e) {\n      var onNodeMouseLeave = _this.props.context.onNodeMouseLeave;\n      onNodeMouseLeave(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.onContextMenu = function (e) {\n      var onNodeContextMenu = _this.props.context.onNodeContextMenu;\n      onNodeContextMenu(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.onDragStart = function (e) {\n      var onNodeDragStart = _this.props.context.onNodeDragStart;\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: true\n      });\n\n      onNodeDragStart(e, _assertThisInitialized(_this));\n\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', '');\n      } catch (error) {// empty\n      }\n    };\n\n    _this.onDragEnter = function (e) {\n      var onNodeDragEnter = _this.props.context.onNodeDragEnter;\n      e.preventDefault();\n      e.stopPropagation();\n      onNodeDragEnter(e, _assertThisInitialized(_this));\n    };\n\n    _this.onDragOver = function (e) {\n      var onNodeDragOver = _this.props.context.onNodeDragOver;\n      e.preventDefault();\n      e.stopPropagation();\n      onNodeDragOver(e, _assertThisInitialized(_this));\n    };\n\n    _this.onDragLeave = function (e) {\n      var onNodeDragLeave = _this.props.context.onNodeDragLeave;\n      e.stopPropagation();\n      onNodeDragLeave(e, _assertThisInitialized(_this));\n    };\n\n    _this.onDragEnd = function (e) {\n      var onNodeDragEnd = _this.props.context.onNodeDragEnd;\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: false\n      });\n\n      onNodeDragEnd(e, _assertThisInitialized(_this));\n    };\n\n    _this.onDrop = function (e) {\n      var onNodeDrop = _this.props.context.onNodeDrop;\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.setState({\n        dragNodeHighlight: false\n      });\n\n      onNodeDrop(e, _assertThisInitialized(_this));\n    };\n\n    _this.onExpand = function (e) {\n      var _this$props2 = _this.props,\n          loading = _this$props2.loading,\n          onNodeExpand = _this$props2.context.onNodeExpand;\n      if (loading) return;\n      onNodeExpand(e, convertNodePropsToEventData(_this.props));\n    };\n\n    _this.setSelectHandle = function (node) {\n      _this.selectHandle = node;\n    };\n\n    _this.getNodeState = function () {\n      var expanded = _this.props.expanded;\n\n      if (_this.isLeaf()) {\n        return null;\n      }\n\n      return expanded ? ICON_OPEN : ICON_CLOSE;\n    };\n\n    _this.hasChildren = function () {\n      var eventKey = _this.props.eventKey;\n      var keyEntities = _this.props.context.keyEntities;\n\n      var _ref = keyEntities[eventKey] || {},\n          children = _ref.children;\n\n      return !!(children || []).length;\n    };\n\n    _this.isLeaf = function () {\n      var _this$props3 = _this.props,\n          isLeaf = _this$props3.isLeaf,\n          loaded = _this$props3.loaded;\n      var loadData = _this.props.context.loadData;\n\n      var hasChildren = _this.hasChildren();\n\n      if (isLeaf === false) {\n        return false;\n      }\n\n      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;\n    };\n\n    _this.isDisabled = function () {\n      var disabled = _this.props.disabled;\n      var treeDisabled = _this.props.context.disabled;\n      return !!(treeDisabled || disabled);\n    };\n\n    _this.isCheckable = function () {\n      var checkable = _this.props.checkable;\n      var treeCheckable = _this.props.context.checkable; // Return false if tree or treeNode is not checkable\n\n      if (!treeCheckable || checkable === false) return false;\n      return treeCheckable;\n    };\n\n    _this.syncLoadData = function (props) {\n      var expanded = props.expanded,\n          loading = props.loading,\n          loaded = props.loaded;\n      var _this$props$context = _this.props.context,\n          loadData = _this$props$context.loadData,\n          onNodeLoad = _this$props$context.onNodeLoad;\n\n      if (loading) {\n        return;\n      } // read from state to avoid loadData at same time\n\n\n      if (loadData && expanded && !_this.isLeaf()) {\n        // We needn't reload data when has children in sync logic\n        // It's only needed in node expanded\n        if (!_this.hasChildren() && !loaded) {\n          onNodeLoad(convertNodePropsToEventData(_this.props));\n        }\n      }\n    };\n\n    _this.isDraggable = function () {\n      var _this$props4 = _this.props,\n          data = _this$props4.data,\n          draggable = _this$props4.context.draggable;\n      return !!(draggable && (!draggable.nodeDraggable || draggable.nodeDraggable(data)));\n    };\n\n    _this.renderDragHandler = function () {\n      var _this$props$context2 = _this.props.context,\n          draggable = _this$props$context2.draggable,\n          prefixCls = _this$props$context2.prefixCls;\n      return (draggable === null || draggable === void 0 ? void 0 : draggable.icon) ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-draggable-icon\")\n      }, draggable.icon) : null;\n    };\n\n    _this.renderSwitcherIconDom = function (isLeaf) {\n      var switcherIconFromProps = _this.props.switcherIcon;\n      var switcherIconFromCtx = _this.props.context.switcherIcon;\n      var switcherIcon = switcherIconFromProps || switcherIconFromCtx; // if switcherIconDom is null, no render switcher span\n\n      if (typeof switcherIcon === 'function') {\n        return switcherIcon(_objectSpread(_objectSpread({}, _this.props), {}, {\n          isLeaf: isLeaf\n        }));\n      }\n\n      return switcherIcon;\n    };\n\n    _this.renderSwitcher = function () {\n      var expanded = _this.props.expanded;\n      var prefixCls = _this.props.context.prefixCls;\n\n      if (_this.isLeaf()) {\n        // if switcherIconDom is null, no render switcher span\n        var _switcherIconDom = _this.renderSwitcherIconDom(true);\n\n        return _switcherIconDom !== false ? /*#__PURE__*/React.createElement(\"span\", {\n          className: classNames(\"\".concat(prefixCls, \"-switcher\"), \"\".concat(prefixCls, \"-switcher-noop\"))\n        }, _switcherIconDom) : null;\n      }\n\n      var switcherCls = classNames(\"\".concat(prefixCls, \"-switcher\"), \"\".concat(prefixCls, \"-switcher_\").concat(expanded ? ICON_OPEN : ICON_CLOSE));\n\n      var switcherIconDom = _this.renderSwitcherIconDom(false);\n\n      return switcherIconDom !== false ? /*#__PURE__*/React.createElement(\"span\", {\n        onClick: _this.onExpand,\n        className: switcherCls\n      }, switcherIconDom) : null;\n    };\n\n    _this.renderCheckbox = function () {\n      var _this$props5 = _this.props,\n          checked = _this$props5.checked,\n          halfChecked = _this$props5.halfChecked,\n          disableCheckbox = _this$props5.disableCheckbox;\n      var prefixCls = _this.props.context.prefixCls;\n\n      var disabled = _this.isDisabled();\n\n      var checkable = _this.isCheckable();\n\n      if (!checkable) return null; // [Legacy] Custom element should be separate with `checkable` in future\n\n      var $custom = typeof checkable !== 'boolean' ? checkable : null;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(\"\".concat(prefixCls, \"-checkbox\"), checked && \"\".concat(prefixCls, \"-checkbox-checked\"), !checked && halfChecked && \"\".concat(prefixCls, \"-checkbox-indeterminate\"), (disabled || disableCheckbox) && \"\".concat(prefixCls, \"-checkbox-disabled\")),\n        onClick: _this.onCheck\n      }, $custom);\n    };\n\n    _this.renderIcon = function () {\n      var loading = _this.props.loading;\n      var prefixCls = _this.props.context.prefixCls;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(\"\".concat(prefixCls, \"-iconEle\"), \"\".concat(prefixCls, \"-icon__\").concat(_this.getNodeState() || 'docu'), loading && \"\".concat(prefixCls, \"-icon_loading\"))\n      });\n    };\n\n    _this.renderSelector = function () {\n      var dragNodeHighlight = _this.state.dragNodeHighlight;\n      var _this$props6 = _this.props,\n          title = _this$props6.title,\n          selected = _this$props6.selected,\n          icon = _this$props6.icon,\n          loading = _this$props6.loading,\n          data = _this$props6.data;\n      var _this$props$context3 = _this.props.context,\n          prefixCls = _this$props$context3.prefixCls,\n          showIcon = _this$props$context3.showIcon,\n          treeIcon = _this$props$context3.icon,\n          loadData = _this$props$context3.loadData,\n          titleRender = _this$props$context3.titleRender;\n\n      var disabled = _this.isDisabled();\n\n      var wrapClass = \"\".concat(prefixCls, \"-node-content-wrapper\"); // Icon - Still show loading icon when loading without showIcon\n\n      var $icon;\n\n      if (showIcon) {\n        var currentIcon = icon || treeIcon;\n        $icon = currentIcon ? /*#__PURE__*/React.createElement(\"span\", {\n          className: classNames(\"\".concat(prefixCls, \"-iconEle\"), \"\".concat(prefixCls, \"-icon__customize\"))\n        }, typeof currentIcon === 'function' ? currentIcon(_this.props) : currentIcon) : _this.renderIcon();\n      } else if (loadData && loading) {\n        $icon = _this.renderIcon();\n      } // Title\n\n\n      var titleNode;\n\n      if (typeof title === 'function') {\n        titleNode = title(data);\n      } else if (titleRender) {\n        titleNode = titleRender(data);\n      } else {\n        titleNode = title;\n      }\n\n      var $title = /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-title\")\n      }, titleNode);\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: _this.setSelectHandle,\n        title: typeof title === 'string' ? title : '',\n        className: classNames(\"\".concat(wrapClass), \"\".concat(wrapClass, \"-\").concat(_this.getNodeState() || 'normal'), !disabled && (selected || dragNodeHighlight) && \"\".concat(prefixCls, \"-node-selected\")),\n        onMouseEnter: _this.onMouseEnter,\n        onMouseLeave: _this.onMouseLeave,\n        onContextMenu: _this.onContextMenu,\n        onClick: _this.onSelectorClick,\n        onDoubleClick: _this.onSelectorDoubleClick\n      }, $icon, $title, _this.renderDropIndicator());\n    };\n\n    _this.renderDropIndicator = function () {\n      var _this$props7 = _this.props,\n          disabled = _this$props7.disabled,\n          eventKey = _this$props7.eventKey;\n      var _this$props$context4 = _this.props.context,\n          draggable = _this$props$context4.draggable,\n          dropLevelOffset = _this$props$context4.dropLevelOffset,\n          dropPosition = _this$props$context4.dropPosition,\n          prefixCls = _this$props$context4.prefixCls,\n          indent = _this$props$context4.indent,\n          dropIndicatorRender = _this$props$context4.dropIndicatorRender,\n          dragOverNodeKey = _this$props$context4.dragOverNodeKey,\n          direction = _this$props$context4.direction;\n      var rootDraggable = draggable !== false; // allowDrop is calculated in Tree.tsx, there is no need for calc it here\n\n      var showIndicator = !disabled && rootDraggable && dragOverNodeKey === eventKey;\n      return showIndicator ? dropIndicatorRender({\n        dropPosition: dropPosition,\n        dropLevelOffset: dropLevelOffset,\n        indent: indent,\n        prefixCls: prefixCls,\n        direction: direction\n      }) : null;\n    };\n\n    return _this;\n  }\n\n  _createClass(InternalTreeNode, [{\n    key: \"componentDidMount\",\n    value: // Isomorphic needn't load data in server side\n    function componentDidMount() {\n      this.syncLoadData(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.syncLoadData(this.props);\n    }\n  }, {\n    key: \"isSelectable\",\n    value: function isSelectable() {\n      var selectable = this.props.selectable;\n      var treeSelectable = this.props.context.selectable; // Ignore when selectable is undefined or null\n\n      if (typeof selectable === 'boolean') {\n        return selectable;\n      }\n\n      return treeSelectable;\n    }\n  }, {\n    key: \"render\",\n    value: // =========================== Render ===========================\n    function render() {\n      var _classNames;\n\n      var _this$props8 = this.props,\n          eventKey = _this$props8.eventKey,\n          className = _this$props8.className,\n          style = _this$props8.style,\n          dragOver = _this$props8.dragOver,\n          dragOverGapTop = _this$props8.dragOverGapTop,\n          dragOverGapBottom = _this$props8.dragOverGapBottom,\n          isLeaf = _this$props8.isLeaf,\n          isStart = _this$props8.isStart,\n          isEnd = _this$props8.isEnd,\n          expanded = _this$props8.expanded,\n          selected = _this$props8.selected,\n          checked = _this$props8.checked,\n          halfChecked = _this$props8.halfChecked,\n          loading = _this$props8.loading,\n          domRef = _this$props8.domRef,\n          active = _this$props8.active,\n          data = _this$props8.data,\n          onMouseMove = _this$props8.onMouseMove,\n          selectable = _this$props8.selectable,\n          otherProps = _objectWithoutProperties(_this$props8, _excluded);\n\n      var _this$props$context5 = this.props.context,\n          prefixCls = _this$props$context5.prefixCls,\n          filterTreeNode = _this$props$context5.filterTreeNode,\n          keyEntities = _this$props$context5.keyEntities,\n          dropContainerKey = _this$props$context5.dropContainerKey,\n          dropTargetKey = _this$props$context5.dropTargetKey,\n          draggingNodeKey = _this$props$context5.draggingNodeKey;\n      var disabled = this.isDisabled();\n      var dataOrAriaAttributeProps = pickAttrs(otherProps, {\n        aria: true,\n        data: true\n      });\n\n      var _ref2 = keyEntities[eventKey] || {},\n          level = _ref2.level;\n\n      var isEndNode = isEnd[isEnd.length - 1];\n      var mergedDraggable = this.isDraggable();\n      var draggableWithoutDisabled = !disabled && mergedDraggable;\n      var dragging = draggingNodeKey === eventKey;\n      var ariaSelected = selectable !== undefined ? {\n        'aria-selected': !!selectable\n      } : undefined;\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        ref: domRef,\n        className: classNames(className, \"\".concat(prefixCls, \"-treenode\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-switcher-\").concat(expanded ? 'open' : 'close'), !isLeaf), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-checkbox-checked\"), checked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-checkbox-indeterminate\"), halfChecked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-selected\"), selected), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-loading\"), loading), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-active\"), active), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-leaf-last\"), isEndNode), _defineProperty(_classNames, \"\".concat(prefixCls, \"-treenode-draggable\"), draggableWithoutDisabled), _defineProperty(_classNames, \"dragging\", dragging), _defineProperty(_classNames, 'drop-target', dropTargetKey === eventKey), _defineProperty(_classNames, 'drop-container', dropContainerKey === eventKey), _defineProperty(_classNames, 'drag-over', !disabled && dragOver), _defineProperty(_classNames, 'drag-over-gap-top', !disabled && dragOverGapTop), _defineProperty(_classNames, 'drag-over-gap-bottom', !disabled && dragOverGapBottom), _defineProperty(_classNames, 'filter-node', filterTreeNode && filterTreeNode(convertNodePropsToEventData(this.props))), _classNames)),\n        style: style // Draggable config\n        ,\n        draggable: draggableWithoutDisabled,\n        \"aria-grabbed\": dragging,\n        onDragStart: draggableWithoutDisabled ? this.onDragStart : undefined // Drop config\n        ,\n        onDragEnter: mergedDraggable ? this.onDragEnter : undefined,\n        onDragOver: mergedDraggable ? this.onDragOver : undefined,\n        onDragLeave: mergedDraggable ? this.onDragLeave : undefined,\n        onDrop: mergedDraggable ? this.onDrop : undefined,\n        onDragEnd: mergedDraggable ? this.onDragEnd : undefined,\n        onMouseMove: onMouseMove\n      }, ariaSelected, dataOrAriaAttributeProps), /*#__PURE__*/React.createElement(Indent, {\n        prefixCls: prefixCls,\n        level: level,\n        isStart: isStart,\n        isEnd: isEnd\n      }), this.renderDragHandler(), this.renderSwitcher(), this.renderCheckbox(), this.renderSelector());\n    }\n  }]);\n\n  return InternalTreeNode;\n}(React.Component);\n\nvar ContextTreeNode = function ContextTreeNode(props) {\n  return /*#__PURE__*/React.createElement(TreeContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(InternalTreeNode, _extends({}, props, {\n      context: context\n    }));\n  });\n};\n\nContextTreeNode.displayName = 'TreeNode';\nContextTreeNode.defaultProps = {\n  title: defaultTitle\n};\nContextTreeNode.isTreeNode = 1;\nexport { InternalTreeNode };\nexport default ContextTreeNode;","map":null,"metadata":{},"sourceType":"module"}