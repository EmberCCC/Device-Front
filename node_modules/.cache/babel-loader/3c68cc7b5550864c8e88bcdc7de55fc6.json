{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar dateUtil_1 = require(\"../../utils/dateUtil\");\n\nvar RangeContext_1 = __importDefault(require(\"../../RangeContext\"));\n\nvar PanelContext_1 = __importDefault(require(\"../../PanelContext\"));\n\nvar useCellClassName_1 = __importDefault(require(\"../../hooks/useCellClassName\"));\n\nfunction DateBody(_ref) {\n  var prefixCls = _ref.prefixCls,\n      generateConfig = _ref.generateConfig,\n      prefixColumn = _ref.prefixColumn,\n      rowClassName = _ref.rowClassName,\n      locale = _ref.locale,\n      rowCount = _ref.rowCount,\n      viewDate = _ref.viewDate,\n      value = _ref.value,\n      disabledDate = _ref.disabledDate,\n      dateRender = _ref.dateRender,\n      onSelect = _ref.onSelect;\n\n  var _React$useContext = React.useContext(RangeContext_1.default),\n      rangedValue = _React$useContext.rangedValue,\n      hoverRangedValue = _React$useContext.hoverRangedValue;\n\n  var _React$useContext2 = React.useContext(PanelContext_1.default),\n      onDateMouseEnter = _React$useContext2.onDateMouseEnter,\n      onDateMouseLeave = _React$useContext2.onDateMouseLeave;\n\n  var datePrefixCls = \"\".concat(prefixCls, \"-cell\");\n  var weekFirstDay = generateConfig.locale.getWeekFirstDay(locale.locale);\n  var today = generateConfig.getNow(); // ============================== Header ==============================\n\n  var headerCells = [];\n  var weekDaysLocale = locale.shortWeekDays || (generateConfig.locale.getShortWeekDays ? generateConfig.locale.getShortWeekDays(locale.locale) : []);\n\n  if (prefixColumn) {\n    headerCells.push(React.createElement(\"th\", {\n      key: \"empty\"\n    }));\n  }\n\n  for (var i = 0; i < dateUtil_1.WEEK_DAY_COUNT; i += 1) {\n    headerCells.push(React.createElement(\"th\", {\n      key: i\n    }, weekDaysLocale[(i + weekFirstDay) % dateUtil_1.WEEK_DAY_COUNT]));\n  } // =============================== Date ===============================\n\n\n  var rows = [];\n  var startDate = dateUtil_1.getWeekStartDate(locale.locale, generateConfig, viewDate);\n  var getCellClassName = useCellClassName_1.default({\n    cellPrefixCls: datePrefixCls,\n    today: today,\n    value: value,\n    generateConfig: generateConfig,\n    rangedValue: prefixColumn ? null : rangedValue,\n    hoverRangedValue: prefixColumn ? null : hoverRangedValue,\n    isSameCell: function isSameCell(current, target) {\n      return dateUtil_1.isSameDate(generateConfig, current, target);\n    },\n    isInView: function isInView(date) {\n      return dateUtil_1.isSameMonth(generateConfig, date, viewDate);\n    },\n    offsetCell: function offsetCell(date, offset) {\n      return generateConfig.addDate(date, offset);\n    }\n  });\n\n  for (var y = 0; y < rowCount; y += 1) {\n    var row = [];\n    var startWeekDate = generateConfig.addDate(startDate, y * dateUtil_1.WEEK_DAY_COUNT);\n\n    if (prefixColumn) {\n      row.push(prefixColumn(startWeekDate));\n    }\n\n    var _loop = function _loop(x) {\n      var currentDate = generateConfig.addDate(startWeekDate, x);\n      var disabled = disabledDate && disabledDate(currentDate);\n      row.push(React.createElement(\"td\", {\n        key: \"\".concat(x, \"-\").concat(y),\n        title: generateConfig.locale.format(locale.locale, currentDate, 'YYYY-MM-DD'),\n        onClick: function onClick() {\n          if (!disabled) {\n            onSelect(currentDate, 'mouse');\n          }\n        },\n        onMouseEnter: function onMouseEnter() {\n          if (!disabled && onDateMouseEnter) {\n            onDateMouseEnter(currentDate);\n          }\n        },\n        onMouseLeave: function onMouseLeave() {\n          if (!disabled && onDateMouseLeave) {\n            onDateMouseLeave(currentDate);\n          }\n        },\n        className: classnames_1.default(datePrefixCls, _objectSpread(_defineProperty({}, \"\".concat(datePrefixCls, \"-disabled\"), disabled), getCellClassName(currentDate)))\n      }, dateRender ? dateRender(currentDate, today) : React.createElement(\"div\", {\n        className: \"\".concat(datePrefixCls, \"-inner\")\n      }, generateConfig.getDate(currentDate))));\n    };\n\n    for (var x = 0; x < dateUtil_1.WEEK_DAY_COUNT; x += 1) {\n      _loop(x);\n    }\n\n    rows.push(React.createElement(\"tr\", {\n      key: y,\n      className: classnames_1.default(rowClassName && rowClassName(startWeekDate))\n    }, row));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-body\")\n  }, React.createElement(\"table\", {\n    className: \"\".concat(prefixCls, \"-content\")\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, headerCells)), React.createElement(\"tbody\", null, rows)));\n}\n\nexports.default = DateBody;","map":null,"metadata":{},"sourceType":"script"}