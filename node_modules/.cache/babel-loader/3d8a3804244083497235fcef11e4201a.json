{"ast":null,"code":"import \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _objectSpread from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport _classCallCheck from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/tag/style\";\nimport _Tag from \"antd/lib/tag\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/rate/style\";\nimport _Rate from \"antd/lib/rate\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\src\\\\layouts\\\\MytestLayout\\\\index.js\";\nimport React, { Component } from 'react';\nimport Sortable from 'react-sortablejs';\nimport uniqueId from 'lodash/uniqueId';\nimport update from 'immutability-helper'; // import styles from './index.css'\n\nimport _ from \"lodash\";\nimport { indexToArray, getItem, setInfo, isPath, getCloneItem, itemRemove, itemAdd } from './utils'; // import find from 'find-process';\n\nvar MonthPicker = _DatePicker.MonthPicker,\n    RangePicker = _DatePicker.RangePicker,\n    WeekPicker = _DatePicker.WeekPicker;\nvar GlobalComponent = {\n  Rate: _Rate,\n  Input: _Input,\n  MonthPicker: MonthPicker,\n  RangePicker: RangePicker,\n  WeekPicker: WeekPicker,\n  Tag: _Tag\n};\nvar soundData = [{\n  name: '日期',\n  attr: {}\n}, {\n  name: 'RangePicker',\n  attr: {}\n}, {\n  name: 'WeekPicker',\n  attr: {}\n}, {\n  name: 'Input',\n  attr: {\n    size: 'large',\n    value: '第一个'\n  }\n}, {\n  name: 'Tag',\n  attr: {\n    value: '11111'\n  }\n}, {\n  name: 'Containers',\n  attr: {\n    style: {\n      background: '#fff',\n      border: '1px #e5e5e5e5 solid'\n    }\n  }\n}];\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n\n    _this.sortableAdd = function (evt) {\n      console.log(evt); // 组件名或路径\n\n      var nameOrIndex = evt.clone.getAttribute('data-id'); // 父节点路径\n\n      var parentPath = evt.path[1].getAttribute('data-id'); // 拖拽元素的目标路径\n\n      var newIndex = evt.newIndex; // 新路径 为根节点时直接使用index\n\n      var newPath = parentPath ? \"\".concat(parentPath, \"-\").concat(newIndex) : newIndex; // 判断是否为路径 路径执行移动，非路径为新增\n\n      if (isPath(nameOrIndex)) {\n        // 旧的路径index\n        var oldIndex = nameOrIndex; // 克隆要移动的元素\n\n        var dragItem = getCloneItem(oldIndex, _this.state.Data); // 比较路径的上下位置 先执行靠下的数据 再执行考上数据\n\n        if (indexToArray(oldIndex) > indexToArray(newPath)) {\n          // 删除元素 获得新数据\n          var newTreeData = itemRemove(oldIndex, _this.state.Data); // 添加拖拽元素\n\n          newTreeData = itemAdd(newPath, newTreeData, dragItem); // 更新视图\n\n          _this.setState({\n            Data: newTreeData\n          });\n\n          return;\n        } // 添加拖拽元素\n\n\n        var newData = itemAdd(newPath, _this.state.Data, dragItem); // 删除元素 获得新数据\n\n        newData = itemRemove(oldIndex, newData);\n\n        _this.setState({\n          Data: newData\n        });\n\n        return;\n      } // 新增流程 创建元素 => 插入元素 => 更新视图\n\n\n      var id = nameOrIndex;\n\n      var newItem = _.cloneDeep(soundData.find(function (item) {\n        return item.name === id;\n      })); // 为容器或者弹框时增加子元素\n\n\n      if (newItem.name === 'Containers') {\n        // const ComponentsInfo = _.cloneDeep(GlobalComponent[newItem.name])\n        // 判断是否包含默认数据\n        newItem.children = [];\n      }\n\n      var Data = itemAdd(newPath, _this.state.Data, newItem); // console.log(this.state.Data);\n\n      _this.setState({\n        Data: Data\n      });\n    };\n\n    _this.sortableUpdate = function (evt) {\n      // 交换数组\n      var newIndex = evt.newIndex,\n          oldIndex = evt.oldIndex; // 父节点路径\n\n      var parentPath = evt.path[1].getAttribute('data-id'); // 父元素 根节点时直接调用data\n\n      var parent = parentPath ? getItem(parentPath, _this.state.Data) : _this.state.Data; // 当前拖拽元素\n\n      var dragItem = parent[oldIndex]; // 更新后的父节点\n\n      parent = update(parent, {\n        $splice: [[oldIndex, 1], [newIndex, 0, dragItem]]\n      }); // 最新的数据 根节点时直接调用data\n\n      var Data = parentPath ? setInfo(parentPath, _this.state.Data, parent) : parent; // 调用父组件更新方法\n\n      _this.setState({\n        Data: Data\n      });\n    };\n\n    _this.state = {\n      Data: [{\n        name: 'Input',\n        attr: {\n          size: 'large',\n          value: '第一个'\n        }\n      }],\n      checkedData: null\n    };\n    return _this;\n  } // 拖拽的添加方法\n\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // 递归函数\n      var loop = function loop(arr, index) {\n        return arr.map(function (item, i) {\n          var indexs = index === '' ? String(i) : \"\".concat(index, \"-\").concat(i);\n\n          if (item.children) {\n            return React.createElement(\"div\", Object.assign({\n              className: styles.itemDiv\n            }, item.attr, {\n              \"data-id\": indexs,\n              onClick: function onClick() {\n                _this2.setState({\n                  checkedData: item\n                });\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155\n              },\n              __self: this\n            }), React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160\n              },\n              __self: this\n            }, item.name), React.createElement(_Icon, {\n              type: \"delete\",\n              onClick: function onClick() {\n                // 删除元素 获得新数据\n                var newTreeData = itemRemove(indexs, _this2.state.Data); // 更新视图\n\n                _this2.setState({\n                  Data: newTreeData\n                });\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 161\n              },\n              __self: this\n            }), React.createElement(Sortable, {\n              key: uniqueId(),\n              style: {\n                minHeight: 100,\n                margin: 10\n              },\n              ref: function ref(c) {\n                return c && (_this2.sortable = c.sortable);\n              },\n              options: _objectSpread({}, sortableOption, {\n                onUpdate: function onUpdate(evt) {\n                  return _this2.sortableUpdate(evt);\n                },\n                onAdd: function onAdd(evt) {\n                  return _this2.sortableAdd(evt);\n                }\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167\n              },\n              __self: this\n            }, loop(item.children, indexs)));\n          }\n\n          var ComponentInfo = GlobalComponent[item.name];\n          return React.createElement(\"div\", {\n            className: styles.itemDiv,\n            \"data-id\": indexs,\n            onClick: function onClick(e) {\n              e.stopPropagation();\n\n              _this2.setState({\n                checkedData: item\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          }, item.name), React.createElement(_Icon, {\n            type: \"delete\",\n            onClick: function onClick() {\n              // 删除元素 获得新数据\n              var newTreeData = itemRemove(indexs, _this2.state.Data); // 更新视图\n\n              _this2.setState({\n                Data: newTreeData\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191\n            },\n            __self: this\n          })), React.createElement(ComponentInfo, Object.assign({}, item.attr, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          })));\n        });\n      };\n\n      var sortableOption = {\n        animation: 150,\n        fallbackOnBody: true,\n        swapThreshold: 0.65,\n        group: {\n          name: 'formItem',\n          pull: true,\n          put: true\n        }\n      };\n      return React.createElement(\"div\", {\n        className: styles.homePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.leftDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Sortable, {\n        options: {\n          group: {\n            name: 'formItem',\n            pull: 'clone',\n            put: false\n          },\n          sort: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, soundData.map(function (item) {\n        return React.createElement(\"div\", {\n          \"data-id\": item.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: styles.itemTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, item.name));\n      }))), React.createElement(\"div\", {\n        className: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(Sortable, {\n        ref: function ref(c) {\n          return c && (_this2.sortable = c.sortable);\n        },\n        options: _objectSpread({}, sortableOption, {\n          onUpdate: function onUpdate(evt) {\n            return _this2.sortableUpdate(evt);\n          },\n          onAdd: function onAdd(evt) {\n            return _this2.sortableAdd(evt);\n          }\n        }),\n        key: uniqueId(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, loop(this.state.Data, ''))), React.createElement(\"div\", {\n        className: styles.rigthDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        label: \"\\u540D\\u79F0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(_Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u63A7\\u4EF6\\u540D\\u79F0\",\n        value: this.state.checkedData ? this.state.checkedData.name : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })), React.createElement(_Form.Item, {\n        label: \"\\u9ED8\\u8BA4\\u503C\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(_Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u9ED8\\u8BA4\\u503C\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default Index;","map":{"version":3,"sources":["D:\\GGdownload\\设备运维前端\\bl-device-manage\\src\\layouts\\MytestLayout\\index.js"],"names":["React","Component","Sortable","uniqueId","update","_","indexToArray","getItem","setInfo","isPath","getCloneItem","itemRemove","itemAdd","MonthPicker","RangePicker","WeekPicker","GlobalComponent","Rate","Input","Tag","soundData","name","attr","size","value","style","background","border","Index","props","sortableAdd","evt","console","log","nameOrIndex","clone","getAttribute","parentPath","path","newIndex","newPath","oldIndex","dragItem","state","Data","newTreeData","setState","newData","id","newItem","cloneDeep","find","item","children","sortableUpdate","parent","$splice","checkedData","loop","arr","index","map","i","indexs","String","styles","itemDiv","minHeight","margin","c","sortable","sortableOption","onUpdate","onAdd","ComponentInfo","e","stopPropagation","animation","fallbackOnBody","swapThreshold","group","pull","put","homePage","leftDiv","sort","itemTag","content","rigthDiv"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Rate, Input, DatePicker, Tag, Icon, Form } from 'antd';\r\nimport Sortable from 'react-sortablejs';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport update from 'immutability-helper'\r\n// import styles from './index.css'\r\nimport _ from \"lodash\";\r\n\r\nimport { indexToArray, getItem, setInfo, isPath, getCloneItem, itemRemove, itemAdd } from './utils'\r\n// import find from 'find-process';\r\nconst { MonthPicker, RangePicker, WeekPicker } = DatePicker;\r\nconst GlobalComponent = {\r\n    Rate,\r\n    Input,\r\n    MonthPicker,\r\n    RangePicker,\r\n    WeekPicker,\r\n    Tag\r\n}\r\n\r\n\r\nconst soundData = [\r\n    {\r\n        name: '日期',\r\n        attr: {}\r\n    },\r\n    {\r\n        name: 'RangePicker',\r\n        attr: {}\r\n    },\r\n    {\r\n        name: 'WeekPicker',\r\n        attr: {}\r\n    },\r\n    {\r\n        name: 'Input',\r\n        attr: {\r\n            size: 'large',\r\n            value: '第一个'\r\n        }\r\n    },\r\n    {\r\n        name: 'Tag',\r\n        attr: {\r\n            value: '11111'\r\n        }\r\n    },\r\n    {\r\n        name: 'Containers',\r\n        attr: {\r\n            style: {\r\n                background: '#fff',\r\n                border: '1px #e5e5e5e5 solid'\r\n            }\r\n        },\r\n    }\r\n]\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Data: [{\r\n                name: 'Input',\r\n                attr: {\r\n                    size: 'large',\r\n                    value: '第一个'\r\n                }\r\n            }],\r\n            checkedData: null\r\n        };\r\n    }\r\n\r\n    // 拖拽的添加方法\r\n    sortableAdd = evt => {\r\n        console.log(evt)\r\n        // 组件名或路径\r\n        const nameOrIndex = evt.clone.getAttribute('data-id');\r\n        // 父节点路径\r\n        const parentPath = evt.path[1].getAttribute('data-id');\r\n        // 拖拽元素的目标路径\r\n        const { newIndex } = evt;\r\n        // 新路径 为根节点时直接使用index\r\n        const newPath = parentPath ? `${parentPath}-${newIndex}` : newIndex;\r\n        // 判断是否为路径 路径执行移动，非路径为新增\r\n        if (isPath(nameOrIndex)) {\r\n            // 旧的路径index\r\n            const oldIndex = nameOrIndex;\r\n            // 克隆要移动的元素\r\n            const dragItem = getCloneItem(oldIndex, this.state.Data)\r\n            // 比较路径的上下位置 先执行靠下的数据 再执行考上数据\r\n            if (indexToArray(oldIndex) > indexToArray(newPath)) {\r\n                // 删除元素 获得新数据\r\n                let newTreeData = itemRemove(oldIndex, this.state.Data);\r\n                // 添加拖拽元素\r\n                newTreeData = itemAdd(newPath, newTreeData, dragItem)\r\n                // 更新视图\r\n                this.setState({ Data: newTreeData })\r\n                return\r\n            }\r\n            // 添加拖拽元素\r\n            let newData = itemAdd(newPath, this.state.Data, dragItem)\r\n            // 删除元素 获得新数据\r\n            newData = itemRemove(oldIndex, newData);\r\n            this.setState({ Data: newData })\r\n            return\r\n        }\r\n\r\n        // 新增流程 创建元素 => 插入元素 => 更新视图\r\n        const id = nameOrIndex\r\n\r\n        const newItem = _.cloneDeep(soundData.find(item => (item.name === id)))\r\n\r\n        // 为容器或者弹框时增加子元素\r\n        if (newItem.name === 'Containers') {\r\n            // const ComponentsInfo = _.cloneDeep(GlobalComponent[newItem.name])\r\n            // 判断是否包含默认数据\r\n            newItem.children = []\r\n        }\r\n\r\n        const Data = itemAdd(newPath, this.state.Data, newItem)\r\n        // console.log(this.state.Data);\r\n        this.setState({ Data })\r\n    }\r\n\r\n    // 拖拽的排序方法\r\n    sortableUpdate = evt => {\r\n        // 交换数组\r\n        const { newIndex, oldIndex } = evt;\r\n\r\n        // 父节点路径\r\n        const parentPath = evt.path[1].getAttribute('data-id');\r\n\r\n        // 父元素 根节点时直接调用data\r\n        let parent = parentPath ? getItem(parentPath, this.state.Data) : this.state.Data;\r\n        // 当前拖拽元素\r\n        const dragItem = parent[oldIndex];\r\n        // 更新后的父节点\r\n        parent = update(parent, {\r\n            $splice: [[oldIndex, 1], [newIndex, 0, dragItem]],\r\n        });\r\n\r\n        // 最新的数据 根节点时直接调用data\r\n        const Data = parentPath ? setInfo(parentPath, this.state.Data, parent) : parent\r\n        // 调用父组件更新方法\r\n        this.setState({ Data })\r\n\r\n    }\r\n\r\n    render() {\r\n        // 递归函数\r\n        const loop = (arr, index) => (\r\n            arr.map((item, i) => {\r\n                const indexs = index === '' ? String(i) : `${index}-${i}`;\r\n                if (item.children) {\r\n                    return <div className={styles.itemDiv} {...item.attr}\r\n                        data-id={indexs} onClick={() => {\r\n                            this.setState({ checkedData: item })\r\n                        }}\r\n                    >\r\n                        <span>{item.name}</span>\r\n                        <Icon type=\"delete\" onClick={() => {\r\n                            // 删除元素 获得新数据\r\n                            let newTreeData = itemRemove(indexs, this.state.Data);\r\n                            // 更新视图\r\n                            this.setState({ Data: newTreeData })\r\n                        }} />\r\n                        <Sortable\r\n                            key={uniqueId()}\r\n                            style={{\r\n                                minHeight: 100,\r\n                                margin: 10,\r\n                            }}\r\n                            ref={c => c && (this.sortable = c.sortable)}\r\n                            options={{\r\n                                ...sortableOption,\r\n                                onUpdate: evt => (this.sortableUpdate(evt)),\r\n                                onAdd: evt => (this.sortableAdd(evt)),\r\n                            }}\r\n                        >\r\n                            {loop(item.children, indexs)}\r\n                        </Sortable>\r\n                    </div>\r\n                }\r\n                const ComponentInfo = GlobalComponent[item.name]\r\n                return <div className={styles.itemDiv} data-id={indexs} onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    this.setState({ checkedData: item })\r\n                }}>\r\n                    <div>\r\n                        <span>{item.name}</span>\r\n                        <Icon type=\"delete\" onClick={() => {\r\n                            // 删除元素 获得新数据\r\n                            let newTreeData = itemRemove(indexs, this.state.Data);\r\n                            // 更新视图\r\n                            this.setState({ Data: newTreeData })\r\n                        }} />\r\n                    </div>\r\n                    <ComponentInfo {...item.attr} />\r\n                </div>\r\n            })\r\n        )\r\n\r\n        const sortableOption = {\r\n            animation: 150,\r\n            fallbackOnBody: true,\r\n            swapThreshold: 0.65,\r\n            group: {\r\n                name: 'formItem',\r\n                pull: true,\r\n                put: true,\r\n            },\r\n        }\r\n\r\n        return (\r\n            <div className={styles.homePage}>\r\n                <div className={styles.leftDiv}>\r\n                    <Sortable\r\n                        options={{\r\n                            group: {\r\n                                name: 'formItem',\r\n                                pull: 'clone',\r\n                                put: false,\r\n                            },\r\n                            sort: false,\r\n                        }}\r\n                    >\r\n                        {\r\n                            soundData.map(item => {\r\n                                return <div data-id={item.name}><span className={styles.itemTag}>{item.name}</span></div>\r\n                            })\r\n                        }\r\n                    </Sortable>\r\n                </div>\r\n                <div className={styles.content}>\r\n                    <Sortable\r\n                        ref={c => c && (this.sortable = c.sortable)}\r\n                        options={{\r\n                            ...sortableOption,\r\n                            onUpdate: evt => (this.sortableUpdate(evt)),\r\n                            onAdd: evt => (this.sortableAdd(evt)),\r\n                        }}\r\n                        key={uniqueId()}\r\n                    >\r\n                        {loop(this.state.Data, '')}\r\n                    </Sortable>\r\n                </div>\r\n                <div className={styles.rigthDiv}>\r\n                    <Form >\r\n                        <Form.Item label='名称'>\r\n                            <Input placeholder='请输入控件名称' value={this.state.checkedData ? this.state.checkedData.name : ''} />\r\n                        </Form.Item>\r\n                        <Form.Item label='默认值'>\r\n                            <Input placeholder='请输入默认值' />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n\r\n"]},"metadata":{},"sourceType":"module"}