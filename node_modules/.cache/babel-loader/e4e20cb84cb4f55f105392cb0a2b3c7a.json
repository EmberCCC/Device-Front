{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nvar _excluded = [\"defaultOpen\", \"getContainer\", \"wrapperClassName\", \"forceRender\", \"handler\"],\n    _excluded2 = [\"visible\", \"afterClose\"];\nimport Portal from \"rc-util/es/PortalWrapper\";\nimport * as React from 'react';\nimport Child from './DrawerChild';\n\nvar DrawerWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(DrawerWrapper, _React$Component);\n\n  var _super = _createSuper(DrawerWrapper);\n\n  function DrawerWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, DrawerWrapper);\n\n    _this = _super.call(this, props);\n    _this.dom = void 0;\n\n    _this.onHandleClick = function (e) {\n      var _this$props = _this.props,\n          onHandleClick = _this$props.onHandleClick,\n          $open = _this$props.open;\n\n      if (onHandleClick) {\n        onHandleClick(e);\n      }\n\n      if (typeof $open === 'undefined') {\n        var open = _this.state.open;\n\n        _this.setState({\n          open: !open\n        });\n      }\n    };\n\n    _this.onClose = function (e) {\n      var _this$props2 = _this.props,\n          onClose = _this$props2.onClose,\n          open = _this$props2.open;\n\n      if (onClose) {\n        onClose(e);\n      }\n\n      if (typeof open === 'undefined') {\n        _this.setState({\n          open: false\n        });\n      }\n    };\n\n    var _open = typeof props.open !== 'undefined' ? props.open : !!props.defaultOpen;\n\n    _this.state = {\n      open: _open\n    };\n\n    if ('onMaskClick' in props) {\n      console.warn('`onMaskClick` are removed, please use `onClose` instead.');\n    }\n\n    return _this;\n  }\n\n  _createClass(DrawerWrapper, [{\n    key: \"render\",\n    value: // tslint:disable-next-line:member-ordering\n    function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          defaultOpen = _this$props3.defaultOpen,\n          getContainer = _this$props3.getContainer,\n          wrapperClassName = _this$props3.wrapperClassName,\n          forceRender = _this$props3.forceRender,\n          handler = _this$props3.handler,\n          props = _objectWithoutProperties(_this$props3, _excluded);\n\n      var open = this.state.open; // 渲染在当前 dom 里；\n\n      if (!getContainer) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: wrapperClassName,\n          ref: function ref(c) {\n            _this2.dom = c;\n          }\n        }, /*#__PURE__*/React.createElement(Child, _extends({}, props, {\n          open: open,\n          handler: handler,\n          getContainer: function getContainer() {\n            return _this2.dom;\n          },\n          onClose: this.onClose,\n          onHandleClick: this.onHandleClick\n        })));\n      } // 如果有 handler 为内置强制渲染；\n\n\n      var $forceRender = !!handler || forceRender;\n      return /*#__PURE__*/React.createElement(Portal, {\n        visible: open,\n        forceRender: $forceRender,\n        getContainer: getContainer,\n        wrapperClassName: wrapperClassName\n      }, function (_ref) {\n        var visible = _ref.visible,\n            afterClose = _ref.afterClose,\n            rest = _objectWithoutProperties(_ref, _excluded2);\n\n        return (\n          /*#__PURE__*/\n          // react 15，componentWillUnmount 时 Portal 返回 afterClose, visible.\n          React.createElement(Child, _extends({}, props, rest, {\n            open: visible !== undefined ? visible : open,\n            afterVisibleChange: afterClose !== undefined ? afterClose : props.afterVisibleChange,\n            handler: handler,\n            onClose: _this2.onClose,\n            onHandleClick: _this2.onHandleClick\n          }))\n        );\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, _ref2) {\n      var prevProps = _ref2.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      if (typeof prevProps !== 'undefined' && props.open !== prevProps.open) {\n        newState.open = props.open;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return DrawerWrapper;\n}(React.Component);\n\nDrawerWrapper.defaultProps = {\n  prefixCls: 'drawer',\n  placement: 'left',\n  getContainer: 'body',\n  defaultOpen: false,\n  level: 'all',\n  duration: '.3s',\n  ease: 'cubic-bezier(0.78, 0.14, 0.15, 0.86)',\n  onChange: function onChange() {},\n  afterVisibleChange: function afterVisibleChange() {},\n  handler: /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drawer-handle\"\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"drawer-handle-icon\"\n  })),\n  showMask: true,\n  maskClosable: true,\n  maskStyle: {},\n  wrapperClassName: '',\n  className: '',\n  keyboard: true,\n  forceRender: false,\n  autoFocus: true\n};\nexport default DrawerWrapper;","map":null,"metadata":{},"sourceType":"module"}