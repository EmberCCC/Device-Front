{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Suspense } from 'react';\nimport { transformProps } from '../../createWidget';\nimport { useStore, useTools } from '../../hooks';\nimport { extraSchemaList, getWidgetName } from '../../mapping';\nimport { isListType, isObject, isObjType } from '../../utils';\n\nvar ErrorSchema = function ErrorSchema(schema) {\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"schema\\u672A\\u5339\\u914D\\u5230\\u5C55\\u793A\\u7EC4\\u4EF6\\uFF1A\"), /*#__PURE__*/React.createElement(\"div\", null, JSON.stringify(schema)));\n};\n\nvar ExtendedWidget = function ExtendedWidget(_ref) {\n  var schema = _ref.schema,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      dependValues = _ref.dependValues,\n      children = _ref.children,\n      onItemChange = _ref.onItemChange,\n      formData = _ref.formData,\n      getValue = _ref.getValue,\n      readOnly = _ref.readOnly,\n      dataPath = _ref.dataPath,\n      disabled = _ref.disabled,\n      dataIndex = _ref.dataIndex,\n      watch = _ref.watch,\n      hasError = _ref.hasError;\n\n  var _useTools = useTools(),\n      widgets = _useTools.widgets,\n      mapping = _useTools.mapping,\n      setValueByPath = _useTools.setValueByPath,\n      getSchemaByPath = _useTools.getSchemaByPath,\n      setSchemaByPath = _useTools.setSchemaByPath,\n      setSchema = _useTools.setSchema,\n      setValues = _useTools.setValues,\n      getValues = _useTools.getValues,\n      resetFields = _useTools.resetFields,\n      setErrorFields = _useTools.setErrorFields,\n      removeErrorField = _useTools.removeErrorField;\n\n  var _useStore = useStore(),\n      globalProps = _useStore.globalProps; // if (isObjType(schema)) {\n  //   return <Map value={value} onChange={onChange} children={children} />;\n  // }\n  // if (isListType(schema)) {\n  //   return 'haha';\n  // }\n  // return <Input value={value} onChange={e => onChange(e.target.value)} />;\n  // TODO: calc widget, better way?\n  // let widgetName = useMemo(() => getWidgetName(schema, mapping), [\n  //   JSON.stringify(schema),\n  // ]);\n\n\n  var widgetName = getWidgetName(schema, mapping);\n  var customName = schema.widget || schema['ui:widget'];\n\n  if (customName && widgets[customName]) {\n    widgetName = customName;\n  }\n\n  var readOnlyName = schema.readOnlyWidget || 'html';\n\n  if (readOnly && !isObjType(schema) && !isListType(schema)) {\n    widgetName = readOnlyName;\n  }\n\n  if (!widgetName) {\n    widgetName = 'input';\n    return /*#__PURE__*/React.createElement(ErrorSchema, {\n      schema: schema\n    });\n  }\n\n  var Widget = widgets[widgetName];\n  var extraSchema = extraSchemaList[widgetName];\n\n  var widgetProps = _objectSpread(_objectSpread({\n    schema: _objectSpread(_objectSpread({}, schema), extraSchema),\n    onChange: onChange,\n    value: value,\n    children: children,\n    disabled: disabled,\n    readOnly: readOnly,\n    className: hasError ? 'fr-item-status-error' : ''\n  }, schema.props), globalProps);\n\n  if (schema.type === 'string' && typeof schema.max === 'number') {\n    widgetProps.maxLength = schema.max;\n  }\n\n  ['title', 'placeholder', 'disabled', 'format'].forEach(function (key) {\n    if (schema[key]) {\n      widgetProps[key] = schema[key];\n    }\n  });\n\n  if (schema.props) {\n    widgetProps = _objectSpread(_objectSpread({}, widgetProps), schema.props);\n  }\n\n  Object.keys(schema).forEach(function (key) {\n    if (typeof key === 'string' && key.toLowerCase().indexOf('props') > -1 && key.length > 5) {\n      widgetProps[key] = schema[key];\n    }\n  }); // 支持 addonAfter 为自定义组件的情况\n\n  if (isObject(widgetProps.addonAfter) && widgetProps.addonAfter.widget) {\n    var AddonAfterWidget = widgets[widgetProps.addonAfter.widget];\n    widgetProps.addonAfter = /*#__PURE__*/React.createElement(AddonAfterWidget, schema);\n  }\n\n  var hideSelf = function hideSelf() {\n    var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setSchemaByPath(schema.$id, {\n      hidden: hidden\n    });\n  }; // 避免传组件不接受的props，按情况传多余的props\n\n\n  widgetProps.addons = {\n    dependValues: dependValues,\n    onItemChange: onItemChange,\n    getValue: getValue,\n    formData: formData,\n    dataPath: dataPath,\n    dataIndex: dataIndex,\n    setValueByPath: setValueByPath,\n    setValue: setValueByPath,\n    getSchemaByPath: getSchemaByPath,\n    setSchemaByPath: setSchemaByPath,\n    setSchema: setSchema,\n    setValues: setValues,\n    getValues: getValues,\n    resetFields: resetFields,\n    setErrorFields: setErrorFields,\n    removeErrorField: removeErrorField,\n    hideSelf: hideSelf,\n    watch: watch\n  };\n  var finalProps = transformProps(widgetProps);\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(\"div\", null)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fr-item-wrapper\"\n  }, /*#__PURE__*/React.createElement(Widget, finalProps)));\n};\n\nvar areEqual = function areEqual(prev, current) {\n  if (prev.schema && current.schema) {\n    if (prev.schema.$id === '#') {\n      return false;\n    }\n\n    if (prev.schema.hidden && current.schema.hidden) {\n      return true;\n    }\n  }\n\n  if (prev.readOnly !== current.readOnly) {\n    return false;\n  }\n\n  if (prev.disabled !== current.disabled) {\n    return false;\n  }\n\n  if (JSON.stringify(prev.dependValues) !== JSON.stringify(current.dependValues)) {\n    return false;\n  }\n\n  if (isObjType(prev.schema) && isObjType(current.schema)) {\n    return false;\n  } // if (\n  //   JSON.stringify(prev.value) === JSON.stringify(current.value) &&\n  //   JSON.stringify(prev.schema) === JSON.stringify(current.schema)\n  // ) {\n  //   return true;\n  // }\n\n\n  return false;\n};\n\nexport default /*#__PURE__*/React.memo(ExtendedWidget, areEqual);","map":null,"metadata":{},"sourceType":"module"}