{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _typeof from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/typeof\";\nimport _possibleConstructorReturn from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _objectSpread from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport querystring from 'query-string';\nimport parseURL from './parseUrl';\nimport { forEach } from 'lodash';\nimport decodeHtml from './htmlTag';\nvar config = {}; // judge env to do something\n\nif (process.env.NODE_ENV === 'development') {\n  config.env = 'dev';\n} else if (process.env.NODE_ENV === 'production') {\n  config.env = 'product';\n} // let Pace;\n// (function loadPace(env) {\n//   if (env !== 'dev' && !Pace) {\n//     Pace = require('../pace.min.js');\n//   }\n// })(config.env);\n// Pace.start();\n// ====== Request Class ======\n\n\nvar defaultOptions = {\n  ignoreError: false\n};\n/*\n * Requests a URL, returning a promise.\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\n\nexport function request(url, options) {\n  // console.log('test request: ',Pace);\n  // Pace && Pace.restart();\n  // setDefault\n  options = _objectSpread({}, defaultOptions, options);\n  return fetch(url, options).then(checkStatus).then(parseJSON).then(function (res) {\n    return checkResponse(res, options);\n  }) // 接口通信成功，处理返回值\n  .catch(function (err) {\n    return handleError(err, options);\n  }); // 发生异常，进行兜底处理\n}\n/*\n * @param {string} url - 请求的接口地址\n * @param {object} data - 请求参数\n * @param {object} options 传递给fetch API的参数\n */\n\nexport function post(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = injectSelfToken(data);\n  return request(url, _objectSpread({\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'token': injectSelfToken()\n    },\n    body: stringify(_objectSpread({}, data))\n  }, options));\n}\nexport function put(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = injectSelfToken(data);\n  if (url === '/uaa/oauth/token') {\n    return request(\"\".concat(url, \"?\").concat(stringify(data)), _objectSpread({\n      method: 'GET',\n      credentials: 'same-origin',\n      headers: {\n        'token': injectSelfToken()\n      }\n    }, options));\n  }\n\n  return request(url, _objectSpread({\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json;charset=utf-8',\n      'token': injectSelfToken()\n    },\n    body: JSON.stringify(_objectSpread({}, data))\n  }, options));\n}\nexport function postJson(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  return request(url, _objectSpread({\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json;charset=utf-8',\n      'token': injectSelfToken()\n    },\n    body: JSON.stringify(_objectSpread({}, data))\n  }, options));\n}\n/*\n *\n * @param {string} url 请求的接口地址\n * @param {object} data 请求参数\n * @param {object} options 传递给fetch API的参数\n */\n\nexport function get(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = data;\n  console.log(\"\".concat(url, \"?\").concat(stringify(data)));\n  return request(\"\".concat(url, \"?\").concat(stringify(data)), _objectSpread({\n    method: 'GET',\n    credentials: 'same-origin',\n    headers: {\n      'token': injectSelfToken()\n    }\n  }, options));\n} // ====== Response Class ======\n\nvar AbstractResponse = function AbstractResponse(response, error) {\n  _classCallCheck(this, AbstractResponse);\n\n  if (response) {\n    this.code = response.code;\n    this.data = response; // 这里的返回数据为整个response对象\n  }\n\n  this.error = error || null;\n};\n/*\n * 错误时候的响应对象\n */\n\n\nvar ErrorResponse =\n/*#__PURE__*/\nfunction (_AbstractResponse) {\n  _inherits(ErrorResponse, _AbstractResponse);\n\n  function ErrorResponse(error) {\n    var _this;\n\n    _classCallCheck(this, ErrorResponse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorResponse).call(this, null, error));\n    _this.errorType = 'response';\n    return _this;\n  }\n\n  return ErrorResponse;\n}(AbstractResponse);\n/*\n * 接口正常时的返回对象\n */\n\n\nvar SuccessResponse =\n/*#__PURE__*/\nfunction (_AbstractResponse2) {\n  _inherits(SuccessResponse, _AbstractResponse2);\n\n  function SuccessResponse(response) {\n    _classCallCheck(this, SuccessResponse);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SuccessResponse).call(this, response, null));\n  }\n\n  return SuccessResponse;\n}(AbstractResponse); // ====== Util ======\n\n/*\n * { a: 1, b: 2} ==> a=1&b=2\n */\n\n\nfunction stringify() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var a = Object.keys(obj).filter(function (k) {\n    return obj[k] || +obj[k] === 0;\n  }).map(function (k) {\n    var value = obj[k];\n\n    if (_typeof(value) === 'object') {\n      value = encodeURIComponent(JSON.stringify(value));\n    } else {\n      value = encodeURIComponent(value);\n    }\n\n    return encodeURIComponent(k) + '=' + value;\n  }).join('&');\n  return a;\n} // ====== 接口返回值处理具体逻辑 ======\n\n\nvar SUCCESS_CODE = [0]; // const SUCCESS_BOOL = true; // 返回success\n\nvar ErrorHandlers = {\n  '401.1': function _(error, options) {\n    return _Modal.error({\n      title: '提示',\n      content: '您当前的会话已超时，请重新登录。',\n      afterClose: function afterClose() {\n        if (error && error.data) {\n          var url = parseURL(error.data);\n          var searchs = [],\n              searchString = '',\n              querystringParse = querystring.parse(url.search);\n          querystringParse.redirectUrl = window.location.href;\n          forEach(querystringParse, function (value, key) {\n            searchs.push(\"\".concat(key, \"=\").concat(value));\n          });\n          searchs.length && (searchString = searchs.join('&'));\n          options && options.callback && options.callback();\n          var newUrl = \"\".concat(url.protocol, \"//\").concat(url.hostname);\n          url.port && (newUrl += \":\".concat(url.port));\n          url.pathname && (newUrl += \"\".concat(url.pathname));\n          searchString && (newUrl += \"?\".concat(searchString));\n          window.location.href = newUrl;\n        }\n      }\n    });\n  },\n  verifyCodeInvalid: function verifyCodeInvalid() {},\n  'NoPermission.Directory': function NoPermissionDirectory() {//TODO: do nothing\n  }\n};\n/*\n * 接口返回值处理逻辑，如果未捕获到匹配的处置方案，则抛出异常\n * @param {*} response\n * @param {*} options 配置可选项，如忽略错误\n */\n\nfunction checkResponse(response, options) {\n  var code = response.code;\n\n  if (SUCCESS_CODE.includes(code)) {\n    return new SuccessResponse(response);\n  } else {\n    if (code === -100) {\n      _Modal.warning({\n        content: '登录超时，请重新登陆',\n        okText: '确定',\n        onOk: function onOk() {\n          window.location.href = \"//\".concat(window.location.host, \"/login\");\n        }\n      });\n    } else {\n      throw new ErrorResponse(response);\n    }\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  var error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\nvar dialogInstance; // 兜底的错误处理\n\nfunction handleError(err, options) {\n  var msg = null,\n      code = null;\n  console.log(err);\n\n  if (!options.ignoreError) {\n    // if (dialogInstance) return;\n    if (err.errorType === 'response') {\n      var responseError = err.error || null;\n\n      if (responseError) {\n        code = responseError.code || null;\n        msg = responseError.msg || responseError.message || null;\n        var handleResError = code && ErrorHandlers[code] ? ErrorHandlers[code] : null;\n\n        if (handleResError) {\n          return dialogInstance = handleResError(responseError, {\n            callback: function callback() {\n              dialogInstance = null;\n            }\n          });\n        }\n      }\n    }\n\n    msg = err.message || msg || 'Unknown error'; //针对faked与Pace的本地冲突的错误提示的关闭\n\n    if (msg === 'request.addEventListener is not a function') {\n      return;\n    }\n\n    return dialogInstance = _Modal.error({\n      title: '提示',\n      content: \"\".concat(decodeHtml(msg)),\n      afterClose: function afterClose() {\n        dialogInstance = null;\n      }\n    });\n  }\n\n  throw new ErrorResponse(err);\n}\n/*\n * 引入验证token\n */\n\n\nfunction injectSelfToken() {\n  var selfToken = sessionStorage.getItem('selfToken');\n  return selfToken;\n}","map":{"version":3,"sources":["D:\\GGdownload\\设备运维前端\\bl-device-manage\\src\\utils\\request.js"],"names":["querystring","parseURL","forEach","decodeHtml","config","process","env","NODE_ENV","defaultOptions","ignoreError","request","url","options","fetch","then","checkStatus","parseJSON","res","checkResponse","catch","err","handleError","post","data","method","credentials","headers","Accept","injectSelfToken","body","stringify","put","JSON","postJson","get","console","log","AbstractResponse","response","error","code","ErrorResponse","errorType","SuccessResponse","obj","a","Object","keys","filter","k","map","value","encodeURIComponent","join","SUCCESS_CODE","ErrorHandlers","title","content","afterClose","searchs","searchString","querystringParse","parse","search","redirectUrl","window","location","href","key","push","length","callback","newUrl","protocol","hostname","port","pathname","verifyCodeInvalid","includes","warning","okText","onOk","host","json","status","Error","statusText","dialogInstance","msg","responseError","message","handleResError","selfToken","sessionStorage","getItem"],"mappings":"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","sourcesContent":["import { Modal } from 'antd';\nimport querystring from 'query-string';\nimport parseURL from './parseUrl';\nimport { forEach } from 'lodash';\nimport decodeHtml from './htmlTag';\n\nlet config = {};\n// judge env to do something\nif (process.env.NODE_ENV === 'development') {\n  config.env = 'dev';\n} else if (process.env.NODE_ENV === 'production') {\n  config.env = 'product'\n}\n\n// let Pace;\n// (function loadPace(env) {\n//   if (env !== 'dev' && !Pace) {\n//     Pace = require('../pace.min.js');\n//   }\n// })(config.env);\n\n// Pace.start();\n// ====== Request Class ======\nconst defaultOptions = {\n  ignoreError: false\n};\n\n/*\n * Requests a URL, returning a promise.\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\n\nexport function request(url, options) {\n  // console.log('test request: ',Pace);\n  // Pace && Pace.restart();\n  // setDefault\n  options = {\n    ...defaultOptions,\n    ...options\n  };\n  return (\n    fetch(url, options)\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(res => checkResponse(res, options)) // 接口通信成功，处理返回值\n      .catch(err => handleError(err, options))\n  ); // 发生异常，进行兜底处理\n}\n\n/*\n * @param {string} url - 请求的接口地址\n * @param {object} data - 请求参数\n * @param {object} options 传递给fetch API的参数\n */\nexport function post(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = injectSelfToken(data);\n  return request(url, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'token': injectSelfToken()\n    },\n    body: stringify({\n      ...data\n    }),\n    ...options\n  });\n}\n\nexport function put(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = injectSelfToken(data);\n  if(url === '/uaa/oauth/token'){\n    return request(`${url}?${stringify(data)}`, {\n      method: 'GET',\n      credentials: 'same-origin',\n      headers: {\n        'token': injectSelfToken()\n      },\n      ...options\n    });\n  }\n  return request(url, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json;charset=utf-8',\n      'token': injectSelfToken()\n    },\n    body: JSON.stringify({\n      ...data,\n    }),\n    ...options\n  });\n}\n\nexport function postJson(url, data, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  return request(url, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json;charset=utf-8',\n      'token': injectSelfToken()\n    },\n    body: JSON.stringify({\n      ...data,\n    }),\n    ...options\n  });\n}\n\n/*\n *\n * @param {string} url 请求的接口地址\n * @param {object} data 请求参数\n * @param {object} options 传递给fetch API的参数\n */\nexport function get(url, data = {}, options) {\n  // 开发环境使用mock数据\n  // if (config.env === 'dev') {\n  //   url = '/api' + url;\n  // }\n  // data = data;\n  console.log(`${url}?${stringify(data)}`)\n  return request(`${url}?${stringify(data)}`, {\n    method: 'GET',\n    credentials: 'same-origin',\n    headers: {\n      'token': injectSelfToken()\n    },\n    ...options\n  });\n}\n\n// ====== Response Class ======\n\nclass AbstractResponse {\n  constructor(response, error) {\n    if (response) {\n      this.code = response.code;\n      this.data = response; // 这里的返回数据为整个response对象\n    }\n    this.error = error || null;\n  }\n}\n\n/*\n * 错误时候的响应对象\n */\nclass ErrorResponse extends AbstractResponse {\n  constructor(error) {\n    super(null, error);\n    this.errorType = 'response';\n  }\n}\n\n/*\n * 接口正常时的返回对象\n */\nclass SuccessResponse extends AbstractResponse {\n  constructor(response) {\n    super(response, null);\n  }\n}\n// ====== Util ======\n/*\n * { a: 1, b: 2} ==> a=1&b=2\n */\nfunction stringify(obj = {}) {\n  let a = Object.keys(obj)\n    .filter(k => obj[k] || +obj[k] === 0)\n    .map(k => {\n      let value = obj[k];\n      if (typeof value === 'object') {\n        value = encodeURIComponent(JSON.stringify(value));\n      } else {\n        value = encodeURIComponent(value);\n      }\n      return encodeURIComponent(k) + '=' + value;\n    })\n    .join('&');\n  return a;\n}\n\n// ====== 接口返回值处理具体逻辑 ======\nconst SUCCESS_CODE = [\n  0\n];\n// const SUCCESS_BOOL = true; // 返回success\nconst ErrorHandlers = {\n  '401.1': function (error, options) {\n    return Modal.error({\n      title: '提示',\n      content: '您当前的会话已超时，请重新登录。',\n      afterClose: () => {\n        if (error && error.data) {\n          let url = parseURL(error.data);\n          let searchs = [],\n            searchString = '',\n            querystringParse = querystring.parse(url.search);\n          querystringParse.redirectUrl = window.location.href;\n          forEach(querystringParse, (value, key) => {\n            searchs.push(`${key}=${value}`);\n          });\n          searchs.length && (searchString = searchs.join('&'));\n          options && options.callback && options.callback();\n\n          let newUrl = `${url.protocol}//${url.hostname}`;\n          url.port && (newUrl += `:${url.port}`);\n          url.pathname && (newUrl += `${url.pathname}`);\n          searchString && (newUrl += `?${searchString}`);\n          window.location.href = newUrl;\n        }\n      }\n    });\n  },\n  verifyCodeInvalid: () => { },\n  'NoPermission.Directory': function () {\n    //TODO: do nothing\n  }\n};\n\n\n/*\n * 接口返回值处理逻辑，如果未捕获到匹配的处置方案，则抛出异常\n * @param {*} response\n * @param {*} options 配置可选项，如忽略错误\n */\nfunction checkResponse(response, options) {\n  const { code, } = response;\n  if (SUCCESS_CODE.includes(code)) {\n    return new SuccessResponse(response);\n  } else {\n    if (code === -100) {\n      Modal.warning({\n        content: '登录超时，请重新登陆',\n        okText: '确定',\n        onOk: () => {\n          window.location.href = `//${window.location.host}/login`;\n        }\n      })\n    }else{\n      throw new ErrorResponse(response);\n    }\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\nlet dialogInstance;\n\n// 兜底的错误处理\nfunction handleError(err, options) {\n  let msg = null,\n    code = null;\n    console.log(err)\n  if (!options.ignoreError) {\n    // if (dialogInstance) return;\n    if (err.errorType === 'response') {\n      let responseError = err.error || null;\n      if (responseError) {\n        code = responseError.code || null;\n        msg = responseError.msg || responseError.message || null;\n        let handleResError =\n          code && ErrorHandlers[code] ? ErrorHandlers[code] : null;\n\n        if (handleResError) {\n          return (dialogInstance = handleResError(responseError, {\n            callback: () => {\n              dialogInstance = null;\n            }\n          }));\n        }\n      }\n    }\n    msg = err.message || msg || 'Unknown error';\n\n    //针对faked与Pace的本地冲突的错误提示的关闭\n    if (msg === 'request.addEventListener is not a function') {\n      return;\n    }\n    return (dialogInstance = Modal.error({\n      title: '提示',\n      content: `${decodeHtml(msg)}`,\n      afterClose: () => {\n        dialogInstance = null;\n      }\n    }));\n  }\n  throw new ErrorResponse(err);\n}\n\n/*\n * 引入验证token\n */\nfunction injectSelfToken() {\n  let selfToken = sessionStorage.getItem('selfToken');\n  return selfToken\n\n}\n"]},"metadata":{},"sourceType":"module"}