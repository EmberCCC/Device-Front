{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport EllipsisOutlined from \"@ant-design/icons/es/icons/EllipsisOutlined\";\nimport classNames from 'classnames';\nimport RcMenu, { ItemGroup } from 'rc-menu';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { SiderContext } from '../layout/Sider';\nimport collapseMotion from '../_util/motion';\nimport { cloneElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nimport useItems from './hooks/useItems';\nimport MenuContext from './MenuContext';\nimport MenuDivider from './MenuDivider';\nimport Item from './MenuItem';\nimport OverrideContext from './OverrideContext';\nimport SubMenu from './SubMenu';\nvar InternalMenu = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _a;\n\n  var override = React.useContext(OverrideContext) || {};\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      getPopupContainer = _React$useContext.getPopupContainer,\n      direction = _React$useContext.direction;\n\n  var rootPrefixCls = getPrefixCls();\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? 'light' : _props$theme,\n      expandIcon = props.expandIcon,\n      _internalDisableMenuItemTitleTooltip = props._internalDisableMenuItemTitleTooltip,\n      inlineCollapsed = props.inlineCollapsed,\n      siderCollapsed = props.siderCollapsed,\n      items = props.items,\n      children = props.children,\n      mode = props.mode,\n      selectable = props.selectable,\n      onClick = props.onClick,\n      restProps = __rest(props, [\"prefixCls\", \"className\", \"theme\", \"expandIcon\", \"_internalDisableMenuItemTitleTooltip\", \"inlineCollapsed\", \"siderCollapsed\", \"items\", \"children\", \"mode\", \"selectable\", \"onClick\"]);\n\n  var passedProps = omit(restProps, ['collapsedWidth']); // ========================= Items ===========================\n\n  var mergedChildren = useItems(items) || children; // ======================== Warning ==========================\n\n  process.env.NODE_ENV !== \"production\" ? warning(!('inlineCollapsed' in props && mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning('items' in props && !children, 'Menu', '`children` will be removed in next major version. Please use `items` instead.') : void 0;\n  (_a = override.validator) === null || _a === void 0 ? void 0 : _a.call(override, {\n    mode: mode\n  }); // ========================== Click ==========================\n  // Tell dropdown that item clicked\n\n  var onItemClick = useEvent(function () {\n    var _a;\n\n    onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, arguments);\n    (_a = override === null || override === void 0 ? void 0 : override.onClick) === null || _a === void 0 ? void 0 : _a.call(override);\n  }); // ========================== Mode ===========================\n\n  var mergedMode = override.mode || mode; // ======================= Selectable ========================\n\n  var mergedSelectable = selectable !== null && selectable !== void 0 ? selectable : override.selectable; // ======================== Collapsed ========================\n  // Inline Collapsed\n\n  var mergedInlineCollapsed = React.useMemo(function () {\n    if (siderCollapsed !== undefined) {\n      return siderCollapsed;\n    }\n\n    return inlineCollapsed;\n  }, [inlineCollapsed, siderCollapsed]);\n  var defaultMotions = {\n    horizontal: {\n      motionName: \"\".concat(rootPrefixCls, \"-slide-up\")\n    },\n    inline: collapseMotion,\n    other: {\n      motionName: \"\".concat(rootPrefixCls, \"-zoom-big\")\n    }\n  };\n  var prefixCls = getPrefixCls('menu', customizePrefixCls || override.prefixCls);\n  var menuClassName = classNames(\"\".concat(prefixCls, \"-\").concat(theme), className); // ====================== Expand Icon ========================\n\n  var mergedExpandIcon;\n\n  if (typeof expandIcon === 'function') {\n    mergedExpandIcon = expandIcon;\n  } else {\n    mergedExpandIcon = cloneElement(expandIcon || override.expandIcon, {\n      className: \"\".concat(prefixCls, \"-submenu-expand-icon\")\n    });\n  } // ======================== Context ==========================\n\n\n  var contextValue = React.useMemo(function () {\n    return {\n      prefixCls: prefixCls,\n      inlineCollapsed: mergedInlineCollapsed || false,\n      antdMenuTheme: theme,\n      direction: direction,\n      firstLevel: true,\n      disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip\n    };\n  }, [prefixCls, mergedInlineCollapsed, theme, direction, _internalDisableMenuItemTitleTooltip]); // ========================= Render ==========================\n\n  return /*#__PURE__*/React.createElement(OverrideContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(MenuContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RcMenu, _extends({\n    getPopupContainer: getPopupContainer,\n    overflowedIndicator: /*#__PURE__*/React.createElement(EllipsisOutlined, null),\n    overflowedIndicatorPopupClassName: \"\".concat(prefixCls, \"-\").concat(theme),\n    mode: mergedMode,\n    selectable: mergedSelectable,\n    onClick: onItemClick\n  }, passedProps, {\n    inlineCollapsed: mergedInlineCollapsed,\n    className: menuClassName,\n    prefixCls: prefixCls,\n    direction: direction,\n    defaultMotions: defaultMotions,\n    expandIcon: mergedExpandIcon,\n    ref: ref\n  }), mergedChildren)));\n}); // We should keep this as ref-able\n\nvar Menu = /*#__PURE__*/function (_React$Component) {\n  _inherits(Menu, _React$Component);\n\n  var _super = _createSuper(Menu);\n\n  function Menu() {\n    var _this;\n\n    _classCallCheck(this, Menu);\n\n    _this = _super.apply(this, arguments);\n\n    _this.focus = function (options) {\n      var _a;\n\n      (_a = _this.menu) === null || _a === void 0 ? void 0 : _a.focus(options);\n    };\n\n    return _this;\n  }\n\n  _createClass(Menu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, function (context) {\n        return /*#__PURE__*/React.createElement(InternalMenu, _extends({\n          ref: function ref(node) {\n            _this2.menu = node;\n          }\n        }, _this2.props, context));\n      });\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nMenu.Divider = MenuDivider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}