{"ast":null,"code":"/*\r\n * @Author: your name\r\n * @Date: 2022-04-26 22:13:06\r\n * @LastEditTime: 2022-06-28 18:48:56\r\n * @LastEditors: EmberCCC 1810888456@qq.com\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage-test\\src\\layouts\\HomeLayout\\WebSocket.js\r\n */\nimport { PubSub } from 'pubsub-js';\nvar websocket,\n    lockReconnect = false;\n\nvar createWebSocket = function createWebSocket(url) {\n  var id = sessionStorage.getItem('id');\n  var username = sessionStorage.getItem('username');\n  var tenementId = sessionStorage.getItem('tenementId');\n  websocket = new WebSocket(url + \"/\" + id.toString() + \"/\" + username + \"/\" + tenementId.toString());\n\n  websocket.onopen = function () {\n    heartCheck.reset().start();\n  };\n\n  websocket.onerror = function () {\n    reconnect(url);\n  };\n\n  websocket.onclose = function (e) {\n    heartCheck.reset();\n  };\n\n  websocket.onmessage = function (event) {\n    lockReconnect = true; //event 为服务端传输的消息，在这里可以处理\n\n    var data = event.data; //把获取到的消息处理成字典，方便后期使用\n\n    PubSub.publish('message', data); //发布接收到的消息 'message' 为发布消息的名称，data 为发布的消息\n  };\n};\n\nvar reconnect = function reconnect(url) {\n  if (lockReconnect) return; // 没连接上会一直重连，设置延迟避免请求过多\n\n  setTimeout(function () {\n    createWebSocket(url);\n    lockReconnect = false;\n  }, 4000);\n};\n\nvar heartCheck = {\n  timeout: 6000,\n  // 6秒\n  timeoutObj: null,\n  reset: function reset() {\n    clearInterval(this.timeoutObj);\n    return this;\n  },\n  start: function start() {\n    this.timeoutObj = setInterval(function () {\n      // 这里发送一个心跳，后端收到后，返回一个心跳消息，\n      // onmessage拿到返回的心跳就说明连接正常\n      websocket.send('HeartBeat');\n    }, this.timeout);\n  }\n}; // 关闭连接\n\nvar closeWebSocket = function closeWebSocket() {\n  websocket && websocket.close();\n};\n\nexport { websocket, createWebSocket, closeWebSocket };","map":{"version":3,"names":["PubSub","websocket","lockReconnect","createWebSocket","url","id","sessionStorage","getItem","username","tenementId","WebSocket","toString","onopen","heartCheck","reset","start","onerror","reconnect","onclose","e","onmessage","event","data","publish","setTimeout","timeout","timeoutObj","clearInterval","setInterval","send","closeWebSocket","close"],"sources":["F:/documents/bl-device-manage-test/src/routes/BasicRouter/webSocket.js"],"sourcesContent":["/*\r\n * @Author: your name\r\n * @Date: 2022-04-26 22:13:06\r\n * @LastEditTime: 2022-06-28 18:48:56\r\n * @LastEditors: EmberCCC 1810888456@qq.com\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage-test\\src\\layouts\\HomeLayout\\WebSocket.js\r\n */\r\nimport { PubSub } from 'pubsub-js';\r\nlet websocket,\r\n    lockReconnect = false;\r\nlet createWebSocket = (url) => {\r\n    let id = sessionStorage.getItem('id');\r\n    let username = sessionStorage.getItem('username');\r\n    let tenementId = sessionStorage.getItem('tenementId');\r\n    websocket = new WebSocket(url + \"/\" + id.toString() + \"/\" + username + \"/\" + tenementId.toString());\r\n    websocket.onopen = function () {\r\n        heartCheck.reset().start();\r\n    };\r\n    websocket.onerror = function () {\r\n        reconnect(url);\r\n    };\r\n    websocket.onclose = function (e) {\r\n        heartCheck.reset();\r\n    };\r\n    websocket.onmessage = function (event) {\r\n        lockReconnect = true;\r\n        //event 为服务端传输的消息，在这里可以处理\r\n        let data = event.data;//把获取到的消息处理成字典，方便后期使用\r\n        PubSub.publish('message', data); //发布接收到的消息 'message' 为发布消息的名称，data 为发布的消息\r\n\r\n    };\r\n};\r\nlet reconnect = (url) => {\r\n    if (lockReconnect) return;\r\n    // 没连接上会一直重连，设置延迟避免请求过多\r\n    setTimeout(function () {\r\n        createWebSocket(url);\r\n        lockReconnect = false;\r\n    }, 4000);\r\n};\r\nlet heartCheck = {\r\n    timeout: 6000, // 6秒\r\n    timeoutObj: null,\r\n    reset: function () {\r\n        clearInterval(this.timeoutObj);\r\n        return this;\r\n    },\r\n    start: function () {\r\n        this.timeoutObj = setInterval(function () {\r\n            // 这里发送一个心跳，后端收到后，返回一个心跳消息，\r\n            // onmessage拿到返回的心跳就说明连接正常\r\n            websocket.send('HeartBeat');\r\n        }, this.timeout);\r\n    },\r\n};\r\n// 关闭连接\r\nlet closeWebSocket = () => {\r\n    websocket && websocket.close();\r\n};\r\nexport { websocket, createWebSocket, closeWebSocket };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,IAAIC,SAAJ;AAAA,IACIC,aAAa,GAAG,KADpB;;AAEA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAS;EAC3B,IAAIC,EAAE,GAAGC,cAAc,CAACC,OAAf,CAAuB,IAAvB,CAAT;EACA,IAAIC,QAAQ,GAAGF,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAf;EACA,IAAIE,UAAU,GAAGH,cAAc,CAACC,OAAf,CAAuB,YAAvB,CAAjB;EACAN,SAAS,GAAG,IAAIS,SAAJ,CAAcN,GAAG,GAAG,GAAN,GAAYC,EAAE,CAACM,QAAH,EAAZ,GAA4B,GAA5B,GAAkCH,QAAlC,GAA6C,GAA7C,GAAmDC,UAAU,CAACE,QAAX,EAAjE,CAAZ;;EACAV,SAAS,CAACW,MAAV,GAAmB,YAAY;IAC3BC,UAAU,CAACC,KAAX,GAAmBC,KAAnB;EACH,CAFD;;EAGAd,SAAS,CAACe,OAAV,GAAoB,YAAY;IAC5BC,SAAS,CAACb,GAAD,CAAT;EACH,CAFD;;EAGAH,SAAS,CAACiB,OAAV,GAAoB,UAAUC,CAAV,EAAa;IAC7BN,UAAU,CAACC,KAAX;EACH,CAFD;;EAGAb,SAAS,CAACmB,SAAV,GAAsB,UAAUC,KAAV,EAAiB;IACnCnB,aAAa,GAAG,IAAhB,CADmC,CAEnC;;IACA,IAAIoB,IAAI,GAAGD,KAAK,CAACC,IAAjB,CAHmC,CAGb;;IACtBtB,MAAM,CAACuB,OAAP,CAAe,SAAf,EAA0BD,IAA1B,EAJmC,CAIF;EAEpC,CAND;AAOH,CArBD;;AAsBA,IAAIL,SAAS,GAAG,SAAZA,SAAY,CAACb,GAAD,EAAS;EACrB,IAAIF,aAAJ,EAAmB,OADE,CAErB;;EACAsB,UAAU,CAAC,YAAY;IACnBrB,eAAe,CAACC,GAAD,CAAf;IACAF,aAAa,GAAG,KAAhB;EACH,CAHS,EAGP,IAHO,CAAV;AAIH,CAPD;;AAQA,IAAIW,UAAU,GAAG;EACbY,OAAO,EAAE,IADI;EACE;EACfC,UAAU,EAAE,IAFC;EAGbZ,KAAK,EAAE,iBAAY;IACfa,aAAa,CAAC,KAAKD,UAAN,CAAb;IACA,OAAO,IAAP;EACH,CANY;EAObX,KAAK,EAAE,iBAAY;IACf,KAAKW,UAAL,GAAkBE,WAAW,CAAC,YAAY;MACtC;MACA;MACA3B,SAAS,CAAC4B,IAAV,CAAe,WAAf;IACH,CAJ4B,EAI1B,KAAKJ,OAJqB,CAA7B;EAKH;AAbY,CAAjB,C,CAeA;;AACA,IAAIK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EACvB7B,SAAS,IAAIA,SAAS,CAAC8B,KAAV,EAAb;AACH,CAFD;;AAGA,SAAS9B,SAAT,EAAoBE,eAApB,EAAqC2B,cAArC"},"metadata":{},"sourceType":"module"}