{"ast":null,"code":"/*\r\n * @Author: your name\r\n * @Date: 2022-03-22 09:57:32\r\n * @LastEditTime: 2022-04-08 01:22:31\r\n * @LastEditors: Please set LastEditors\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage\\src\\utils\\loashTools.js\r\n */\nimport { typeId } from 'constants/status_constant';\nimport _ from 'lodash';\n/**\r\n * 将下标数组转为数组\r\n * @param {String|Number} pathStr 字符串类型的树路径 例：2-3-4\r\n * return {Array}  数组类型\r\n */\n\nvar indexToArray = function indexToArray(pathStr) {\n  return \"\".concat(pathStr).split('-').map(function (n) {\n    return +n;\n  });\n};\n/**\r\n * \r\n * @param {String}  index  下标路径\r\n * @param {Array}  cards  treeData\r\n * @return {object}  返回详情对象\r\n */\n\n\nvar getCloneItem = function getCloneItem(index, cards) {\n  var arr = indexToArray(index);\n  var result = {};\n  arr.forEach(function (n) {\n    result = cards[n];\n    cards = result.children;\n  });\n  return _.cloneDeep(result);\n};\n/**\r\n * 根据下标获取父节点\r\n * @param {String}   index  下标路径\r\n * @param {Array}    cards  treeData\r\n * @return {object}  返回详情对象\r\n */\n\n\nvar getItem = function getItem(pathIndex, cards) {\n  var arr = indexToArray(pathIndex); // 嵌套节点删除\n\n  var parent;\n\n  if (arr.length === 0) {\n    return cards;\n  }\n\n  arr.forEach(function (item, index) {\n    if (index === 0) {\n      parent = cards[item];\n    } else {\n      parent = parent.children[item];\n    }\n  });\n  if (parent.children) return parent.children;\n  return parent;\n};\n\nvar getParent = function getParent(pathIndex, cards) {\n  var arr = indexToArray(pathIndex); // 嵌套节点删除\n\n  var parent;\n  arr.pop();\n\n  if (arr.length === 0) {\n    return cards;\n  }\n\n  arr.forEach(function (item, index) {\n    if (index === 0) {\n      parent = cards[item];\n    } else {\n      parent = parent.children[item];\n    }\n  });\n  if (parent.children) return parent.children;\n  return parent;\n};\n/**\r\n * 根据路径删除数据\r\n * @param {*} index \r\n * @param {*} cards \r\n * @return {*} \r\n */\n\n\nvar itemRemove = function itemRemove(index, cards) {\n  var parent = getParent(index, cards);\n  var arr = indexToArray(index);\n  var getIndex = arr.pop();\n\n  if (parent.children) {\n    parent.children.splice(getIndex, 1);\n    return cards;\n  }\n\n  parent.splice(getIndex, 1);\n  return cards;\n};\n/**\r\n * \r\n * @param {*} index \r\n * @param {*} cards \r\n * @param {*} item \r\n */\n\n\nvar itemAdd = function itemAdd(index, cards, item) {\n  var parent = getParent(index, cards);\n  var arr = indexToArray(index);\n  var getIndex = arr.pop();\n\n  if (parent.children) {\n    parent.children.splice(getIndex, 0, item);\n    return cards;\n  }\n\n  parent.splice(getIndex, 0, item);\n  return cards;\n};\n/**\r\n * 根据index设置排序\r\n * @param {Array}  arr   节点路径的数组格式 \r\n * @param {Array}  treeData  树节点数据\r\n * @param {object} param   要替换的数据\r\n */\n\n\nvar setInfo = function setInfo(arrPath, treeData, param) {\n  var arr = indexToArray(arrPath);\n  treeData = _.cloneDeep(treeData);\n  var parent;\n  arr.forEach(function (item, index) {\n    if (index == 0) {\n      parent = treeData[item];\n    } else {\n      parent = parent.children[item];\n    }\n  });\n  parent.children = param;\n  return treeData;\n};\n/**\r\n * \r\n * @param {*} pathIndex \r\n */\n\n\nvar isPath = function isPath(pathIndex) {\n  var result = true;\n  indexToArray(pathIndex).forEach(function (item) {\n    if (isNaN(item)) {\n      result = false;\n      return false;\n    }\n  });\n  return result;\n};\n/**\r\n * 判断hover的路径是否为自己的子元素\r\n * @param {String} dragIndex \r\n * @param {String} hoverIndex \r\n */\n\n\nvar isChildrenPath = function isChildrenPath(dragIndex, hoverIndex) {\n  var dragIndexArr = String(dragIndex).split('-');\n  var hoverIndexArr = String(hoverIndex).split('-');\n\n  if (hoverIndexArr > dragIndexArr) {\n    var sliceArr = hoverIndexArr.slice(0, dragIndexArr.length);\n\n    if (sliceArr.join('-') === dragIndexArr.join('-')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\r\n* 根据数组路径 生成所有父级别的路径\r\n* @param {String} index \r\n*/\n\n\nvar generatePathArr = function generatePathArr(index) {\n  var arr = [];\n  var indexArr = String(index).split('-');\n  var data = Array.from(indexArr);\n  indexArr.forEach(function (item, i) {\n    data.pop();\n    arr.push(Array.from(data).join('-'));\n  });\n  arr.pop();\n  return arr;\n};\n/* \r\n[\r\n    {\r\n        \"name\": \"Input\", type\r\n        \"attr\": {\r\n            \"style\": {\r\n                \"width\": \"60%\"\r\n            },\r\n            \"value\": \"\",\r\n            \"placeholder\": \"请输入\"\r\n        },\r\n        \"label\": \"文本框\"\r\n    }\r\n]\r\n*/\n\n\nvar changeObj = function changeObj(firstFormId, secondFormId, obj, index) {\n  var newObj = {};\n  console.log(obj);\n  newObj.firstFormId = firstFormId;\n  newObj.secondFormId = secondFormId;\n  newObj.name = obj.label;\n  newObj.order = index + 1;\n  newObj.typeId = typeId[obj.name];\n  newObj.other = obj.attr;\n  return newObj;\n};\n\nexport { indexToArray, getParent, setInfo, isChildrenPath, generatePathArr, isPath, getCloneItem, getItem, itemRemove, itemAdd, changeObj };","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\utils\\loashTools.js"],"names":["typeId","_","indexToArray","pathStr","split","map","n","getCloneItem","index","cards","arr","result","forEach","children","cloneDeep","getItem","pathIndex","parent","length","item","getParent","pop","itemRemove","getIndex","splice","itemAdd","setInfo","arrPath","treeData","param","isPath","isNaN","isChildrenPath","dragIndex","hoverIndex","dragIndexArr","String","hoverIndexArr","sliceArr","slice","join","generatePathArr","indexArr","data","Array","from","i","push","changeObj","firstFormId","secondFormId","obj","newObj","console","log","name","label","order","other","attr"],"mappings":"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","sourcesContent":["/*\r\n * @Author: your name\r\n * @Date: 2022-03-22 09:57:32\r\n * @LastEditTime: 2022-04-08 01:22:31\r\n * @LastEditors: Please set LastEditors\r\n * @Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n * @FilePath: \\bl-device-manage\\src\\utils\\loashTools.js\r\n */\r\n \r\nimport { typeId } from 'constants/status_constant';\r\nimport _ from 'lodash';\r\n \r\n/**\r\n * 将下标数组转为数组\r\n * @param {String|Number} pathStr 字符串类型的树路径 例：2-3-4\r\n * return {Array}  数组类型\r\n */\r\nconst indexToArray = pathStr => `${pathStr}`.split('-').map(n => +n);\r\n \r\n/**\r\n * \r\n * @param {String}  index  下标路径\r\n * @param {Array}  cards  treeData\r\n * @return {object}  返回详情对象\r\n */\r\nconst getCloneItem = (index, cards) => {\r\n    const arr = indexToArray(index);\r\n    let result = {};\r\n    arr.forEach(n => {\r\n        result = cards[n];\r\n        cards = result.children;\r\n    });\r\n    return _.cloneDeep(result);\r\n}\r\n/**\r\n * 根据下标获取父节点\r\n * @param {String}   index  下标路径\r\n * @param {Array}    cards  treeData\r\n * @return {object}  返回详情对象\r\n */\r\nconst getItem = (pathIndex, cards) => {\r\n    const arr = indexToArray(pathIndex)\r\n    // 嵌套节点删除\r\n    let parent;\r\n    if (arr.length === 0) {\r\n        return cards\r\n    }\r\n    arr.forEach((item, index) => {\r\n        if (index === 0) {\r\n            parent = cards[item]\r\n        } else {\r\n            parent = parent.children[item]\r\n        }\r\n    })\r\n    if (parent.children) return parent.children\r\n    return parent\r\n}\r\n \r\nconst getParent = (pathIndex, cards) => {\r\n    const arr = indexToArray(pathIndex)\r\n    // 嵌套节点删除\r\n    let parent;\r\n    arr.pop()\r\n    if (arr.length === 0) {\r\n        return cards\r\n    }\r\n    arr.forEach((item, index) => {\r\n        if (index === 0) {\r\n            parent = cards[item]\r\n        } else {\r\n            parent = parent.children[item]\r\n        }\r\n    })\r\n    if (parent.children) return parent.children\r\n    return parent\r\n}\r\n/**\r\n * 根据路径删除数据\r\n * @param {*} index \r\n * @param {*} cards \r\n * @return {*} \r\n */\r\nconst itemRemove = (index, cards) => {\r\n    let parent = getParent(index, cards);\r\n    let arr = indexToArray(index)\r\n    let getIndex = arr.pop()\r\n    if (parent.children) {\r\n        parent.children.splice(getIndex, 1)\r\n        return cards\r\n    }\r\n    parent.splice(getIndex, 1)\r\n    return cards\r\n}\r\n/**\r\n * \r\n * @param {*} index \r\n * @param {*} cards \r\n * @param {*} item \r\n */\r\nconst itemAdd = (index, cards, item) => {\r\n    let parent = getParent(index, cards);\r\n    let arr = indexToArray(index)\r\n    let getIndex = arr.pop()\r\n    if (parent.children) {\r\n        parent.children.splice(getIndex, 0, item)\r\n        return cards\r\n    }\r\n    parent.splice(getIndex, 0, item)\r\n    return cards\r\n}\r\n/**\r\n * 根据index设置排序\r\n * @param {Array}  arr   节点路径的数组格式 \r\n * @param {Array}  treeData  树节点数据\r\n * @param {object} param   要替换的数据\r\n */\r\nconst setInfo = (arrPath, treeData, param) => {\r\n    const arr = indexToArray(arrPath)\r\n    treeData = _.cloneDeep(treeData);\r\n    let parent;\r\n    arr.forEach((item, index) => {\r\n        if (index == 0) {\r\n            parent = treeData[item]\r\n        } else {\r\n            parent = parent.children[item]\r\n        }\r\n    })\r\n    parent.children = param\r\n    return treeData\r\n}\r\n \r\n/**\r\n * \r\n * @param {*} pathIndex \r\n */\r\nconst isPath = pathIndex => {\r\n    let result = true\r\n    indexToArray(pathIndex).forEach(item => {\r\n        if (isNaN(item)) {\r\n            result = false\r\n            return false\r\n        }\r\n    })\r\n \r\n    return result\r\n}\r\n/**\r\n * 判断hover的路径是否为自己的子元素\r\n * @param {String} dragIndex \r\n * @param {String} hoverIndex \r\n */\r\nconst isChildrenPath = (dragIndex, hoverIndex) => {\r\n    let dragIndexArr = String(dragIndex).split('-')\r\n    let hoverIndexArr = String(hoverIndex).split('-')\r\n \r\n    if (hoverIndexArr > dragIndexArr) {\r\n        let sliceArr = hoverIndexArr.slice(0, dragIndexArr.length)\r\n        if (sliceArr.join('-') === dragIndexArr.join('-')) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n/**\r\n* 根据数组路径 生成所有父级别的路径\r\n* @param {String} index \r\n*/\r\nconst generatePathArr = index => {\r\n    let arr = []\r\n    let indexArr = String(index).split('-');\r\n    let data = Array.from(indexArr)\r\n \r\n    indexArr.forEach((item, i) => {\r\n        data.pop()\r\n        arr.push(Array.from(data).join('-'))\r\n    })\r\n    arr.pop()\r\n    return arr\r\n}\r\n/* \r\n[\r\n    {\r\n        \"name\": \"Input\", type\r\n        \"attr\": {\r\n            \"style\": {\r\n                \"width\": \"60%\"\r\n            },\r\n            \"value\": \"\",\r\n            \"placeholder\": \"请输入\"\r\n        },\r\n        \"label\": \"文本框\"\r\n    }\r\n]\r\n*/\r\nconst changeObj = (firstFormId,secondFormId,obj,index) => {\r\n    const newObj = {}\r\n    console.log(obj);\r\n    newObj.firstFormId = firstFormId\r\n    newObj.secondFormId = secondFormId\r\n    newObj.name = obj.label\r\n    newObj.order = index + 1\r\n    newObj.typeId = typeId[obj.name]\r\n    newObj.other = obj.attr\r\n    return newObj\r\n}\r\n \r\nexport { indexToArray, getParent, setInfo, isChildrenPath, generatePathArr, isPath, getCloneItem, getItem, itemRemove, itemAdd, changeObj }"]},"metadata":{},"sourceType":"module"}