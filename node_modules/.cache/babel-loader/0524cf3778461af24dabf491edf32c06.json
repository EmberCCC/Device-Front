{"ast":null,"code":"import { b as useStore, _ as _slicedToArray, l as getRectOfNodes, A as getBoundsofRects } from './index-fdcea71e.js';\nimport React__default, { memo } from 'react';\nimport cc from 'classcat';\nimport shallow from 'zustand/shallow';\nimport 'zustand';\nimport 'zustand/context';\nimport 'd3-zoom';\n\nvar MiniMapNode = function MiniMapNode(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height,\n      style = _ref.style,\n      color = _ref.color,\n      strokeColor = _ref.strokeColor,\n      strokeWidth = _ref.strokeWidth,\n      className = _ref.className,\n      borderRadius = _ref.borderRadius,\n      shapeRendering = _ref.shapeRendering;\n\n  var _ref2 = style || {},\n      background = _ref2.background,\n      backgroundColor = _ref2.backgroundColor;\n\n  var fill = color || background || backgroundColor;\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"rect\", {\n      className: cc(['react-flow__minimap-node', className]),\n      x: x,\n      y: y,\n      rx: borderRadius,\n      ry: borderRadius,\n      width: width,\n      height: height,\n      fill: fill,\n      stroke: strokeColor,\n      strokeWidth: strokeWidth,\n      shapeRendering: shapeRendering\n    })\n  );\n};\n\nMiniMapNode.displayName = 'MiniMapNode';\nvar MiniMapNode$1 =\n/*#__PURE__*/\nmemo(MiniMapNode);\nvar defaultWidth = 200;\nvar defaultHeight = 150;\n\nvar selector = function selector(s) {\n  return {\n    width: s.width,\n    height: s.height,\n    transform: s.transform,\n    nodeInternals: s.nodeInternals\n  };\n};\n\nvar MiniMap = function MiniMap(_ref) {\n  var style = _ref.style,\n      className = _ref.className,\n      _ref$nodeStrokeColor = _ref.nodeStrokeColor,\n      nodeStrokeColor = _ref$nodeStrokeColor === void 0 ? '#555' : _ref$nodeStrokeColor,\n      _ref$nodeColor = _ref.nodeColor,\n      nodeColor = _ref$nodeColor === void 0 ? '#fff' : _ref$nodeColor,\n      _ref$nodeClassName = _ref.nodeClassName,\n      nodeClassName = _ref$nodeClassName === void 0 ? '' : _ref$nodeClassName,\n      _ref$nodeBorderRadius = _ref.nodeBorderRadius,\n      nodeBorderRadius = _ref$nodeBorderRadius === void 0 ? 5 : _ref$nodeBorderRadius,\n      _ref$nodeStrokeWidth = _ref.nodeStrokeWidth,\n      nodeStrokeWidth = _ref$nodeStrokeWidth === void 0 ? 2 : _ref$nodeStrokeWidth,\n      _ref$maskColor = _ref.maskColor,\n      maskColor = _ref$maskColor === void 0 ? 'rgb(240, 242, 243, 0.7)' : _ref$maskColor;\n\n  var _useStore = useStore(selector, shallow),\n      containerWidth = _useStore.width,\n      containerHeight = _useStore.height,\n      transform = _useStore.transform,\n      nodeInternals = _useStore.nodeInternals;\n\n  var _transform = _slicedToArray(transform, 3),\n      tX = _transform[0],\n      tY = _transform[1],\n      tScale = _transform[2];\n\n  var mapClasses = cc(['react-flow__minimap', className]);\n  var elementWidth = (style === null || style === void 0 ? void 0 : style.width) || defaultWidth;\n  var elementHeight = (style === null || style === void 0 ? void 0 : style.height) || defaultHeight;\n  var nodeColorFunc = nodeColor instanceof Function ? nodeColor : function () {\n    return nodeColor;\n  };\n  var nodeStrokeColorFunc = nodeStrokeColor instanceof Function ? nodeStrokeColor : function () {\n    return nodeStrokeColor;\n  };\n  var nodeClassNameFunc = nodeClassName instanceof Function ? nodeClassName : function () {\n    return nodeClassName;\n  };\n  var hasNodes = nodeInternals && nodeInternals.size > 0; // @TODO: work with nodeInternals instead of converting it to an array\n\n  var nodes = Array.from(nodeInternals).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    _ref3[0];\n    var node = _ref3[1];\n    return node;\n  });\n  var bb = getRectOfNodes(nodes);\n  var viewBB = {\n    x: -tX / tScale,\n    y: -tY / tScale,\n    width: containerWidth / tScale,\n    height: containerHeight / tScale\n  };\n  var boundingRect = hasNodes ? getBoundsofRects(bb, viewBB) : viewBB;\n  var scaledWidth = boundingRect.width / elementWidth;\n  var scaledHeight = boundingRect.height / elementHeight;\n  var viewScale = Math.max(scaledWidth, scaledHeight);\n  var viewWidth = viewScale * elementWidth;\n  var viewHeight = viewScale * elementHeight;\n  var offset = 5 * viewScale;\n  var x = boundingRect.x - (viewWidth - boundingRect.width) / 2 - offset;\n  var y = boundingRect.y - (viewHeight - boundingRect.height) / 2 - offset;\n  var width = viewWidth + offset * 2;\n  var height = viewHeight + offset * 2;\n  var shapeRendering = typeof window === 'undefined' || !!window.chrome ? 'crispEdges' : 'geometricPrecision';\n  return (\n    /*#__PURE__*/\n    React__default.createElement(\"svg\", {\n      width: elementWidth,\n      height: elementHeight,\n      viewBox: \"\".concat(x, \" \").concat(y, \" \").concat(width, \" \").concat(height),\n      style: style,\n      className: mapClasses\n    }, Array.from(nodeInternals).filter(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2);\n\n      _ref5[0];\n      var node = _ref5[1];\n      return !node.hidden && node.width && node.height;\n    }).map(function (_ref6) {\n      var _nodeInternals$get;\n\n      var _ref7 = _slicedToArray(_ref6, 2);\n\n      _ref7[0];\n      var node = _ref7[1];\n      var positionAbsolute = (_nodeInternals$get = nodeInternals.get(node.id)) === null || _nodeInternals$get === void 0 ? void 0 : _nodeInternals$get.positionAbsolute;\n      return (\n        /*#__PURE__*/\n        React__default.createElement(MiniMapNode$1, {\n          key: node.id,\n          x: (positionAbsolute === null || positionAbsolute === void 0 ? void 0 : positionAbsolute.x) || 0,\n          y: (positionAbsolute === null || positionAbsolute === void 0 ? void 0 : positionAbsolute.y) || 0,\n          width: node.width,\n          height: node.height,\n          style: node.style,\n          className: nodeClassNameFunc(node),\n          color: nodeColorFunc(node),\n          borderRadius: nodeBorderRadius,\n          strokeColor: nodeStrokeColorFunc(node),\n          strokeWidth: nodeStrokeWidth,\n          shapeRendering: shapeRendering\n        })\n      );\n    }),\n    /*#__PURE__*/\n    React__default.createElement(\"path\", {\n      className: \"react-flow__minimap-mask\",\n      d: \"M\".concat(x - offset, \",\").concat(y - offset, \"h\").concat(width + offset * 2, \"v\").concat(height + offset * 2, \"h\").concat(-width - offset * 2, \"z\\n        M\").concat(viewBB.x, \",\").concat(viewBB.y, \"h\").concat(viewBB.width, \"v\").concat(viewBB.height, \"h\").concat(-viewBB.width, \"z\"),\n      fill: maskColor,\n      fillRule: \"evenodd\"\n    }))\n  );\n};\n\nMiniMap.displayName = 'MiniMap';\nvar index =\n/*#__PURE__*/\nmemo(MiniMap);\nexport { index as default };","map":null,"metadata":{},"sourceType":"module"}