{"ast":null,"code":"export var mapping = {\n  default: 'input',\n  string: 'input',\n  array: 'list',\n  boolean: 'checkbox',\n  integer: 'number',\n  number: 'number',\n  object: 'map',\n  html: 'html',\n  'string:upload': 'upload',\n  'string:url': 'url',\n  'string:dateTime': 'date',\n  'string:date': 'date',\n  'string:year': 'date',\n  'string:month': 'date',\n  'string:week': 'date',\n  'string:quarter': 'date',\n  'string:time': 'time',\n  'string:textarea': 'textarea',\n  'string:color': 'color',\n  'string:image': 'imageInput',\n  'range:time': 'timeRange',\n  'range:dateTime': 'dateRange',\n  'range:date': 'dateRange',\n  'range:year': 'dateRange',\n  'range:month': 'dateRange',\n  'range:week': 'dateRange',\n  'range:quarter': 'dateRange',\n  '*?enum': 'radio',\n  '*?enum_long': 'select',\n  'array?enum': 'checkboxes',\n  'array?enum_long': 'multiSelect',\n  '*?readOnly': 'html' // TODO: html widgets for list / object\n\n};\nexport function getWidgetName(schema) {\n  var _mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mapping;\n\n  var type = schema.type,\n      format = schema.format,\n      enums = schema.enum,\n      readOnly = schema.readOnly,\n      widget = schema.widget; // 如果已经注明了渲染widget，那最好\n  // if (schema['ui:widget']) {\n  //   return schema['ui:widget'];\n  // }\n\n  var list = [];\n\n  if (readOnly) {\n    list.push(\"\".concat(type, \"?readOnly\"));\n    list.push('*?readOnly');\n  }\n\n  if (enums) {\n    // 根据enum长度来智能选择控件\n    if (Array.isArray(enums) && (type === 'array' && enums.length > 6 || type !== 'array' && enums.length > 2)) {\n      list.push(\"\".concat(type, \"?enum_long\"));\n      list.push('*?enum_long');\n    } else {\n      list.push(\"\".concat(type, \"?enum\")); // array 默认使用list，array?enum 默认使用checkboxes，*?enum 默认使用select\n\n      list.push('*?enum');\n    }\n  }\n\n  var _widget = widget || format;\n\n  if (_widget) {\n    list.push(\"\".concat(type, \":\").concat(_widget));\n  }\n\n  list.push(type); // 放在最后兜底，其他都不match时使用type默认的组件\n\n  var found = '';\n  list.some(function (item) {\n    found = _mapping[item];\n    return !!found;\n  });\n  return found;\n}\nexport var extraSchemaList = {\n  checkbox: {\n    valuePropName: 'checked'\n  },\n  switch: {\n    valuePropName: 'checked'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}