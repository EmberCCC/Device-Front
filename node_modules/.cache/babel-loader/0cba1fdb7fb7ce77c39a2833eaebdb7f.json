{"ast":null,"code":"import _classCallCheck from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport { observable, action } from 'mobx';\nimport { isDataExist } from 'Utils/dataTools';\nimport * as services from '../services/basic';\n\n// import { moment } from 'moment';\nvar DeviceMaintain = function DeviceMaintain() {\n  _classCallCheck(this, DeviceMaintain);\n};\n\nvar DeviceMaintainStore = new DeviceMaintain();\nexport default DeviceMaintainStore;","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\stores\\DeviceMaintainStore.js"],"names":["observable","action","isDataExist","services","DeviceMaintain","DeviceMaintainStore"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,mBAA1B;;AAEA;IAEMC,c;;;;AAyHN,IAAIC,mBAAmB,GAAG,IAAID,cAAJ,EAA1B;AACA,eAAeC,mBAAf","sourcesContent":["import { observable, action } from 'mobx';\nimport { isDataExist } from 'Utils/dataTools';\nimport * as services from '../services/basic';\nimport { message } from 'antd';\n// import { moment } from 'moment';\n\nclass DeviceMaintain {\n\t// /* 查询页面数据 */\n\t// @observable isLoading = false;\n\t// @observable deviceList = [];\n\t// @observable serverList = [];\n\t// @observable schemaList = [];\n\t// @observable schemaPage = {};\n\t// @observable deviceType = '';\n\t// @observable maintainType = 1;\n\t// @observable planType = 1;\n\n\t// /* 弹窗内容 */\n\t// @observable currentMain = {};\n\t// @observable editVisible = false\n\n\t// @action async getDevice() {\n\t// \t/* 获取所有的设备类型 */\n\t// \tthis.isLoading = true;\n\t// \ttry {\n\t// \t\tlet res = await services.gets('getSelectType')();\n\t// \t\tthis.isLoading = false;\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tthis.deviceList = res.data.data;\n\t// \t\t\tthis.deviceType = res.data.data[0].id;\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error);\n\t// \t}\n\t// }\n\n\t// /* ---------------- 点检库 */\n\n\t// @action async getMaintainServer(params = {}) {\n\t// \t/* 获取列表 */\n\t// \tthis.isLoading = true;\n\t// \ttry {\n\t// \t\tlet res = await services.gets('getMaintainServer')({\n\t// \t\t\tmaintainType: this.maintainType,\n\t// \t\t\t...params\n\t// \t\t});\n\t// \t\tthis.isLoading = false;\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tthis.serverList = res.data.data;\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error);\n\t// \t}\n\t// }\n\t// @action async getMaintainSchema(params = {}) {\n\t// \t/* 获取列表 */\n\t// \tthis.isLoading = true;\n\t// \ttry {\n\t// \t\tlet res = await services.gets('getMaintainSchema')({\n\t// \t\t\t// typeId: this.deviceType,\n\t// \t\t\tpageIndex: 1,\n\t// \t\t\tpageSize: 10,\n\t// \t\t\tmaintainType: this.maintainType,\n\t// \t\t\t...params\n\t// \t\t});\n\t// \t\tthis.isLoading = false;\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tthis.schemaList = res.data.data.items;\n\t// \t\t\tthis.schemaPage = res.data.data.pageInfo;\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error);\n\t// \t}\n\t// }\n\n\t// @action async save(params, type) {\n\t// \ttry {\n\t// \t\tlet req = type === 'server' ? 'saveServer' : 'saveSchema';\n\t// \t\tlet data = {\n\t// \t\t\t...params,\n\t// \t\t\ttypeId: this.deviceType\n\t// \t\t}\n\t// \t\t// console.log(this.status,data);\n\t// \t\tlet res = await services.posts(req)(data);\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tmessage.success('保存成功');\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error)\n\t// \t}\n\t// \ttype === 'server' ? this.getMaintainServer() : this.getMaintainSchema({ typeId: this.deviceType });\n\t// }\n\t// @action async delete(params, type) {\n\t// \ttry {\n\t// \t\tlet req = type === 'server' ? 'deleteServer' : 'deleteSchema';\n\t// \t\tlet res = await services.posts(req)(params);\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tmessage.success('保存成功');\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error)\n\t// \t}\n\t// \ttype === 'server' ? this.getMaintainServer() : this.getMaintainSchema();\n\t// }\n\t// @observable currentMainServer = {}\n\t// @observable currentMainSchame = {}\n\t// @action async getInfo(params, type) {\n\t// \ttry {\n\t// \t\tlet req = type === 'server' ? 'getServerInfo' : 'getSchemaInfo';\n\t// \t\tlet res = await services.gets(req)(params);\n\t// \t\tif (isDataExist(res)) {\n\t// \t\t\tif (type === 'server') {\n\t// \t\t\t\tthis.currentMainServer = res.data.data;\n\t// \t\t\t} else {\n\t// \t\t\t\tthis.currentMainSchame = res.data.data;\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error)\n\t// \t}\n\t// }\n\n\n\n}\n\nlet DeviceMaintainStore = new DeviceMaintain();\nexport default DeviceMaintainStore;\n"]},"metadata":{},"sourceType":"module"}