{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nimport React from 'react';\nexport default function html(_ref) {\n  var value = _ref.value,\n      _ref$schema = _ref.schema,\n      schema = _ref$schema === void 0 ? {} : _ref$schema;\n  var __html = '-';\n\n  if (schema.type === 'boolean') {\n    __html = value === true ? '✔' : '✘';\n  } else if (Array.isArray(schema.enum) && Array.isArray(schema.enumNames)) {\n    if (['string', 'number'].indexOf(_typeof(value)) > -1) {\n      var idx = schema.enum.indexOf(value);\n      __html = schema.enumNames[idx] || '-';\n    } else if (Array.isArray(value)) {\n      var idxStr = '-';\n      value.forEach(function (v) {\n        var idx = schema.enum.indexOf(v);\n        var name = schema.enumNames[idx];\n\n        if (name) {\n          idxStr += ',' + name;\n        }\n      });\n      __html = idxStr.replace('-,', '');\n    }\n  } else if (typeof value === 'number') {\n    __html = String(value);\n  } else if (typeof value === 'string') {\n    __html = value;\n  } else if (schema.type === 'range' && Array.isArray(value) && value[0] && value[1]) {\n    __html = \"\".concat(value[0], \" - \").concat(value[1]);\n  } else if (value && ['number', 'string'].indexOf(value) === -1) {\n    __html = JSON.stringify(value);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: __html\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}