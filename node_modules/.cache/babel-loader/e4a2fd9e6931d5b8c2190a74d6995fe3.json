{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rcMenu = require(\"rc-menu\");\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNode = require(\"../_util/reactNode\");\n\nvar _MenuContext = _interopRequireDefault(require(\"./MenuContext\"));\n\nfunction SubMenu(props) {\n  var _a;\n\n  var popupClassName = props.popupClassName,\n      icon = props.icon,\n      title = props.title,\n      theme = props.theme;\n  var context = React.useContext(_MenuContext[\"default\"]);\n  var prefixCls = context.prefixCls,\n      inlineCollapsed = context.inlineCollapsed,\n      antdMenuTheme = context.antdMenuTheme;\n  var parentPath = (0, _rcMenu.useFullPath)();\n  var titleNode;\n\n  if (!icon) {\n    titleNode = inlineCollapsed && !parentPath.length && title && typeof title === 'string' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-inline-collapsed-noicon\")\n    }, title.charAt(0)) : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-title-content\")\n    }, title);\n  } else {\n    // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span\n    // ref: https://github.com/ant-design/ant-design/pull/23456\n    var titleIsSpan = (0, _reactNode.isValidElement)(title) && title.type === 'span';\n    titleNode = /*#__PURE__*/React.createElement(React.Fragment, null, (0, _reactNode.cloneElement)(icon, {\n      className: (0, _classnames[\"default\"])((0, _reactNode.isValidElement)(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', \"\".concat(prefixCls, \"-item-icon\"))\n    }), titleIsSpan ? title : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-title-content\")\n    }, title));\n  }\n\n  var contextValue = React.useMemo(function () {\n    return (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, context), {\n      firstLevel: false\n    });\n  }, [context]);\n  return /*#__PURE__*/React.createElement(_MenuContext[\"default\"].Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(_rcMenu.SubMenu, (0, _extends2[\"default\"])({}, (0, _omit[\"default\"])(props, ['icon']), {\n    title: titleNode,\n    popupClassName: (0, _classnames[\"default\"])(prefixCls, \"\".concat(prefixCls, \"-\").concat(theme || antdMenuTheme), popupClassName)\n  })));\n}\n\nvar _default = SubMenu;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}