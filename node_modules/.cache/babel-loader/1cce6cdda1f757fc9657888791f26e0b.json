{"ast":null,"code":"import \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport _objectSpread from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _classCallCheck from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\src\\\\layouts\\\\SystemManager\\\\UserManager\\\\UserDialog.js\";\n\nimport React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { toJS } from 'mobx';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport GlobalModal from 'Components/GlobalModal';\nvar UserDialog = (_dec = inject('SystemStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserDialog, _Component);\n\n  function UserDialog(props) {\n    var _this;\n\n    _classCallCheck(this, UserDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserDialog).call(this, props));\n\n    _this.regularCheck = function (e) {\n      // let re = /^\\w+@[a-z0-9]+\\.[a-z]{2,4}$/\n      var emailRe = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]{2,6}$/;\n      var phoneRe = /^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/;\n\n      if (e.target.value) {\n        if (emailRe.test(e.target.value) || phoneRe.test(e.target.value)) {\n          _this.setState({\n            validateStatus: 'success',\n            help: ''\n          });\n        } else {\n          _this.setState({\n            validateStatus: 'error',\n            help: '用户名/工号须填写正确格式的可为邮箱或手机号'\n          });\n        }\n      } else {\n        _this.setState({\n          validateStatus: 'error',\n          help: '请输入用户名/工号'\n        });\n      }\n    };\n\n    _this.existUsername = function (e) {\n      if (_this.state.validateStatus === 'error' || _this.props.form.getFieldValue('username') === _this.props.SystemStore.formData.username) return;\n\n      if (e.target.value) {\n        _this.props.SystemStore.existUsername({\n          userName: e.target.value\n        }).then(function (res) {\n          if (res) {\n            _this.setState({\n              validateStatus: 'error',\n              help: '当前用户名/工号已存在'\n            });\n          } else {\n            _this.setState({\n              validateStatus: 'success',\n              help: ''\n            });\n          }\n        });\n      } else {\n        _this.setState({\n          validateStatus: 'error',\n          help: '请输入用户名/工号'\n        });\n      }\n    };\n\n    _this.changeSelf = function (e) {\n      _this.props.SystemStore.formData.deptId = '';\n      _this.props.SystemStore.formData.isSelf = e;\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$props$SystemSto = _this.props.SystemStore,\n          getData = _this$props$SystemSto.getData,\n          modalChange = _this$props$SystemSto.modalChange,\n          addNewUser = _this$props$SystemSto.addNewUser,\n          formData = _this$props$SystemSto.formData,\n          PageInfo = _this$props$SystemSto.PageInfo,\n          name = _this$props$SystemSto.name,\n          deptId = _this$props$SystemSto.deptId,\n          columnsType = _this$props$SystemSto.columnsType;\n\n      _this.props.form.validateFields(function (err, values) {\n        if (_this.state.validateStatus == 'init') {\n          _message.error('请输入用户名/工号');\n\n          return;\n        }\n\n        if (!err) {\n          if (_this.state.validateStatus === 'error') {\n            _message.error('当前用户名/工号的格式错误或已存在，请修改后再试试吧');\n\n            return;\n          }\n\n          if (values.roleIds) {\n            values.roleIds = values.roleIds.join(',');\n          }\n\n          if (formData.id) {\n            addNewUser(0, _objectSpread({}, formData, values)).then(function (res) {\n              _message.success('更新成功');\n\n              modalChange(0);\n              getData(3, {\n                pageIndex: PageInfo.pageIndex,\n                pageSize: PageInfo.pageSize,\n                name: name,\n                deptId: deptId,\n                isSelf: columnsType\n              });\n            });\n          } else {\n            // values.deptId = values.deptId ? values.deptId : 0\n            addNewUser(1, values).then(function (res) {\n              _message.success('添加成功');\n\n              modalChange(0);\n              getData(3, {\n                pageIndex: PageInfo.pageIndex,\n                pageSize: PageInfo.pageSize,\n                name: name,\n                deptId: deptId,\n                isSelf: columnsType\n              });\n            });\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      validateStatus: 'init',\n      help: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(UserDialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _toJS = toJS(this.props.SystemStore),\n          modalVisible = _toJS.modalVisible,\n          formData = _toJS.formData,\n          CumList = _toJS.CumList,\n          roleList = _toJS.roleList,\n          allDept = _toJS.allDept;\n\n      var formLabelCol = {\n        span: 4\n      };\n      var formWrapperCol = {\n        span: 18\n      };\n      var Option = _Select.Option;\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, modalVisible && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(GlobalModal, {\n        title: formData.userId ? '编辑' : '新增',\n        visible: modalVisible,\n        onOk: this.handleSubmit,\n        width: '50%',\n        onCancel: function onCancel(e) {\n          return _this2.props.SystemStore.modalChange(0);\n        },\n        children: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(Form, {\n          onSubmit: this.handleSubmit,\n          layout: \"horizontal\",\n          labelCol: formLabelCol,\n          wrapperCol: formWrapperCol,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(Form.Item, {\n          label: \"\\u59D3\\u540D\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, getFieldDecorator('name', {\n          rules: [{\n            required: true,\n            message: '请输入姓名'\n          }],\n          initialValue: formData.name || ''\n        })(React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\\u59D3\\u540D\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }))), React.createElement(Form.Item, {\n          label: \"\\u7528\\u6237\\u540D/\\u5DE5\\u53F7\",\n          help: this.state.help,\n          hasFeedback: true,\n          validateStatus: this.state.validateStatus,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, getFieldDecorator('username', {\n          rules: [{\n            required: true,\n            message: '请输入用户名/工号，只可为邮箱'\n          }],\n          initialValue: formData.username || ''\n        })(React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D\",\n          onInput: this.regularCheck,\n          onBlur: this.existUsername,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }))), React.createElement(Form.Item, {\n          label: \"\\u7EC4\\u7EC7\\u67B6\\u6784\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, getFieldDecorator('isSelf', {\n          rules: [{\n            required: true,\n            message: '请选择组织架构'\n          }],\n          initialValue: formData.isSelf || ''\n        })(React.createElement(_Select, {\n          disabled: formData.id,\n          placeholder: \"\\u8BF7\\u9009\\u62E9\\u7EC4\\u7EC7\\u67B6\\u6784\",\n          onChange: this.changeSelf,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(Option, {\n          value: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"\\u516C\\u53F8\"), React.createElement(Option, {\n          value: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"\\u5408\\u4F5C\\u4F19\\u4F34\")))), formData.isSelf === 1 && React.createElement(Form.Item, {\n          label: \"\\u90E8\\u95E8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, getFieldDecorator('deptId', {\n          rules: [{\n            required: true,\n            message: '请选择部门'\n          }],\n          initialValue: formData.deptId || ''\n        })(React.createElement(_Select, {\n          placeholder: \"\\u8BF7\\u9009\\u62E9\\u90E8\\u95E8\",\n          defaultValue: formData.deptId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, allDept.map(function (item, index) {\n          return React.createElement(Option, {\n            key: index,\n            value: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, item.name);\n        })))), formData.isSelf === 2 && React.createElement(Form.Item, {\n          label: \"\\u5BA2\\u6237\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, getFieldDecorator('deptId', {\n          rules: [{\n            required: true,\n            message: '请选择客户'\n          }],\n          initialValue: formData.deptId || ''\n        })(React.createElement(_Select, {\n          placeholder: \"\\u8BF7\\u9009\\u62E9\\u5BA2\\u6237\",\n          defaultValue: formData.deptId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, CumList.map(function (item, index) {\n          return React.createElement(Option, {\n            key: index,\n            value: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, item.customerName);\n        })))), formData.isSelf === 3 && React.createElement(Form.Item, {\n          label: \"\\u4F9B\\u5E94\\u5546\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, getFieldDecorator('deptId', {\n          rules: [{\n            required: true,\n            message: '请选择供应商'\n          }],\n          initialValue: formData.deptId || ''\n        })(React.createElement(_Select, {\n          placeholder: \"\\u8BF7\\u9009\\u62E9\\u4F9B\\u5E94\\u5546\",\n          defaultValue: formData.deptId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, CumList.map(function (item, index) {\n          return React.createElement(Option, {\n            key: index,\n            value: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, item.customerName);\n        })))), React.createElement(Form.Item, {\n          label: \"\\u624B\\u673A\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, getFieldDecorator('mobile', {\n          rules: [{\n            required: true,\n            message: '请输入手机'\n          }],\n          initialValue: formData.mobile || ''\n        })(React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\\u624B\\u673A\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }))), React.createElement(Form.Item, {\n          label: \"E-mail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, getFieldDecorator('email', {\n          rules: [{\n            required: false,\n            message: '请输入E-mail'\n          }],\n          initialValue: formData.email || ''\n        })(React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165E-mail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }))), React.createElement(Form.Item, {\n          label: \"\\u72B6\\u6001\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, getFieldDecorator('status', {\n          rules: [{\n            required: false,\n            message: '请选择状态'\n          }],\n          initialValue: formData.status || 0\n        })(React.createElement(_Radio.Group, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(_Radio, {\n          value: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"\\u6B63\\u5E38\"), React.createElement(_Radio, {\n          value: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"\\u7981\\u7528\")))), React.createElement(Form.Item, {\n          label: \"\\u89D2\\u8272\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, getFieldDecorator('roleIds', {\n          rules: [{\n            required: false,\n            message: '请选择角色'\n          }],\n          initialValue: formData.roleIds || ''\n        })(React.createElement(_Checkbox.Group, {\n          options: roleList,\n          defaultValue: formData.roleIds,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }))))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var formData = this.props.SystemStore.formData;\n\n      if (formData.username) {\n        this.setState({\n          validateStatus: 'success'\n        });\n      }\n    }\n  }]);\n\n  return UserDialog;\n}(Component), _temp)) || _class) || _class);\nvar UserDialogForm = Form.create({\n  name: 'user'\n})(UserDialog);\nexport default UserDialogForm;","map":{"version":3,"sources":["D:\\GGdownload\\设备运维前端\\bl-device-manage\\src\\layouts\\SystemManager\\UserManager\\UserDialog.js"],"names":["React","Component","inject","observer","toJS","Form","GlobalModal","UserDialog","props","regularCheck","e","emailRe","phoneRe","target","value","test","setState","validateStatus","help","existUsername","state","form","getFieldValue","SystemStore","formData","username","userName","then","res","changeSelf","deptId","isSelf","handleSubmit","preventDefault","getData","modalChange","addNewUser","PageInfo","name","columnsType","validateFields","err","values","error","roleIds","join","id","success","pageIndex","pageSize","modalVisible","CumList","roleList","allDept","formLabelCol","span","formWrapperCol","Option","getFieldDecorator","userId","rules","required","message","initialValue","map","item","index","customerName","mobile","email","status","UserDialogForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { Form } from '@ant-design/compatible';\r\nimport '@ant-design/compatible/assets/index.css';\r\nimport { message, Input, Radio, Select, Checkbox } from 'antd';\r\nimport GlobalModal from 'Components/GlobalModal';\r\n@inject('SystemStore')\r\n@observer\r\nclass UserDialog extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            validateStatus: 'init',\r\n            help: \"\"\r\n        }\r\n    }\r\n    render() {\r\n        const { modalVisible, formData, CumList, roleList, allDept } = toJS(this.props.SystemStore)\r\n        const formLabelCol = { span: 4 }\r\n        const formWrapperCol = { span: 18 }\r\n        const { Option } = Select;\r\n        const { getFieldDecorator } = this.props.form;\r\n        return <div>\r\n            {\r\n                modalVisible && <div>\r\n                    <GlobalModal\r\n                        title={formData.userId ? '编辑' : '新增'}\r\n                        visible={modalVisible}\r\n                        onOk={this.handleSubmit}\r\n                        width={'50%'}\r\n                        onCancel={e => this.props.SystemStore.modalChange(0)}\r\n                        children={\r\n                            <div>\r\n                                <Form onSubmit={this.handleSubmit} layout='horizontal' labelCol={formLabelCol} wrapperCol={formWrapperCol}>\r\n\r\n                                    <Form.Item label=\"姓名\">\r\n                                        {getFieldDecorator('name', {\r\n                                            rules: [{ required: true, message: '请输入姓名' }],\r\n                                            initialValue: formData.name || ''\r\n                                        })(\r\n                                            <Input placeholder=\"请输入姓名\" />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"用户名/工号\" help={this.state.help} hasFeedback validateStatus={this.state.validateStatus}> \r\n                                        {getFieldDecorator('username', {\r\n                                            rules: [{ \r\n                                                required: true, message: '请输入用户名/工号，只可为邮箱',\r\n                                             }],\r\n                                            initialValue: formData.username || ''\r\n                                        })(\r\n                                            <Input placeholder=\"请输入用户名\" onInput={this.regularCheck} onBlur={this.existUsername} />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    {/*formData.id && <Form.Item label=\"密码\">\r\n                                        {getFieldDecorator('password', {\r\n                                            rules: [{ required: true, message: '请输入密码' }],\r\n                                            initialValue: formData.password || ''\r\n                                        })(\r\n                                            <Input placeholder=\"请输入密码\" />\r\n                                        )}\r\n                                        </Form.Item>*/}\r\n                                    <Form.Item label=\"组织架构\">\r\n                                        {getFieldDecorator('isSelf', {\r\n                                            rules: [{ required: true, message: '请选择组织架构' }],\r\n                                            initialValue: formData.isSelf || ''\r\n                                        })(\r\n                                            <Select disabled={formData.id} placeholder='请选择组织架构' onChange={this.changeSelf}>\r\n                                                <Option value={1}>公司</Option>\r\n                                                <Option value={2}>合作伙伴</Option>\r\n                                                {/* <Option value={3}>供应商</Option>*/}\r\n                                            </Select>\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    {formData.isSelf === 1 && <Form.Item label=\"部门\">\r\n                                        {getFieldDecorator('deptId', {\r\n                                            rules: [{ required: true, message: '请选择部门' }],\r\n                                            initialValue: formData.deptId || ''\r\n                                        })(\r\n                                            <Select placeholder='请选择部门' defaultValue={formData.deptId}>\r\n                                                {\r\n                                                    allDept.map((item, index) => (\r\n                                                        <Option key={index} value={item.id}>{item.name}</Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        )}\r\n                                    </Form.Item>}\r\n                                    {formData.isSelf === 2 && <Form.Item label=\"客户\">\r\n                                        {getFieldDecorator('deptId', {\r\n                                            rules: [{ required: true, message: '请选择客户' }],\r\n                                            initialValue: formData.deptId || ''\r\n                                        })(\r\n                                            <Select placeholder='请选择客户' defaultValue={formData.deptId}>\r\n                                                {\r\n                                                    CumList.map((item, index) => (\r\n                                                        <Option key={index} value={item.id}>{item.customerName}</Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        )}\r\n                                    </Form.Item>}\r\n                                    {formData.isSelf === 3 && <Form.Item label=\"供应商\">\r\n                                        {getFieldDecorator('deptId', {\r\n                                            rules: [{ required: true, message: '请选择供应商' }],\r\n                                            initialValue: formData.deptId || ''\r\n                                        })(\r\n                                            <Select placeholder='请选择供应商' defaultValue={formData.deptId}>\r\n                                                {\r\n                                                    CumList.map((item, index) => (\r\n                                                        <Option key={index} value={item.id}>{item.customerName}</Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        )}\r\n                                    </Form.Item>}\r\n                                    <Form.Item label=\"手机\">\r\n                                        {getFieldDecorator('mobile', {\r\n                                            rules: [{ required: true, message: '请输入手机' }],\r\n                                            initialValue: formData.mobile || ''\r\n                                        })(\r\n                                            <Input placeholder=\"请输入手机\" />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"E-mail\">\r\n                                        {getFieldDecorator('email', {\r\n                                            rules: [{ required: false, message: '请输入E-mail' }],\r\n                                            initialValue: formData.email || ''\r\n                                        })(\r\n                                            <Input placeholder=\"请输入E-mail\" />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"状态\">\r\n                                        {getFieldDecorator('status', {\r\n                                            rules: [{ required: false, message: '请选择状态' }],\r\n                                            initialValue: formData.status || 0\r\n                                        })(\r\n                                            <Radio.Group>\r\n                                                <Radio value={1}>正常</Radio>\r\n                                                <Radio value={0}>禁用</Radio>\r\n                                            </Radio.Group>\r\n                                        )}\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"角色\">\r\n                                        {getFieldDecorator('roleIds', {\r\n                                            rules: [{ required: false, message: '请选择角色' }],\r\n                                            initialValue: formData.roleIds || ''\r\n                                        })(\r\n                                            <Checkbox.Group options={roleList} defaultValue={formData.roleIds} />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {/*innerModalVisible && <GlobalModal\r\n                        title='选择图标'\r\n                        visible={innerModalVisible}\r\n                        onOk={this.handleSubmit}\r\n                        width={'50%'}\r\n                        onCancel={e => this.props.SystemStore.modalChange(0)}\r\n                        children={\r\n                            <div></div>\r\n                        } />*/}\r\n                </div>\r\n            }\r\n        </div>;\r\n    }\r\n    regularCheck = (e) => {\r\n        // let re = /^\\w+@[a-z0-9]+\\.[a-z]{2,4}$/\r\n        let emailRe = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]{2,6}$/;\r\n        let phoneRe = /^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/;\r\n\r\n        if(e.target.value){\r\n            if (emailRe.test(e.target.value) || phoneRe.test(e.target.value)) {\r\n                this.setState({ validateStatus: 'success', help: '' })\r\n            } else {\r\n                this.setState({ validateStatus: 'error', help: '用户名/工号须填写正确格式的可为邮箱或手机号' })\r\n            }\r\n        }else{\r\n            this.setState({ validateStatus: 'error', help: '请输入用户名/工号' })\r\n        }\r\n    }\r\n    existUsername = (e) => {\r\n        if (this.state.validateStatus === 'error'||this.props.form.getFieldValue('username') === this.props.SystemStore.formData.username) return\r\n        if(e.target.value){\r\n            this.props.SystemStore.existUsername({ userName: e.target.value }).then(res => {\r\n                if (res) {\r\n                    this.setState({ validateStatus: 'error', help: '当前用户名/工号已存在' })\r\n                } else {\r\n                    this.setState({ validateStatus: 'success', help: '' })\r\n                }\r\n            })\r\n        }else{\r\n            this.setState({ validateStatus: 'error', help: '请输入用户名/工号' })\r\n        }\r\n    }\r\n    changeSelf = (e) => {\r\n        this.props.SystemStore.formData.deptId = ''\r\n        this.props.SystemStore.formData.isSelf = e\r\n    }\r\n    //提交表单\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const { getData, modalChange, addNewUser, formData, PageInfo, name, deptId, columnsType } = this.props.SystemStore\r\n        this.props.form.validateFields((err, values) => {\r\n            if(this.state.validateStatus == 'init'){\r\n                message.error('请输入用户名/工号')\r\n                return\r\n            }\r\n            if (!err) {\r\n                if (this.state.validateStatus === 'error') {\r\n                    message.error('当前用户名/工号的格式错误或已存在，请修改后再试试吧')\r\n                    return\r\n                }\r\n                if(values.roleIds){\r\n                    values.roleIds = values.roleIds.join(',')\r\n                }\r\n                if (formData.id) {\r\n                    addNewUser(0, { ...formData, ...values }).then(res => {\r\n                        message.success('更新成功')\r\n                        modalChange(0)\r\n                        getData(3, { pageIndex: PageInfo.pageIndex, pageSize: PageInfo.pageSize, name, deptId, isSelf: columnsType })\r\n                    })\r\n                } else {\r\n                    // values.deptId = values.deptId ? values.deptId : 0\r\n                    addNewUser(1, values).then(res => {\r\n                        message.success('添加成功')\r\n                        modalChange(0)\r\n                        getData(3, { pageIndex: PageInfo.pageIndex, pageSize: PageInfo.pageSize, name, deptId, isSelf: columnsType })\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    };\r\n    componentDidMount(){\r\n        const { formData } = this.props.SystemStore;\r\n        if(formData.username){\r\n            this.setState({\r\n                validateStatus:'success'\r\n            })\r\n        }\r\n    }\r\n}\r\nconst UserDialogForm = Form.create({ name: 'user' })(UserDialog);\r\nexport default UserDialogForm;"]},"metadata":{},"sourceType":"module"}