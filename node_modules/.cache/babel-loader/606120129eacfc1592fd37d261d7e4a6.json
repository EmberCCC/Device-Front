{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar ReactDOM = require(\"react-dom\");\n\nvar matchQueries_1 = require(\"container-query-toolkit/lib/matchQueries\");\n\nvar ContainerQueryCore_1 = require(\"./ContainerQueryCore\");\n\nvar isShallowEqual_1 = require(\"./isShallowEqual\");\n/**\n * <ContainerQuery query={query} initialSize={{width: 123, height: 456}}>\n *   {(params) => {\n *     <div className={classname(params)}></div>\n *   }}\n * </ContainerQuery>\n */\n\n\nvar ContainerQuery =\n/** @class */\nfunction (_super) {\n  __extends(ContainerQuery, _super);\n\n  function ContainerQuery(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.cqCore = null;\n    _this.state = {\n      params: props.initialSize ? matchQueries_1.default(props.query)(props.initialSize) : {}\n    };\n    return _this;\n  }\n\n  ContainerQuery.prototype.componentDidMount = function () {\n    this._startObserving(this.props.query);\n  };\n\n  ContainerQuery.prototype.componentWillReceiveProps = function (nextProps) {\n    // componentWillReceiveProps and componentDidMount can potentially run out of order,\n    // so we need to consider the case where cqCore is not initialized yet.\n    if (this.cqCore && !isQueriesEqual(this.props.query, nextProps.query)) {\n      this.cqCore.disconnect();\n      this.cqCore = null;\n\n      this._startObserving(nextProps.query);\n    }\n  };\n\n  ContainerQuery.prototype.componentDidUpdate = function () {\n    this.cqCore.observe(ReactDOM.findDOMNode(this));\n  };\n\n  ContainerQuery.prototype.componentWillUnmount = function () {\n    this.cqCore.disconnect();\n    this.cqCore = null;\n  };\n\n  ContainerQuery.prototype.render = function () {\n    return this.props.children(this.state.params);\n  };\n\n  ContainerQuery.prototype._startObserving = function (query) {\n    var _this = this;\n\n    this.cqCore = new ContainerQueryCore_1.default(query, function (params) {\n      _this.setState({\n        params: params\n      });\n    });\n    this.cqCore.observe(ReactDOM.findDOMNode(this));\n  };\n\n  return ContainerQuery;\n}(React.Component);\n\nexports.ContainerQuery = ContainerQuery;\n;\n\nfunction applyContainerQuery(Component, query, initialSize) {\n  return _a =\n  /** @class */\n  function (_super) {\n    __extends(ContainerQuery, _super);\n\n    function ContainerQuery(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.cqCore = null;\n      _this.state = {\n        params: initialSize ? matchQueries_1.default(query)(initialSize) : {}\n      };\n      return _this;\n    }\n\n    ContainerQuery.prototype.componentDidMount = function () {\n      var _this = this;\n\n      this.cqCore = new ContainerQueryCore_1.default(query, function (params) {\n        _this.setState({\n          params: params\n        });\n      });\n      this.cqCore.observe(ReactDOM.findDOMNode(this));\n    };\n\n    ContainerQuery.prototype.componentDidUpdate = function () {\n      this.cqCore.observe(ReactDOM.findDOMNode(this));\n    };\n\n    ContainerQuery.prototype.componentWillUnmount = function () {\n      this.cqCore.disconnect();\n      this.cqCore = null;\n    };\n\n    ContainerQuery.prototype.render = function () {\n      return React.createElement(Component, __assign({}, this.props, {\n        containerQuery: this.state.params\n      }));\n    };\n\n    return ContainerQuery;\n  }(React.Component), _a.displayName = Component.displayName ? \"ContainerQuery(\" + Component.displayName + \")\" : 'ContainerQuery', _a;\n\n  var _a;\n}\n\nexports.applyContainerQuery = applyContainerQuery;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isQueriesEqual(queryA, queryB) {\n  var keysA = Object.keys(queryA);\n  var keysB = Object.keys(queryB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(queryB, keysA[i]) || !isShallowEqual_1.default(queryA[keysA[i]], queryB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}