{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { createContext, useContext, useEffect, useReducer, useRef, useState } from 'react';\nexport var Ctx = /*#__PURE__*/createContext(function () {});\nexport var StoreCtx = /*#__PURE__*/createContext({});\nexport var Store2Ctx = /*#__PURE__*/createContext({});\nexport var useTools = function useTools() {\n  return useContext(Ctx);\n};\nexport var useStore = function useStore() {\n  return useContext(StoreCtx);\n};\nexport var useStore2 = function useStore2() {\n  return useContext(Store2Ctx);\n};\nexport var useSet = function useSet(initState) {\n  var _useReducer = useReducer(function (state, newState) {\n    var action = newState;\n\n    if (typeof newState === 'function') {\n      action = action(state);\n    }\n\n    if (newState.action && newState.payload) {\n      action = newState.payload;\n\n      if (typeof action === 'function') {\n        action = action(state);\n      }\n    }\n\n    var result = _objectSpread(_objectSpread({}, state), action); // console.group(newState.action || 'action'); // TODO: give it a name\n    // console.log('%cState:', 'color: #9E9E9E; font-weight: 700;', state);\n    // console.log('%cAction:', 'color: #00A7F7; font-weight: 700;', action);\n    // console.log('%cNext:', 'color: #47B04B; font-weight: 700;', result);\n    // console.groupEnd();\n\n\n    return result;\n  }, initState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      setState = _useReducer2[1];\n\n  return [state, setState];\n};\nexport function useInterval(callback, delay, start) {\n  var savedCallback = useRef();\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  var id = useRef();\n  useEffect(function () {\n    if (!start) {\n      return;\n    }\n\n    function tick() {\n      savedCallback && savedCallback.current && savedCallback.current();\n    }\n\n    tick();\n\n    if (delay !== null) {\n      id.current = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id.current);\n      };\n    }\n  }, [delay, start]);\n  return function () {\n    return clearInterval(id.current);\n  };\n}\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  var ref = useRef(); // Store current value in ref\n\n  useEffect(function () {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\nexport var useShowOnce = function useShowOnce(localKey) {\n  // 从 localStorage 读取 key 值\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  var localStr;\n\n  try {\n    localStr = localStorage.getItem(localKey);\n  } catch (error) {}\n\n  if (!localStr) {\n    setShow(true);\n    localStorage.setItem(localKey, JSON.stringify(true));\n  }\n\n  return show;\n};\nexport var useModal = function useModal() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var toggle = function toggle() {\n    return setShow(!show);\n  };\n\n  return [show, toggle];\n};\nexport var useWindowState = function useWindowState(initState) {\n  var _useState5 = useState(initState),\n      _useState6 = _slicedToArray(_useState5, 2),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  return [state, setState];\n};\nexport var useStorageState = function useStorageState() {\n  var initState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var searchKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'SAVES';\n\n  var readSearchFromStorage = function readSearchFromStorage() {\n    var searchStr = localStorage.getItem(searchKey);\n\n    if (searchStr) {\n      try {\n        return JSON.parse(searchStr);\n      } catch (error) {\n        return initState;\n      }\n    }\n\n    return initState;\n  };\n\n  var _useState7 = useState(readSearchFromStorage()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var setSearchWithStorage = function setSearchWithStorage(search) {\n    setData(search);\n    localStorage.setItem(searchKey, JSON.stringify(search));\n  };\n\n  return [data, setSearchWithStorage];\n};","map":null,"metadata":{},"sourceType":"module"}