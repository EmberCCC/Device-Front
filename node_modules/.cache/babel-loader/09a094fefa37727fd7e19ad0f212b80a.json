{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar FieldElemWrapper = function (_React$Component) {\n  _inherits(FieldElemWrapper, _React$Component);\n\n  function FieldElemWrapper() {\n    _classCallCheck(this, FieldElemWrapper);\n\n    return _possibleConstructorReturn(this, (FieldElemWrapper.__proto__ || Object.getPrototypeOf(FieldElemWrapper)).apply(this, arguments));\n  }\n\n  _createClass(FieldElemWrapper, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          name = _props.name,\n          form = _props.form;\n      form.domFields[name] = true;\n      form.recoverClearedField(name);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _props2 = this.props,\n          name = _props2.name,\n          form = _props2.form;\n      var fieldMeta = form.fieldsStore.getFieldMeta(name);\n\n      if (!fieldMeta.preserve) {\n        // after destroy, delete data\n        form.clearedFieldMetaCache[name] = {\n          field: form.fieldsStore.getField(name),\n          meta: fieldMeta\n        };\n        form.clearField(name);\n      }\n\n      delete form.domFields[name];\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n\n  return FieldElemWrapper;\n}(React.Component);\n\nexport default FieldElemWrapper;\nFieldElemWrapper.propTypes = {\n  name: PropTypes.string,\n  form: PropTypes.shape({\n    domFields: PropTypes.objectOf(PropTypes.bool),\n    recoverClearedField: PropTypes.func,\n    fieldsStore: PropTypes.shape({\n      getFieldMeta: PropTypes.func,\n      getField: PropTypes.func\n    }),\n    clearedFieldMetaCache: PropTypes.objectOf(PropTypes.shape({\n      field: PropTypes.object,\n      meta: PropTypes.object\n    })),\n    clearField: PropTypes.func\n  }),\n  children: PropTypes.node\n};","map":null,"metadata":{},"sourceType":"module"}