{"ast":null,"code":"import _objectSpread from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"D:\\\\GGdownload\\\\\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF\\\\bl-device-manage\\\\src\\\\layouts\\\\ZCloudDevice\\\\DeviceMaintain\\\\Query.js\";\n\nimport React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './index.less';\nimport GlobalList from 'components/GlobalList';\nimport { setQueryColumns, Query_Result } from './methods';\nvar Option = _Select.Option;\nvar CheckServer = (_dec = inject('ZCloudDeviceStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CheckServer, _Component);\n\n  function CheckServer(props) {\n    var _this;\n\n    _classCallCheck(this, CheckServer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckServer).call(this, props));\n\n    _this.onSelect = function (type, value) {\n      _this.store[type] = value;\n\n      if (type === 'typeId') {\n        _this.store.getListByType('device', {\n          typeId: value\n        });\n      }\n\n      _this.store.getQuery();\n    };\n\n    _this.handleVisible = function (status) {\n      _this.setState({\n        visible: !_this.state.visible\n      });\n    };\n\n    _this.handleSelect = function (selectedRowKeys) {\n      _this.setState({\n        selectedRowKeys: selectedRowKeys\n      });\n    };\n\n    _this.store = _this.props.ZCloudDeviceStore;\n    _this.state = {\n      selectedRowKeys: [],\n      visible: false,\n      contentType: 1,\n      maxValue: '',\n      minValue: '',\n      extendFormColumns: []\n    };\n    return _this;\n  }\n\n  _createClass(CheckServer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$store = this.store,\n          queryList = _this$store.queryList,\n          queryPage = _this$store.queryPage,\n          isLoading = _this$store.isLoading,\n          deviceByIdList = _this$store.deviceByIdList,\n          deviceList = _this$store.deviceList;\n      var rowSelection = {\n        selectedRowKeys: this.state.selectedRowKeys,\n        onChange: this.handleSelect\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(_Select, {\n        showSearch: true,\n        allowClear: true,\n        style: {\n          width: 250\n        },\n        placeholder: \"\\u8BBE\\u5907\\u7C7B\\u578B\",\n        onChange: this.onSelect.bind(this, 'typeId'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, deviceList && deviceList.map(function (item) {\n        return React.createElement(Option, {\n          key: item.typeId,\n          value: item.typeId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, item.typeId, \"_\", item.typeName);\n      })), React.createElement(_Select, {\n        showSearch: true,\n        allowClear: true,\n        style: {\n          width: 250,\n          margin: '0 10px'\n        },\n        placeholder: \"\\u9009\\u62E9\\u8BBE\\u5907\",\n        onChange: this.onSelect.bind(this, 'deviceId'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, deviceByIdList.length > 0 && deviceByIdList.map(function (item) {\n        return React.createElement(Option, {\n          key: item.id,\n          value: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, item.devName);\n      })), React.createElement(_Select, {\n        showSearch: true,\n        allowClear: true,\n        style: {\n          width: 250\n        },\n        placeholder: \"\\u70B9\\u68C0\\u7ED3\\u679C\",\n        onChange: this.onSelect.bind(this, 'result'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), Object.keys(Query_Result).map(function (item) {\n        return React.createElement(Option, {\n          key: item,\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, Query_Result[item]);\n      }))), React.createElement(GlobalList, {\n        table: {\n          rowKey: 'id',\n          columns: setQueryColumns(this.props.type),\n          dataSource: queryList,\n          pagination: _objectSpread({}, queryPage, {\n            onChange: function onChange(pageIndex, pageSize) {\n              _this2.store.getQuery({\n                pageIndex: pageIndex,\n                pageSize: pageSize\n              });\n            }\n          }),\n          isLoading: isLoading,\n          rowSelection: rowSelection // btns: [\n          //     {\n          //         name: '导出Excel',\n          //         onClick: () => {\n          //             this.handleVisible();\n          //         },\n          //         type: 'primary'\n          //     }\n          // ]\n\n        },\n        modal: {\n          children: React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, \"\\u5BFC\\u51FA\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.store.getQuery();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.store.clearData();\n    }\n  }]);\n\n  return CheckServer;\n}(Component), _temp)) || _class) || _class);\nexport default CheckServer;","map":{"version":3,"sources":["D:\\GGdownload\\设备运维前端\\bl-device-manage\\src\\layouts\\ZCloudDevice\\DeviceMaintain\\Query.js"],"names":["React","Component","inject","observer","GlobalList","setQueryColumns","Query_Result","Option","CheckServer","props","onSelect","type","value","store","getListByType","typeId","getQuery","handleVisible","status","setState","visible","state","handleSelect","selectedRowKeys","ZCloudDeviceStore","contentType","maxValue","minValue","extendFormColumns","queryList","queryPage","isLoading","deviceByIdList","deviceList","rowSelection","onChange","width","bind","map","item","typeName","margin","length","id","devName","Object","keys","rowKey","columns","dataSource","pagination","pageIndex","pageSize","children","clearData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './index.less';\nimport GlobalList from 'components/GlobalList';\nimport { Select, } from 'antd';\nimport { setQueryColumns, Query_Result } from './methods';\n\nconst { Option } = Select;\n\n@inject('ZCloudDeviceStore')\n@observer\nclass CheckServer extends Component {\n    constructor(props) {\n        super(props);\n        this.store = this.props.ZCloudDeviceStore;\n        this.state = {\n            selectedRowKeys: [],\n            visible: false,\n            contentType: 1,\n            maxValue: '',\n            minValue: '',\n            extendFormColumns: []\n        };\n    }\n    render() {\n        const {\n            queryList,\n            queryPage,\n            isLoading,\n            deviceByIdList,\n            deviceList,\n        } = this.store;\n        const rowSelection = {\n            selectedRowKeys: this.state.selectedRowKeys,\n            onChange: this.handleSelect\n        };\n        return (\n            <div>\n                <div>\n                    <Select\n                        showSearch allowClear\n                        style={{ width: 250, }}\n                        placeholder='设备类型'\n                        onChange={this.onSelect.bind(this, 'typeId')}\n                    >\n                        {\n                            deviceList && deviceList.map(item => {\n                                return <Option key={item.typeId} value={item.typeId}>\n                                    {item.typeId}_{item.typeName}\n                                </Option>\n                            })\n                        }\n                    </Select>\n                    <Select\n                        showSearch allowClear\n                        style={{ width: 250, margin: '0 10px' }}\n                        placeholder='选择设备'\n                        onChange={this.onSelect.bind(this, 'deviceId')}\n                    >\n                        {\n                            deviceByIdList.length > 0 && deviceByIdList.map(item => {\n                                return <Option key={item.id} value={item.id}>\n                                    {item.devName}\n                                </Option>\n                            })\n                        }\n                    </Select>\n                    <Select\n                        showSearch allowClear\n                        style={{ width: 250, }}\n                        placeholder='点检结果'\n                        onChange={this.onSelect.bind(this, 'result')}\n                    >\n                        <Option value=\"\">全部</Option>\n                        {\n                            Object.keys(Query_Result).map(item => {\n                                return <Option key={item} value={item}>\n                                    {Query_Result[item]}\n                                </Option>\n                            })\n                        }\n                    </Select>\n                </div>\n                <GlobalList\n                    table={{\n                        rowKey: 'id',\n                        columns: setQueryColumns(this.props.type),\n                        dataSource: queryList,\n                        pagination: {\n                            ...queryPage,\n                            onChange: (pageIndex, pageSize) => {\n                                this.store.getQuery({\n                                    pageIndex,\n                                    pageSize\n                                });\n                            }\n                        },\n                        isLoading,\n                        rowSelection,\n                        // btns: [\n                        //     {\n                        //         name: '导出Excel',\n                        //         onClick: () => {\n                        //             this.handleVisible();\n                        //         },\n                        //         type: 'primary'\n                        //     }\n                        // ]\n                    }}\n                    modal={{\n                        children: <span>导出</span>\n                    }}\n                />\n            </div>\n        );\n    }\n    onSelect = (type, value) => {\n        this.store[type] = value;\n        if (type === 'typeId') {\n            this.store.getListByType('device', { typeId: value });\n        }\n        this.store.getQuery()\n    }\n    handleVisible = (status) => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    };\n    handleSelect = selectedRowKeys => {\n        this.setState({ selectedRowKeys });\n    };\n    componentDidMount() {\n        this.store.getQuery();\n    }\n    componentWillUnmount() {\n        this.store.clearData()\n    }\n}\nexport default CheckServer;\n\n"]},"metadata":{},"sourceType":"module"}