{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getContainerRenderMixin;\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction defaultGetContainer() {\n  var container = document.createElement('div');\n  document.body.appendChild(container);\n  return container;\n}\n\nfunction getContainerRenderMixin(config) {\n  var _config$autoMount = config.autoMount,\n      autoMount = _config$autoMount === void 0 ? true : _config$autoMount,\n      _config$autoDestroy = config.autoDestroy,\n      autoDestroy = _config$autoDestroy === void 0 ? true : _config$autoDestroy,\n      isVisible = config.isVisible,\n      isForceRender = config.isForceRender,\n      getComponent = config.getComponent,\n      _config$getContainer = config.getContainer,\n      getContainer = _config$getContainer === void 0 ? defaultGetContainer : _config$getContainer;\n  var mixin;\n\n  function _renderComponent(instance, componentArg, ready) {\n    if (!isVisible || instance._component || isVisible(instance) || isForceRender && isForceRender(instance)) {\n      if (!instance._container) {\n        instance._container = getContainer(instance);\n      }\n\n      var component;\n\n      if (instance.getComponent) {\n        component = instance.getComponent(componentArg);\n      } else {\n        component = getComponent(instance, componentArg);\n      }\n\n      _reactDom.default.unstable_renderSubtreeIntoContainer(instance, component, instance._container, function callback() {\n        instance._component = this;\n\n        if (ready) {\n          ready.call(this);\n        }\n      });\n    }\n  }\n\n  if (autoMount) {\n    mixin = _objectSpread(_objectSpread({}, mixin), {}, {\n      componentDidMount: function componentDidMount() {\n        _renderComponent(this);\n      },\n      componentDidUpdate: function componentDidUpdate() {\n        _renderComponent(this);\n      }\n    });\n  }\n\n  if (!autoMount || !autoDestroy) {\n    mixin = _objectSpread(_objectSpread({}, mixin), {}, {\n      renderComponent: function renderComponent(componentArg, ready) {\n        _renderComponent(this, componentArg, ready);\n      }\n    });\n  }\n\n  function _removeContainer(instance) {\n    if (instance._container) {\n      var container = instance._container;\n\n      _reactDom.default.unmountComponentAtNode(container);\n\n      container.parentNode.removeChild(container);\n      instance._container = null;\n    }\n  }\n\n  if (autoDestroy) {\n    mixin = _objectSpread(_objectSpread({}, mixin), {}, {\n      componentWillUnmount: function componentWillUnmount() {\n        _removeContainer(this);\n      }\n    });\n  } else {\n    mixin = _objectSpread(_objectSpread({}, mixin), {}, {\n      removeContainer: function removeContainer() {\n        _removeContainer(this);\n      }\n    });\n  }\n\n  return mixin;\n}","map":null,"metadata":{},"sourceType":"script"}