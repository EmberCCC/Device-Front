{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport shallowEqual from 'shallowequal';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { MiniStoreContext } from './Provider';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nvar defaultMapStateToProps = function defaultMapStateToProps() {\n  return {};\n};\n\nexport function connect(mapStateToProps, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var shouldSubscribe = !!mapStateToProps;\n  var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;\n  return function wrapWithConnect(WrappedComponent) {\n    var Connect =\n    /** @class */\n    function (_super) {\n      __extends(Connect, _super);\n\n      function Connect(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        _this.unsubscribe = null;\n\n        _this.handleChange = function () {\n          if (!_this.unsubscribe) {\n            return;\n          }\n\n          var nextState = finalMapStateToProps(_this.store.getState(), _this.props);\n\n          _this.setState({\n            subscribed: nextState\n          });\n        };\n\n        _this.store = _this.context;\n        _this.state = {\n          subscribed: finalMapStateToProps(_this.store.getState(), props),\n          store: _this.store,\n          props: props\n        };\n        return _this;\n      }\n\n      Connect.getDerivedStateFromProps = function (props, prevState) {\n        // using ownProps\n        if (mapStateToProps && mapStateToProps.length === 2 && props !== prevState.props) {\n          return {\n            subscribed: finalMapStateToProps(prevState.store.getState(), props),\n            props: props\n          };\n        }\n\n        return {\n          props: props\n        };\n      };\n\n      Connect.prototype.componentDidMount = function () {\n        this.trySubscribe();\n      };\n\n      Connect.prototype.componentWillUnmount = function () {\n        this.tryUnsubscribe();\n      };\n\n      Connect.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state.subscribed, nextState.subscribed);\n      };\n\n      Connect.prototype.trySubscribe = function () {\n        if (shouldSubscribe) {\n          this.unsubscribe = this.store.subscribe(this.handleChange);\n          this.handleChange();\n        }\n      };\n\n      Connect.prototype.tryUnsubscribe = function () {\n        if (this.unsubscribe) {\n          this.unsubscribe();\n          this.unsubscribe = null;\n        }\n      };\n\n      Connect.prototype.render = function () {\n        var props = __assign(__assign(__assign({}, this.props), this.state.subscribed), {\n          store: this.store\n        });\n\n        return React.createElement(WrappedComponent, __assign({}, props, {\n          ref: this.props.miniStoreForwardedRef\n        }));\n      };\n\n      Connect.displayName = \"Connect(\" + getDisplayName(WrappedComponent) + \")\";\n      Connect.contextType = MiniStoreContext;\n      return Connect;\n    }(React.Component);\n\n    if (options.forwardRef) {\n      var forwarded = React.forwardRef(function (props, ref) {\n        return React.createElement(Connect, __assign({}, props, {\n          miniStoreForwardedRef: ref\n        }));\n      });\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}