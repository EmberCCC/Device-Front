{"ast":null,"code":"import _objectSpread from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\documents\\\\bl-device-manage-test\\\\src\\\\layouts\\\\FlowManage\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState } from 'react-flow-renderer';\nimport './updatenode.css';\nvar initialNodes = [{\n  id: '1',\n  data: {\n    label: '-'\n  },\n  position: {\n    x: 100,\n    y: 100\n  }\n}, {\n  id: '2',\n  data: {\n    label: 'Node 2'\n  },\n  position: {\n    x: 100,\n    y: 200\n  }\n}];\nvar initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2'\n}];\n\nvar UpdateNode = function UpdateNode() {\n  var _useNodesState = useNodesState(initialNodes),\n      _useNodesState2 = _slicedToArray(_useNodesState, 3),\n      nodes = _useNodesState2[0],\n      setNodes = _useNodesState2[1],\n      onNodesChange = _useNodesState2[2];\n\n  var _useEdgesState = useEdgesState(initialEdges),\n      _useEdgesState2 = _slicedToArray(_useEdgesState, 3),\n      edges = _useEdgesState2[0],\n      setEdges = _useEdgesState2[1],\n      onEdgesChange = _useEdgesState2[2];\n\n  var _useState = useState('Node 1'),\n      _useState2 = _slicedToArray(_useState, 2),\n      nodeName = _useState2[0],\n      setNodeName = _useState2[1];\n\n  var _useState3 = useState('#eee'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nodeBg = _useState4[0],\n      setNodeBg = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nodeHidden = _useState6[0],\n      setNodeHidden = _useState6[1];\n\n  useEffect(function () {\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === '1') {\n          // it's important that you create a new object here\n          // in order to notify react flow about the change\n          node.data = _objectSpread({}, node.data, {\n            label: nodeName\n          });\n        }\n\n        return node;\n      });\n    });\n  }, [nodeName, setNodes]);\n  useEffect(function () {\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === '1') {\n          // it's important that you create a new object here\n          // in order to notify react flow about the change\n          node.style = _objectSpread({}, node.style, {\n            backgroundColor: nodeBg\n          });\n        }\n\n        return node;\n      });\n    });\n  }, [nodeBg, setNodes]);\n  useEffect(function () {\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === '1') {\n          // when you update a simple type you can just update the value\n          node.hidden = nodeHidden;\n        }\n\n        return node;\n      });\n    });\n    setEdges(function (eds) {\n      return eds.map(function (edge) {\n        if (edge.id === 'e1-2') {\n          edge.hidden = nodeHidden;\n        }\n\n        return edge;\n      });\n    });\n  }, [nodeHidden, setNodes, setEdges]);\n  return React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    defaultZoom: 1.5,\n    minZoom: 0.2,\n    maxZoom: 4,\n    attributionPosition: \"bottom-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"updatenode__controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"label:\"), React.createElement(\"input\", {\n    value: nodeName,\n    onChange: function onChange(evt) {\n      return setNodeName(evt.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"updatenode__bglabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"background:\"), React.createElement(\"input\", {\n    value: nodeBg,\n    onChange: function onChange(evt) {\n      return setNodeBg(evt.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"updatenode__checkboxwrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"hidden:\"), React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: nodeHidden,\n    onChange: function onChange(evt) {\n      return setNodeHidden(evt.target.checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))));\n};\n\nexport default UpdateNode;","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\layouts\\FlowManage\\index.js"],"names":["React","useEffect","useState","ReactFlow","useNodesState","useEdgesState","initialNodes","id","data","label","position","x","y","initialEdges","source","target","UpdateNode","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeName","setNodeName","nodeBg","setNodeBg","nodeHidden","setNodeHidden","nds","map","node","style","backgroundColor","hidden","eds","edge","evt","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,IAAoBC,aAApB,EAAmCC,aAAnC,QAAwD,qBAAxD;AAEA,OAAO,kBAAP;AAEA,IAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAjB;AAAiCC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAA3C,CADmB,EAEnB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAjB;AAAsCC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAAhD,CAFmB,CAArB;AAKA,IAAMC,YAAY,GAAG,CAAC;AAAEN,EAAAA,EAAE,EAAE,MAAN;AAAcO,EAAAA,MAAM,EAAE,GAAtB;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAAD,CAArB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,uBACkBZ,aAAa,CAACE,YAAD,CAD/B;AAAA;AAAA,MAChBW,KADgB;AAAA,MACTC,QADS;AAAA,MACCC,aADD;;AAAA,uBAEkBd,aAAa,CAACQ,YAAD,CAF/B;AAAA;AAAA,MAEhBO,KAFgB;AAAA,MAETC,QAFS;AAAA,MAECC,aAFD;;AAAA,kBAISpB,QAAQ,CAAC,QAAD,CAJjB;AAAA;AAAA,MAIhBqB,QAJgB;AAAA,MAINC,WAJM;;AAAA,mBAKKtB,QAAQ,CAAC,MAAD,CALb;AAAA;AAAA,MAKhBuB,MALgB;AAAA,MAKRC,SALQ;;AAAA,mBAMaxB,QAAQ,CAAC,KAAD,CANrB;AAAA;AAAA,MAMhByB,UANgB;AAAA,MAMJC,aANI;;AAQvB3B,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,QAAQ,CAAC,UAACW,GAAD;AAAA,aACPA,GAAG,CAACC,GAAJ,CAAQ,UAACC,IAAD,EAAU;AAChB,YAAIA,IAAI,CAACxB,EAAL,KAAY,GAAhB,EAAqB;AACnB;AACA;AACAwB,UAAAA,IAAI,CAACvB,IAAL,qBACKuB,IAAI,CAACvB,IADV;AAEEC,YAAAA,KAAK,EAAEc;AAFT;AAID;;AAED,eAAOQ,IAAP;AACD,OAXD,CADO;AAAA,KAAD,CAAR;AAcD,GAfQ,EAeN,CAACR,QAAD,EAAWL,QAAX,CAfM,CAAT;AAiBAjB,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,QAAQ,CAAC,UAACW,GAAD;AAAA,aACPA,GAAG,CAACC,GAAJ,CAAQ,UAACC,IAAD,EAAU;AAChB,YAAIA,IAAI,CAACxB,EAAL,KAAY,GAAhB,EAAqB;AACnB;AACA;AACAwB,UAAAA,IAAI,CAACC,KAAL,qBAAkBD,IAAI,CAACC,KAAvB;AAA8BC,YAAAA,eAAe,EAAER;AAA/C;AACD;;AAED,eAAOM,IAAP;AACD,OARD,CADO;AAAA,KAAD,CAAR;AAWD,GAZQ,EAYN,CAACN,MAAD,EAASP,QAAT,CAZM,CAAT;AAcAjB,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,QAAQ,CAAC,UAACW,GAAD;AAAA,aACPA,GAAG,CAACC,GAAJ,CAAQ,UAACC,IAAD,EAAU;AAChB,YAAIA,IAAI,CAACxB,EAAL,KAAY,GAAhB,EAAqB;AACnB;AACAwB,UAAAA,IAAI,CAACG,MAAL,GAAcP,UAAd;AACD;;AAED,eAAOI,IAAP;AACD,OAPD,CADO;AAAA,KAAD,CAAR;AAUAV,IAAAA,QAAQ,CAAC,UAACc,GAAD;AAAA,aACPA,GAAG,CAACL,GAAJ,CAAQ,UAACM,IAAD,EAAU;AAChB,YAAIA,IAAI,CAAC7B,EAAL,KAAY,MAAhB,EAAwB;AACtB6B,UAAAA,IAAI,CAACF,MAAL,GAAcP,UAAd;AACD;;AAED,eAAOS,IAAP;AACD,OAND,CADO;AAAA,KAAD,CAAR;AASD,GApBQ,EAoBN,CAACT,UAAD,EAAaT,QAAb,EAAuBG,QAAvB,CApBM,CAAT;AAsBA,SACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEJ,KADT;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,aAAa,EAAED,aAHjB;AAIE,IAAA,aAAa,EAAEG,aAJjB;AAKE,IAAA,WAAW,EAAE,GALf;AAME,IAAA,OAAO,EAAE,GANX;AAOE,IAAA,OAAO,EAAE,CAPX;AAQE,IAAA,mBAAmB,EAAC,aARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAO,IAAA,KAAK,EAAEC,QAAd;AAAwB,IAAA,QAAQ,EAAE,kBAACc,GAAD;AAAA,aAASb,WAAW,CAACa,GAAG,CAACtB,MAAJ,CAAWuB,KAAZ,CAApB;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIE;AAAO,IAAA,SAAS,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,EAKE;AAAO,IAAA,KAAK,EAAEb,MAAd;AAAsB,IAAA,QAAQ,EAAE,kBAACY,GAAD;AAAA,aAASX,SAAS,CAACW,GAAG,CAACtB,MAAJ,CAAWuB,KAAZ,CAAlB;AAAA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAOE;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,OAAO,EAAEX,UAFX;AAGE,IAAA,QAAQ,EAAE,kBAACU,GAAD;AAAA,aAAST,aAAa,CAACS,GAAG,CAACtB,MAAJ,CAAWwB,OAAZ,CAAtB;AAAA,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAPF,CAVF,CADF;AA6BD,CA1FD;;AA4FA,eAAevB,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactFlow, { useNodesState, useEdgesState } from 'react-flow-renderer';\r\n\r\nimport './updatenode.css';\r\n\r\nconst initialNodes = [\r\n  { id: '1', data: { label: '-' }, position: { x: 100, y: 100 } },\r\n  { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 200 } },\r\n];\r\n\r\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\r\n\r\nconst UpdateNode = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n\r\n  const [nodeName, setNodeName] = useState('Node 1');\r\n  const [nodeBg, setNodeBg] = useState('#eee');\r\n  const [nodeHidden, setNodeHidden] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === '1') {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          node.data = {\r\n            ...node.data,\r\n            label: nodeName,\r\n          };\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeName, setNodes]);\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === '1') {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          node.style = { ...node.style, backgroundColor: nodeBg };\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeBg, setNodes]);\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === '1') {\r\n          // when you update a simple type you can just update the value\r\n          node.hidden = nodeHidden;\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        if (edge.id === 'e1-2') {\r\n          edge.hidden = nodeHidden;\r\n        }\r\n\r\n        return edge;\r\n      })\r\n    );\r\n  }, [nodeHidden, setNodes, setEdges]);\r\n\r\n  return (\r\n    <ReactFlow\r\n      nodes={nodes}\r\n      edges={edges}\r\n      onNodesChange={onNodesChange}\r\n      onEdgesChange={onEdgesChange}\r\n      defaultZoom={1.5}\r\n      minZoom={0.2}\r\n      maxZoom={4}\r\n      attributionPosition=\"bottom-left\"\r\n    >\r\n      <div className=\"updatenode__controls\">\r\n        <label>label:</label>\r\n        <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\r\n\r\n        <label className=\"updatenode__bglabel\">background:</label>\r\n        <input value={nodeBg} onChange={(evt) => setNodeBg(evt.target.value)} />\r\n\r\n        <div className=\"updatenode__checkboxwrapper\">\r\n          <label>hidden:</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={nodeHidden}\r\n            onChange={(evt) => setNodeHidden(evt.target.checked)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default UpdateNode;\r\n"]},"metadata":{},"sourceType":"module"}