{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport _objectSpread from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nvar _jsxFileName = \"F:\\\\documents\\\\bl-device-manage-test\\\\src\\\\layouts\\\\FlowManage\\\\index.js\";\nimport React, { useState, useRef, useCallback, useMemo, useEffect } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, MiniMap, MarkerType } from 'react-flow-renderer';\nimport Sidebar from './Sidebar';\nimport FlowNode from './Node/FlowNode';\nimport CopyNode from './Node/CopyNode';\nimport './index.css';\nvar Header = _Layout.Header,\n    Sider = _Layout.Sider,\n    Content = _Layout.Content;\nvar initialNodes = [{\n  id: '0',\n  type: 'input',\n  data: {\n    label: '开始流程'\n  },\n  position: {\n    x: 250,\n    y: 5\n  },\n  selectable: false\n}, {\n  id: '-1',\n  type: 'output',\n  data: {\n    label: '结束流程'\n  },\n  position: {\n    x: 250,\n    y: 80\n  },\n  selectable: false\n}];\nvar nodeTypes = {\n  FlowNode: FlowNode,\n  CopyNode: CopyNode\n};\nvar id = 0;\n\nvar getId = function getId() {\n  return \"node_\".concat(++id);\n};\n\nvar DnDFlow = function DnDFlow() {\n  var reactFlowWrapper = useRef(null);\n\n  var _useNodesState = useNodesState(initialNodes),\n      _useNodesState2 = _slicedToArray(_useNodesState, 3),\n      nodes = _useNodesState2[0],\n      setNodes = _useNodesState2[1],\n      onNodesChange = _useNodesState2[2];\n\n  var _useEdgesState = useEdgesState([]),\n      _useEdgesState2 = _slicedToArray(_useEdgesState, 3),\n      edges = _useEdgesState2[0],\n      setEdges = _useEdgesState2[1],\n      onEdgesChange = _useEdgesState2[2];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      reactFlowInstance = _useState2[0],\n      setReactFlowInstance = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nodeName = _useState4[0],\n      setNodeName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nodeId = _useState6[0],\n      setNodeId = _useState6[1];\n\n  useEffect(function () {\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === nodeId) {\n          // it's important that you create a new object here\n          // in order to notify react flow about the change\n          node.data = _objectSpread({}, node.data, {\n            label: nodeName\n          });\n        }\n\n        return node;\n      });\n    });\n  }, [nodeName, setNodes]);\n  var onConnect = useCallback(function (params) {\n    console.log(params);\n    var obj = {\n      type: MarkerType.Arrow\n    };\n    params.markerEnd = obj;\n    setEdges(function (eds) {\n      return addEdge(params, eds);\n    });\n  }, []);\n  var onDragOver = useCallback(function (event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  var onDrop = useCallback(function (event) {\n    event.preventDefault();\n    var reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    var type = event.dataTransfer.getData('application/reactflow'); // check if the dropped element is valid\n\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n\n    var position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    var newNode = {\n      id: getId(),\n      type: type,\n      position: position,\n      data: {\n        label: \"\".concat(type, \" node\")\n      }\n    };\n    setNodes(function (nds) {\n      return nds.concat(newNode);\n    });\n  }, [reactFlowInstance]);\n  var onSave = useCallback(function () {\n    if (reactFlowInstance) {\n      var flow = reactFlowInstance.toObject();\n      console.log(flow);\n    }\n  }, [reactFlowInstance]);\n  var onNodeClick = useCallback(function (event, node) {\n    setNodeId(node.id);\n    setNodeName(node.data.label);\n  }, [nodeName], [nodeId]);\n  return React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Header, {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(_Button, {\n    type: \"primary\",\n    className: \"save\",\n    onClick: onSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"\\u4FDD\\u5B58\")), React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Header, {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Sidebar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dndflow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(ReactFlowProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"reactflow-wrapper\",\n    ref: reactFlowWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect,\n    onInit: setReactFlowInstance,\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    nodeTypes: nodeTypes,\n    onNodeClick: onNodeClick,\n    fitView: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Controls, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }))))))))), React.createElement(Sider, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"updatenode__controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"label:\"), React.createElement(\"input\", {\n    value: nodeName,\n    onChange: function onChange(evt) {\n      return setNodeName(evt.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })))));\n};\n\nexport default DnDFlow;","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\layouts\\FlowManage\\index.js"],"names":["React","useState","useRef","useCallback","useMemo","useEffect","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","MiniMap","MarkerType","Sidebar","FlowNode","CopyNode","Header","Sider","Content","initialNodes","id","type","data","label","position","x","y","selectable","nodeTypes","getId","DnDFlow","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","nodeName","setNodeName","nodeId","setNodeId","nds","map","node","onConnect","params","console","log","obj","Arrow","markerEnd","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","newNode","concat","onSave","flow","toObject","onNodeClick","backgroundColor","evt","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback, useMemo, useEffect } from 'react';\r\nimport { Layout, Button, Menu, Dropdown, Divider } from 'antd';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Controls,\r\n  MiniMap,\r\n  MarkerType\r\n} from 'react-flow-renderer';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport FlowNode from './Node/FlowNode'\r\nimport CopyNode from './Node/CopyNode'\r\n\r\nimport './index.css';\r\nconst { Header, Sider, Content } = Layout;\r\nconst initialNodes = [\r\n  {\r\n    id: '0',\r\n    type: 'input',\r\n    data: { label: '开始流程' },\r\n    position: { x: 250, y: 5 },\r\n    selectable: false\r\n  },\r\n  {\r\n    id: '-1',\r\n    type: 'output',\r\n    data: { label: '结束流程' },\r\n    position: { x: 250, y: 80 },\r\n    selectable: false\r\n  },\r\n];\r\nconst nodeTypes = { FlowNode: FlowNode, CopyNode: CopyNode };\r\n\r\nlet id = 0;\r\nconst getId = () => `node_${++id}`;\r\n\r\nconst DnDFlow = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [nodeName, setNodeName] = useState('');\r\n  const [nodeId, setNodeId] = useState('');\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === nodeId) {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          node.data = {\r\n            ...node.data,\r\n            label: nodeName,\r\n          };\r\n        }\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeName, setNodes]);\r\n\r\n  const onConnect = useCallback((params) => {\r\n    console.log(params);\r\n    let obj = {\r\n      type: MarkerType.Arrow,\r\n    }\r\n    params.markerEnd = obj\r\n    setEdges((eds) => addEdge(params, eds))\r\n  }, []);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      // check if the dropped element is valid\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n\r\n  const onSave = useCallback(() => {\r\n    if (reactFlowInstance) {\r\n      const flow = reactFlowInstance.toObject();\r\n      console.log(flow);\r\n    }\r\n  }, [reactFlowInstance]);\r\n\r\n  const onNodeClick = useCallback((event, node) => {\r\n    setNodeId(node.id)\r\n    setNodeName(node.data.label)\r\n\r\n  }, [nodeName], [nodeId])\r\n\r\n  return (\r\n    <Layout>\r\n      <Header className='header'>\r\n        <Button type=\"primary\" className='save' onClick={onSave}>保存</Button>\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <Layout>\r\n            <Header className='title'>\r\n              <Sidebar />\r\n            </Header>\r\n            <Content>\r\n              <div className=\"dndflow\">\r\n                <ReactFlowProvider>\r\n                  <Content>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                      <ReactFlow\r\n                        nodes={nodes}\r\n                        edges={edges}\r\n                        onNodesChange={onNodesChange}\r\n                        onEdgesChange={onEdgesChange}\r\n                        onConnect={onConnect}\r\n                        onInit={setReactFlowInstance}\r\n                        onDrop={onDrop}\r\n                        onDragOver={onDragOver}\r\n                        nodeTypes={nodeTypes}\r\n                        onNodeClick={onNodeClick}\r\n                        fitView\r\n                      >\r\n                        <Controls />\r\n                      </ReactFlow>\r\n                    </div>\r\n                  </Content>\r\n                </ReactFlowProvider>\r\n              </div>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Sider style={{ backgroundColor: 'white' }}>\r\n          <div className=\"updatenode__controls\">\r\n            <label>label:</label>\r\n            <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\r\n          </div>\r\n        </Sider>\r\n      </Layout>\r\n\r\n    </Layout>\r\n\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n"]},"metadata":{},"sourceType":"module"}