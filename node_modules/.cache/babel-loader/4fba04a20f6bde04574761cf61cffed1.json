{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _color = require('./helpers/color');\n\nvar _color2 = _interopRequireDefault(_color);\n\nvar _percentage = require('./helpers/percentage');\n\nvar _percentage2 = _interopRequireDefault(_percentage);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar modesMap = ['RGB', 'HSB'];\n\nvar Params = function (_React$Component) {\n  _inherits(Params, _React$Component);\n\n  function Params(props) {\n    _classCallCheck(this, Params); // 管理 input 的状态\n\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.getChannelInRange = function (value, index) {\n      var channelMap = {\n        RGB: [[0, 255], [0, 255], [0, 255]],\n        HSB: [[0, 359], [0, 100], [0, 100]]\n      };\n      var mode = _this.state.mode;\n      var range = channelMap[mode][index];\n      var result = parseInt(value, 10);\n\n      if (isNaN(result)) {\n        result = 0;\n      }\n\n      result = Math.max(range[0], result);\n      result = Math.min(result, range[1]);\n      return result;\n    };\n\n    _this.getPrefixCls = function () {\n      return _this.props.rootPrefixCls + '-params';\n    };\n\n    _this.handleHexBlur = function () {\n      var hex = _this.state.hex;\n      var color = null;\n\n      if (_color2[\"default\"].isValidHex(hex)) {\n        color = new _color2[\"default\"](hex);\n      }\n\n      if (color !== null) {\n        _this.setState({\n          color: color,\n          hex: hex\n        });\n\n        _this.props.onChange(color, false);\n      }\n    };\n\n    _this.handleHexPress = function (event) {\n      var hex = _this.state.hex;\n\n      if (event.nativeEvent.which === 13) {\n        var color = null;\n\n        if (_color2[\"default\"].isValidHex(hex)) {\n          color = new _color2[\"default\"](hex);\n        }\n\n        if (color !== null) {\n          _this.setState({\n            color: color,\n            hex: hex\n          });\n\n          _this.props.onChange(color, false);\n        }\n      }\n    };\n\n    _this.handleHexChange = function (event) {\n      var hex = event.target.value;\n\n      _this.setState({\n        hex: hex\n      });\n    };\n\n    _this.handleModeChange = function () {\n      var mode = _this.state.mode;\n      var modeIndex = (modesMap.indexOf(mode) + 1) % modesMap.length;\n      mode = modesMap[modeIndex];\n\n      _this.setState({\n        mode: mode\n      });\n    };\n\n    _this.handleAlphaHandler = function (event) {\n      var alpha = parseInt(event.target.value, 10);\n\n      if (isNaN(alpha)) {\n        alpha = 0;\n      }\n\n      alpha = Math.max(0, alpha);\n      alpha = Math.min(alpha, 100);\n\n      _this.props.onAlphaChange(alpha);\n    };\n\n    _this.updateColorByChanel = function (channel, value) {\n      var color = _this.props.color;\n      var mode = _this.state.mode;\n\n      if (mode === 'HSB') {\n        if (channel === 'H') {\n          color.hue = parseInt(value, 10);\n        } else if (channel === 'S') {\n          color.saturation = parseInt(value, 10) / 100;\n        } else if (channel === 'B') {\n          color.brightness = parseInt(value, 10) / 100;\n        }\n      } else {\n        if (channel === 'R') {\n          color.red = parseInt(value, 10);\n        } else if (channel === 'G') {\n          color.green = parseInt(value, 10);\n        } else if (channel === 'B') {\n          color.blue = parseInt(value, 10);\n        }\n      }\n\n      return color;\n    };\n\n    _this.handleColorChannelChange = function (index, event) {\n      var value = _this.getChannelInRange(event.target.value, index);\n\n      var mode = _this.state.mode;\n      var channel = mode[index];\n\n      var color = _this.updateColorByChanel(channel, value);\n\n      _this.setState({\n        hex: color.hex,\n        color: color\n      }, function () {\n        _this.props.onChange(color, false);\n      });\n    };\n\n    _this.state = {\n      mode: props.mode,\n      hex: props.color.hex,\n      color: props.color // instanceof tinycolor\n\n    };\n    return _this;\n  }\n\n  Params.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var nextColor = nextProps.color;\n    this.setState({\n      color: nextColor,\n      hex: nextColor.hex\n    });\n  };\n\n  Params.prototype.render = function render() {\n    var _cx;\n\n    var prefixCls = this.getPrefixCls();\n    var enableAlpha = this.props.enableAlpha;\n    var _state = this.state,\n        mode = _state.mode,\n        color = _state.color;\n    var colorChannel = color[mode];\n\n    if (mode === 'HSB') {\n      colorChannel[0] = parseInt(colorChannel[0], 10);\n      colorChannel[1] = (0, _percentage2[\"default\"])(colorChannel[1]);\n      colorChannel[2] = (0, _percentage2[\"default\"])(colorChannel[2]);\n    }\n\n    var paramsClasses = (0, _classnames2[\"default\"])((_cx = {}, _defineProperty(_cx, prefixCls, true), _defineProperty(_cx, prefixCls + '-has-alpha', enableAlpha), _cx));\n    return _react2[\"default\"].createElement('div', {\n      className: paramsClasses\n    }, _react2[\"default\"].createElement('div', {\n      className: prefixCls + '-input'\n    }, _react2[\"default\"].createElement('input', {\n      className: prefixCls + '-hex',\n      type: 'text',\n      maxLength: '6',\n      onKeyPress: this.handleHexPress,\n      onBlur: this.handleHexBlur,\n      onChange: this.handleHexChange,\n      value: this.state.hex.toLowerCase()\n    }), _react2[\"default\"].createElement('input', {\n      type: 'number',\n      ref: 'channel_0',\n      value: colorChannel[0],\n      onChange: this.handleColorChannelChange.bind(null, 0)\n    }), _react2[\"default\"].createElement('input', {\n      type: 'number',\n      ref: 'channel_1',\n      value: colorChannel[1],\n      onChange: this.handleColorChannelChange.bind(null, 1)\n    }), _react2[\"default\"].createElement('input', {\n      type: 'number',\n      ref: 'channel_2',\n      value: colorChannel[2],\n      onChange: this.handleColorChannelChange.bind(null, 2)\n    }), enableAlpha && _react2[\"default\"].createElement('input', {\n      type: 'number',\n      value: Math.round(this.props.alpha),\n      onChange: this.handleAlphaHandler\n    })), _react2[\"default\"].createElement('div', {\n      className: prefixCls + '-lable'\n    }, _react2[\"default\"].createElement('label', {\n      className: prefixCls + '-lable-hex'\n    }, 'Hex'), _react2[\"default\"].createElement('label', {\n      className: prefixCls + '-lable-number',\n      onClick: this.handleModeChange\n    }, mode[0]), _react2[\"default\"].createElement('label', {\n      className: prefixCls + '-lable-number',\n      onClick: this.handleModeChange\n    }, mode[1]), _react2[\"default\"].createElement('label', {\n      className: prefixCls + '-lable-number',\n      onClick: this.handleModeChange\n    }, mode[2]), enableAlpha && _react2[\"default\"].createElement('label', {\n      className: prefixCls + '-lable-alpha'\n    }, 'A')));\n  };\n\n  return Params;\n}(_react2[\"default\"].Component);\n\nexports[\"default\"] = Params;\nParams.propTypes = {\n  alpha: _propTypes2[\"default\"].number,\n  enableAlpha: _propTypes2[\"default\"].bool,\n  color: _propTypes2[\"default\"].object.isRequired,\n  mode: _propTypes2[\"default\"].oneOf(modesMap),\n  onAlphaChange: _propTypes2[\"default\"].func,\n  onChange: _propTypes2[\"default\"].func,\n  rootPrefixCls: _propTypes2[\"default\"].string\n};\nParams.defaultProps = {\n  mode: modesMap[0],\n  enableAlpha: true\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}