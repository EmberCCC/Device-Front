{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable react-hooks/exhaustive-deps */\n\n\nimport { set, sortedUniqBy } from 'lodash-es';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useSet } from './hooks';\nimport { processData, transformDataWithBind2 } from './processData';\nimport { clone, flattenSchema, generateDataSkeleton, parseAllExpression, schemaContainsExpression } from './utils';\nimport { validateAll } from './validator';\n\nvar useForm = function useForm(props) {\n  var _ref = props || {},\n      _formData = _ref.formData,\n      _onChange = _ref.onChange,\n      _onValidate = _ref.onValidate,\n      _showValidate = _ref.showValidate,\n      _logOnMount = _ref.logOnMount,\n      _logOnSubmit = _ref.logOnSubmit;\n\n  var logOnMount = _logOnMount || window.FR_LOGGER && window.FR_LOGGER.logOnMount;\n  var logOnSubmit = _logOnSubmit || window.FR_LOGGER && window.FR_LOGGER.logOnSubmit;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderCount = _useState2[0],\n      forceRender = _useState2[1];\n\n  var _useSet = useSet({\n    formData: {},\n    submitData: {},\n    errorFields: [],\n    outErrorFields: [],\n    isValidating: false,\n    // 是否在提交状态\n    outsideValidating: false,\n    // 是否开始外部校验，没有外部校验回传的场景，一直是false\n    isSubmitting: false,\n    isEditing: false,\n    // 是否在编辑状态。主要用于优化体验，用户编辑时减少不必要的运算\n    allTouched: false,\n    // 是否所有表单元素都被碰过了（一键开关，用于提交的时候，默认所有都被touch了）\n    touchedKeys: [],\n    // 碰过的key（用于submit之前，判断哪些被碰过了）\n    flatten: {},\n    // schema 的转换结构，便于处理\n    finalFlatten: {},\n    // 表达式等被处理过的flatten，用于渲染\n    firstMount: true\n  }),\n      _useSet2 = _slicedToArray(_useSet, 2),\n      state = _useSet2[0],\n      setState = _useSet2[1];\n\n  var schemaRef = useRef();\n  var beforeFinishRef = useRef();\n  var localeRef = useRef('cn');\n  var removeHiddenDataRef = useRef();\n  var validateMessagesRef = useRef();\n\n  var _data = useRef({}); // 用ref是为了破除闭包的影响\n\n\n  var _flatten = useRef({}); // 用ref是为了破除闭包的影响\n\n\n  var _finalFlatten = useRef({}); // 用ref是为了破除闭包的影响\n\n\n  var _touchedKeys = useRef([]); // 用ref是为了破除闭包的影响\n\n\n  var _errorFields = useRef();\n\n  var _outErrorFields = useRef();\n\n  var _allErrors = useRef([]); // 内部和外部的错误的合并\n\n\n  var innerData = state.formData,\n      submitData = state.submitData,\n      _state$errorFields = state.errorFields,\n      errorFields = _state$errorFields === void 0 ? [] : _state$errorFields,\n      _state$outErrorFields = state.outErrorFields,\n      outErrorFields = _state$outErrorFields === void 0 ? [] : _state$outErrorFields,\n      isValidating = state.isValidating,\n      outsideValidating = state.outsideValidating,\n      isSubmitting = state.isSubmitting,\n      isEditing = state.isEditing,\n      allTouched = state.allTouched,\n      touchedKeys = state.touchedKeys,\n      flatten = state.flatten,\n      finalFlatten = state.finalFlatten,\n      firstMount = state.firstMount;\n  _errorFields.current = errorFields;\n  _outErrorFields.current = outErrorFields;\n  _touchedKeys.current = touchedKeys;\n  _flatten.current = flatten;\n  _finalFlatten.current = finalFlatten;\n  var dataFromOutside = props && props.hasOwnProperty('formData');\n  var formData = dataFromOutside ? _formData : innerData; // 生成一个基础结构，确保对象内的必填元素也被校验\n\n  _data.current = useMemo(function () {\n    if (schemaRef.current) {\n      return generateDataSkeleton(schemaRef.current, formData);\n    }\n\n    return {};\n  }, [JSON.stringify(formData), JSON.stringify(schemaRef.current)]);\n  _allErrors.current = useMemo(function () {\n    if (Array.isArray(_errorFields.current) && Array.isArray(_outErrorFields.current) && _outErrorFields.current.length > 0) {\n      var mergeErrors = [].concat(_toConsumableArray(_errorFields.current), _toConsumableArray(_outErrorFields.current));\n      return sortedUniqBy(mergeErrors, function (item) {\n        return item.name;\n      });\n    } else {\n      return _errorFields.current;\n    }\n  }, [JSON.stringify(_errorFields.current), JSON.stringify(_outErrorFields.current)]);\n  useEffect(function () {\n    if (schemaRef.current && firstMount) {\n      var _flatten2 = flattenSchema(schemaRef.current);\n\n      setState({\n        flatten: _flatten2,\n        firstMount: false\n      });\n    }\n  }, [JSON.stringify(schemaRef.current), firstMount]); // 统一的处理expression\n\n  useEffect(function () {\n    if (firstMount) {\n      return;\n    }\n\n    var newFlatten = clone(_flatten.current);\n    Object.entries(_flatten.current).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          path = _ref3[0],\n          info = _ref3[1];\n\n      if (schemaContainsExpression(info.schema)) {\n        var arrayLikeIndex = path.indexOf(']');\n        var isArrayItem = arrayLikeIndex > -1 && arrayLikeIndex < path.length - 1;\n        var hasRootValue = JSON.stringify(info.schema).indexOf('rootValue') > -1;\n\n        if (isArrayItem && hasRootValue) {// do nothing\n        } else {\n          newFlatten[path].schema = parseAllExpression(info.schema, _data.current, path);\n        }\n      }\n    });\n    setState({\n      finalFlatten: newFlatten\n    });\n  }, [JSON.stringify(_flatten.current), JSON.stringify(_data.current), firstMount]); // All form methods are down here ----------------------------------------------------------------\n  // 两个兼容 0.x 的函数\n\n  var _setData = function _setData(data) {\n    if (typeof _onChange === 'function') {\n      _onChange(data);\n    } else {\n      setState({\n        formData: data\n      });\n    }\n  }; // Allow function to get the old value\n\n\n  var _setErrors = function _setErrors(errors) {\n    if (typeof _onValidate === 'function') {\n      var oldFormatErrors = errors ? errors.map(function (item) {\n        return item.name;\n      }) : [];\n\n      _onValidate(oldFormatErrors);\n    }\n\n    if (typeof errors === 'function') {\n      setState(function (_ref4) {\n        var errorFields = _ref4.errorFields;\n        return {\n          errorFields: errors(errorFields)\n        };\n      });\n    } else {\n      setState({\n        errorFields: errors\n      });\n    }\n  };\n\n  var setFirstMount = function setFirstMount(value) {\n    setState({\n      firstMount: value\n    });\n  };\n\n  var touchKey = function touchKey(key) {\n    if (_touchedKeys.current.indexOf(key) > -1) {\n      return;\n    }\n\n    var newKeyList = [].concat(_toConsumableArray(_touchedKeys.current), [key]);\n    setState({\n      touchedKeys: newKeyList\n    });\n  };\n\n  var removeTouched = function removeTouched(key) {\n    var newTouch = _touchedKeys.current.filter(function (item) {\n      return item.indexOf(key) === -1;\n    });\n\n    setState({\n      touchedKeys: newTouch\n    });\n  };\n\n  var changeTouchedKeys = function changeTouchedKeys(newTouchedKeys) {\n    setState({\n      touchedKeys: newTouchedKeys\n    });\n  };\n\n  var setEditing = function setEditing(isEditing) {\n    setState({\n      isEditing: isEditing\n    });\n  };\n\n  var onItemChange = function onItemChange(path, value) {\n    if (typeof path !== 'string') return;\n\n    if (path === '#') {\n      _setData(_objectSpread({}, value));\n\n      return;\n    }\n\n    set(_data.current, path, value);\n\n    _setData(_objectSpread({}, _data.current));\n  }; // errorFields: [\n  //   { name: 'a.b.c', errors: ['Please input your Password!', 'something else is wrong'] },\n  // ]\n\n\n  var syncStuff = function syncStuff(_ref5) {\n    var schema = _ref5.schema,\n        locale = _ref5.locale,\n        validateMessages = _ref5.validateMessages,\n        beforeFinish = _ref5.beforeFinish,\n        removeHiddenData = _ref5.removeHiddenData;\n    schemaRef.current = schema;\n    localeRef.current = locale;\n    validateMessagesRef.current = validateMessages;\n    beforeFinishRef.current = beforeFinish;\n    removeHiddenDataRef.current = removeHiddenData;\n    forceRender(renderCount + 1);\n  };\n\n  var setSchema = function setSchema(settings) {\n    var newFlatten = clone(_flatten.current);\n\n    try {\n      Object.keys(settings).forEach(function (path) {\n        if (!_flatten.current[path]) {\n          console.error(\"path\\uFF1A'\".concat(path, \"' \\u4E0D\\u5B58\\u5728(form.setSchemaByPath)\"));\n        } else {\n          var newSchema = settings[path];\n\n          var _newSchema = typeof newSchema === 'function' ? newSchema(newFlatten[path].schema) : newSchema;\n\n          newFlatten[path].schema = _objectSpread(_objectSpread({}, newFlatten[path].schema), _newSchema);\n        }\n      });\n      setState({\n        flatten: newFlatten\n      });\n      _flatten.current = newFlatten;\n    } catch (error) {\n      console.error(error, 'setSchema');\n    }\n  };\n\n  var setSchemaByPath = function setSchemaByPath(path, newSchema) {\n    if (!_flatten.current[path]) {\n      console.error(\"path\\uFF1A'\".concat(path, \"' \\u4E0D\\u5B58\\u5728(form.setSchemaByPath)\"));\n      return;\n    }\n\n    var newFlatten = clone(_flatten.current);\n\n    try {\n      var _newSchema = typeof newSchema === 'function' ? newSchema(newFlatten[path].schema) : newSchema;\n\n      newFlatten[path].schema = _objectSpread(_objectSpread({}, newFlatten[path].schema), _newSchema);\n      setState({\n        flatten: newFlatten\n      });\n      _flatten.current = newFlatten;\n    } catch (error) {\n      console.error(error, 'setSchemaByPath');\n    }\n  };\n\n  var getSchemaByPath = function getSchemaByPath(path) {\n    try {\n      return _flatten.current[path].schema;\n    } catch (error) {\n      console.log(error, 'getSchemaByPath');\n      return {};\n    }\n  }; // TODO: better implementation needed\n\n\n  var setErrorFields = function setErrorFields(error) {\n    var newErrorFields = [];\n\n    if (Array.isArray(error)) {\n      newErrorFields = [].concat(_toConsumableArray(error), _toConsumableArray(_outErrorFields.current));\n    } else if (error && error.name) {\n      newErrorFields = [error].concat(_toConsumableArray(_outErrorFields.current));\n    } else {\n      console.log('error format is wrong');\n    }\n\n    newErrorFields = sortedUniqBy(newErrorFields, function (item) {\n      return item.name;\n    });\n    setState({\n      outErrorFields: newErrorFields\n    });\n  };\n\n  var removeErrorField = function removeErrorField(path) {\n    var newError = _errorFields.current.filter(function (item) {\n      return item.name.indexOf(path) === -1;\n    });\n\n    var newOutError = _outErrorFields.current.filter(function (item) {\n      return item.name.indexOf(path) === -1;\n    });\n\n    setState({\n      errorFields: newError,\n      outErrorFields: newOutError\n    });\n  };\n\n  var getValues = function getValues() {\n    return processData(_data.current, _finalFlatten.current, removeHiddenDataRef.current);\n  };\n\n  var setValues = function setValues(newFormData) {\n    var newData = transformDataWithBind2(newFormData, _flatten.current);\n\n    _setData(newData);\n  };\n\n  var submit = function submit() {\n    setState({\n      isValidating: true,\n      allTouched: true,\n      isSubmitting: false\n    }); //  https://formik.org/docs/guides/form-submission\n\n    return validateAll({\n      formData: _data.current,\n      flatten: _finalFlatten.current,\n      options: {\n        locale: localeRef.current,\n        validateMessages: validateMessagesRef.current\n      }\n    }).then(function (errors) {\n      setState({\n        errorFields: errors\n      });\n\n      var _errors = sortedUniqBy([].concat(_toConsumableArray(errors || []), _toConsumableArray(_outErrorFields.current)), function (item) {\n        return item.name;\n      });\n\n      if (typeof beforeFinishRef.current === 'function') {\n        return Promise.resolve(processData(_data.current, _finalFlatten.current, removeHiddenDataRef.current)).then(function (res) {\n          setState({\n            isValidating: true,\n            isSubmitting: false,\n            outsideValidating: true,\n            submitData: res\n          });\n          return {\n            data: res,\n            errors: _errors\n          };\n        });\n      }\n\n      return Promise.resolve(processData(_data.current, _finalFlatten.current, removeHiddenDataRef.current)).then(function (res) {\n        setState({\n          isValidating: false,\n          isSubmitting: true,\n          submitData: res\n        });\n        return {\n          data: res,\n          errors: _errors\n        };\n      });\n    }).catch(function (err) {\n      // 不应该走到这边的\n      console.log('submit error:', err);\n      return err;\n    });\n  };\n\n  var resetFields = function resetFields(options) {\n    setState({\n      formData: (options === null || options === void 0 ? void 0 : options.formData) || {},\n      submitData: (options === null || options === void 0 ? void 0 : options.submitData) || {},\n      errorFields: (options === null || options === void 0 ? void 0 : options.errorFields) || [],\n      touchedKeys: (options === null || options === void 0 ? void 0 : options.touchedKeys) || [],\n      allTouched: (options === null || options === void 0 ? void 0 : options.allTouched) || false\n    });\n  };\n\n  var endValidating = function endValidating() {\n    return setState({\n      isValidating: false,\n      outsideValidating: false,\n      isSubmitting: true\n    });\n  };\n\n  var endSubmitting = function endSubmitting() {\n    return setState({\n      isSubmitting: false,\n      isValidating: false,\n      outsideValidating: false\n    });\n  };\n\n  var form = {\n    // state\n    formData: _data.current,\n    schema: schemaRef.current,\n    flatten: finalFlatten,\n    touchedKeys: _touchedKeys.current,\n    allTouched: allTouched,\n    // methods\n    touchKey: touchKey,\n    removeTouched: removeTouched,\n    changeTouchedKeys: changeTouchedKeys,\n    onItemChange: onItemChange,\n    setValueByPath: onItemChange,\n    // 单个\n    getSchemaByPath: getSchemaByPath,\n    setSchemaByPath: setSchemaByPath,\n    setSchema: setSchema,\n    setValues: setValues,\n    getValues: getValues,\n    resetFields: resetFields,\n    submit: submit,\n    init: submit,\n    // 简版的迁移方案里用，正常用不到，换个名字迁移的时候大家更好接受点\n    submitData: submitData,\n    errorFields: _allErrors.current,\n    isValidating: isValidating,\n    outsideValidating: outsideValidating,\n    isSubmitting: isSubmitting,\n    endValidating: endValidating,\n    endSubmitting: endSubmitting,\n    setErrorFields: setErrorFields,\n    removeErrorField: removeErrorField,\n    isEditing: isEditing,\n    setEditing: setEditing,\n    syncStuff: syncStuff,\n    showValidate: _showValidate,\n    // firstMount,\n    setFirstMount: setFirstMount,\n    // logs\n    logOnMount: logOnMount,\n    logOnSubmit: logOnSubmit,\n    // inner api, DON'T USE\n    _setErrors: _setErrors\n  };\n  return form;\n};\n\nexport default useForm;","map":null,"metadata":{},"sourceType":"module"}