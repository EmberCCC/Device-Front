{"ast":null,"code":"import _classCallCheck from \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/shoen/Desktop/\\u8BBE\\u5907\\u8FD0\\u7EF4\\u524D\\u7AEF/bl-device-manage/src/layouts/ZDeviceMonitor/PieCharts.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Coord, Label, Legend } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\n\nvar Donut = /*#__PURE__*/function (_React$Component) {\n  _inherits(Donut, _React$Component);\n\n  var _super = _createSuper(Donut);\n\n  function Donut() {\n    _classCallCheck(this, Donut);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Donut, [{\n    key: \"render\",\n    value: function render() {\n      var DataView = DataSet.DataView;\n      var data = this.props.data;\n      var dv = new DataView();\n      dv.source(data).transform({\n        type: \"percent\",\n        field: \"count\",\n        dimension: \"item\",\n        as: \"percent\"\n      });\n      var cols = {\n        percent: {\n          formatter: function formatter(val) {\n            val = parseFloat(val * 100).toFixed(2) + \"%\";\n            return val;\n          }\n        }\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        height: 200,\n        data: dv,\n        scale: cols,\n        padding: \"auto\",\n        forceFit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Coord, {\n        type: \"theta\",\n        radius: 0.75,\n        innerRadius: 0.6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Axis, {\n        name: \"percent\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        showTitle: false,\n        itemTpl: \"<li><span style=\\\"background-color:{color};\\\" class=\\\"g2-tooltip-marker\\\"></span>{name}: {value}</li>\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Geom, {\n        type: \"intervalStack\",\n        position: \"percent\",\n        color: [\"item\", ['#6236FF', '#997CFF', '#32C5FF', '#89DEFF', '#FF2A8E', '#FF2A8E4d']],\n        tooltip: [\"item*percent\", function (item, percent) {\n          percent = percent * 100 + \"%\";\n          return {\n            name: item,\n            value: percent\n          };\n        }],\n        style: {\n          lineWidth: 1,\n          stroke: \"#fff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        content: \"percent\",\n        formatter: function formatter(val, item) {\n          return item.point.item + \": \" + val;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return Donut;\n}(React.Component);\n\nexport default Donut;","map":{"version":3,"sources":["/Users/shoen/Desktop/设备运维前端/bl-device-manage/src/layouts/ZDeviceMonitor/PieCharts.js"],"names":["React","Chart","Geom","Axis","Tooltip","Coord","Label","Legend","DataSet","Donut","DataView","data","props","dv","source","transform","type","field","dimension","as","cols","percent","formatter","val","parseFloat","toFixed","item","name","value","lineWidth","stroke","point","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Chart,\n  Geom,\n  Axis,\n  Tooltip,\n  Coord,\n  Label,\n  Legend,\n} from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\n\nclass Donut extends React.Component {\n  render() {\n    const { DataView } = DataSet;\n    const data = this.props.data;\n    const dv = new DataView();\n    dv.source(data).transform({\n      type: \"percent\",\n      field: \"count\",\n      dimension: \"item\",\n      as: \"percent\"\n    });\n    const cols = {\n      percent: {\n        formatter: val => {\n          val = parseFloat(val* 100).toFixed(2) + \"%\";\n          return val;\n        }\n      }\n    };\n    return (\n      <div>\n        <Chart\n          height={200}\n          data={dv}\n          scale={cols}\n          padding='auto'\n          forceFit\n        >\n          <Coord type={\"theta\"} radius={0.75} innerRadius={0.6} />\n          <Axis name=\"percent\" />\n          \n          <Tooltip\n            showTitle={false}\n            itemTpl=\"<li><span style=&quot;background-color:{color};&quot; class=&quot;g2-tooltip-marker&quot;></span>{name}: {value}</li>\"\n          />\n          <Geom\n            type=\"intervalStack\"\n            position=\"percent\"\n            color={[\"item\",['#6236FF','#997CFF','#32C5FF','#89DEFF','#FF2A8E','#FF2A8E4d']]}\n            tooltip={[\n              \"item*percent\",\n              (item, percent) => {\n                percent = percent * 100 + \"%\";\n                return {\n                  name: item,\n                  value: percent\n                };\n              }\n            ]}\n            style={{\n              lineWidth: 1,\n              stroke: \"#fff\"\n            }}\n          >\n            <Label\n              content=\"percent\"\n              formatter={(val, item) => {\n                return item.point.item + \": \" + val;\n              }}\n            />\n          </Geom>\n        </Chart>\n      </div>\n    );\n  }\n}\nexport default Donut \n"]},"metadata":{},"sourceType":"module"}