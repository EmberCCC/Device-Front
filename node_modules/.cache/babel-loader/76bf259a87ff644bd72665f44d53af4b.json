{"ast":null,"code":"import \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport React from 'react';\nimport { useStore2 } from '../../hooks';\nimport { isCheckBoxType } from '../../utils';\n\nvar Description = function Description(_ref) {\n  var displayType = _ref.displayType,\n      schema = _ref.schema;\n  var description = schema.description,\n      descType = schema.descType;\n  if (!description) return null;\n\n  switch (displayType) {\n    case 'row':\n      return /*#__PURE__*/React.createElement(_Tooltip, {\n        title: description\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fr-tooltip-icon\"\n      }));\n\n    case 'inline':\n      return null;\n\n    default:\n      if (descType === 'icon') {\n        return /*#__PURE__*/React.createElement(_Tooltip, {\n          title: description\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"fr-tooltip-icon\"\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fr-desc ml2\"\n      }, \"( \".concat(description, \" )\"));\n  }\n};\n\nvar Title = function Title(_ref2) {\n  var labelClass = _ref2.labelClass,\n      labelStyle = _ref2.labelStyle,\n      schema = _ref2.schema,\n      displayType = _ref2.displayType,\n      renderTitle = _ref2.renderTitle,\n      globalRequiredMark = _ref2.requiredMark;\n\n  var _useStore = useStore2(),\n      globalDisplayType = _useStore.displayType,\n      readOnly = _useStore.readOnly,\n      colon = _useStore.colon;\n\n  var title = schema.title,\n      required = schema.required,\n      type = schema.type,\n      schemaRequiredMark = schema.requiredMark;\n  var isObjType = type === 'object';\n\n  var _displayType = schema.displayType || displayType || globalDisplayType || 'column';\n\n  if (renderTitle) {\n    return renderTitle({\n      labelClass: labelClass,\n      labelStyle: labelStyle,\n      schema: schema,\n      displayType: _displayType,\n      readOnly: readOnly,\n      colon: colon\n    });\n  }\n\n  var requiredMark = typeof schemaRequiredMark === 'undefined' ? globalRequiredMark : schemaRequiredMark; // 左侧的的 * 号提示\n\n  var TitleRequiredMark = null; // 左侧的 option 提示\n\n  var TitleTextMark = null;\n\n  if (required) {\n    /**\n     * ant-design requiredMark 实现\n     * https://ant.design/components/form-cn/\n     */\n    if (requiredMark !== false && requiredMark !== 'optional') {\n      TitleRequiredMark = /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fr-label-required\"\n      }, \" *\");\n      TitleTextMark = null;\n    }\n  } else {\n    if (requiredMark === 'optional') {\n      TitleRequiredMark = null;\n      TitleTextMark = /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fr-label-required-text\"\n      }, \"\\uFF08\\u53EF\\u9009\\uFF09\");\n    }\n  } // requiredMark 为 false 不展示必填符号\n\n\n  if (requiredMark === false) {\n    TitleRequiredMark = null;\n    TitleTextMark = null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: labelClass,\n    style: labelStyle\n  }, title ? /*#__PURE__*/React.createElement(\"label\", {\n    className: \"fr-label-title \".concat(isCheckBoxType(schema, readOnly) || _displayType === 'column' || !colon ? 'no-colon' : '') // checkbox不带冒号\n    ,\n    title: title\n  }, TitleRequiredMark, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(isObjType ? 'b' : '', \" \").concat(_displayType === 'column' ? 'flex-none' : '')\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: title\n    }\n  })), TitleTextMark, /*#__PURE__*/React.createElement(Description, {\n    schema: schema,\n    displayType: _displayType\n  })) : null);\n};\n\nexport default Title;","map":null,"metadata":{},"sourceType":"module"}