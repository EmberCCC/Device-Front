{"ast":null,"code":"import \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport _objectSpread from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\documents\\\\bl-device-manage-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nvar _jsxFileName = \"F:\\\\documents\\\\bl-device-manage-test\\\\src\\\\layouts\\\\FlowManage\\\\index.js\";\nimport React, { useState, useRef, useCallback, useMemo, useEffect } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, MiniMap, MarkerType } from 'react-flow-renderer';\nimport * as services from '../../services/design';\nimport Sidebar from './Sidebar';\nimport FlowNode from './Node/FlowNode';\nimport CopyNode from './Node/CopyNode';\nimport EndNode from './Node/EndNode';\nimport './index.css';\nimport { isDataExist } from 'utils/dataTools';\nimport { observable } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nvar Header = _Layout.Header,\n    Sider = _Layout.Sider,\n    Content = _Layout.Content;\nvar Option = _Select.Option;\nvar initialNodes = [{\n  \"id\": \"0\",\n  \"type\": \"input\",\n  \"data\": {\n    \"label\": \"开始流程\",\n    'person': []\n  },\n  \"position\": {\n    \"x\": 254,\n    \"y\": -76\n  },\n  \"positionAbsolute\": {\n    \"x\": 254,\n    \"y\": -76\n  }\n}, {\n  \"id\": \"-1\",\n  \"type\": \"end\",\n  \"data\": {\n    \"label\": \"结束流程\",\n    'person': []\n  },\n  \"position\": {\n    \"x\": 198,\n    \"y\": 112\n  },\n  \"positionAbsolute\": {\n    \"x\": 198,\n    \"y\": 112\n  }\n}, {\n  \"id\": \"node_1\",\n  \"type\": \"FlowNode\",\n  \"position\": {\n    \"x\": 236.25,\n    \"y\": 32.5\n  },\n  \"data\": {\n    \"label\": \"FlowNode node\",\n    'person': []\n  },\n  \"positionAbsolute\": {\n    \"x\": 236.25,\n    \"y\": 32.5\n  }\n}];\nvar initialEdges = [{\n  \"source\": \"0\",\n  \"sourceHandle\": null,\n  \"target\": \"node_1\",\n  \"targetHandle\": \"top\",\n  \"markerEnd\": {\n    \"type\": \"arrow\"\n  },\n  \"id\": \"reactflow__edge-0-node_1top\"\n}, {\n  \"source\": \"node_1\",\n  \"sourceHandle\": \"bottom\",\n  \"target\": \"-1\",\n  \"targetHandle\": null,\n  \"markerEnd\": {\n    \"type\": \"arrow\"\n  },\n  \"id\": \"reactflow__edge-node_1bottom--1\"\n}];\nvar nodeTypes = {\n  FlowNode: FlowNode,\n  CopyNode: CopyNode,\n  end: EndNode\n};\nvar id = 0;\n\nvar getId = function getId() {\n  return \"node_\".concat(++id);\n};\n\nvar store = observable({}); // function DnDFlow(props) {\n//   const reactFlowWrapper = useRef(null);\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [perArr, setPerArr] = useState([]);\n//   const [reactFlowInstance, setReactFlowInstance] = useState(null);\n//   const [nodeName, setNodeName] = useState('');\n//   const [nodeId, setNodeId] = useState('');\n//   const [person,setPerson] = useState({});\n//   const children = [];\n//   const field = [];\n//   let fieldProp = {};\n//   // Object.keys(person).map((item) => {\n//   //   if (personList[item] != undefined) {\n//   //     children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\n//   //   }\n//   // })\n//   // for (let i = 10; i < 36; i++) {\n//   //   children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n//   // }\n//   field.map((item) => {\n//     fieldProp[item.propertyId] = []\n//   })\n//   useEffect(() => {\n//     let personList = Object.assign({},props.location.state.PersonListT)\n//     console.log(personList);\n//     setPerson(personList);\n//     console.log(person);\n//     Object.keys(personList).map((item) => {\n//       if (personList[item] != undefined) {\n//         children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\n//       }\n//     })\n//     console.log(children);\n//   },[])\n//   useEffect(() => { \n//     setNodes((nds) =>\n//       nds.map((node) => {\n//         if (node.id === nodeId) {\n//           // it's important that you create a new object here\n//           // in order to notify react flow about the change\n//           node.data = {\n//             ...node.data,\n//             label: nodeName,\n//             person: perArr\n//           };\n//         }\n//         return node;\n//       })\n//     );\n//   }, [nodeName, setNodeName, perArr, setPerArr]);\n//   const onConnect = useCallback((params) => {\n//     let obj = {\n//       type: MarkerType.Arrow,\n//     }\n//     params.markerEnd = obj\n//     setEdges((eds) => addEdge(params, eds))\n//   }, []);\n//   const onDragOver = useCallback((event) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n//   const onDrop = useCallback(\n//     (event) => {\n//       event.preventDefault();\n//       const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       // check if the dropped element is valid\n//       if (typeof type === 'undefined' || !type) {\n//         return;\n//       }\n//       const position = reactFlowInstance.project({\n//         x: event.clientX - reactFlowBounds.left,\n//         y: event.clientY - reactFlowBounds.top,\n//       });\n//       const newNode = {\n//         id: getId(),\n//         type,\n//         position,\n//         data: { label: `${type} node` },\n//       };\n//       setNodes((nds) => nds.concat(newNode));\n//     },\n//     [reactFlowInstance]\n//   );\n//   const onSave = useCallback(() => {\n//     if (reactFlowInstance) {\n//       const flow = reactFlowInstance.toObject();\n//       // personList = Object.assign({},props.location.state.PersonListT)\n//       let params = {}\n//       params.firstFormId = 1;\n//       params.edges = flow.edges\n//       params.nodes = []\n//       flow.nodes.map((item) => {\n//         let obj = {}\n//         obj.id = item.id\n//         obj.type = item.type\n//         obj.position = item.position\n//         obj.positionAbsolute = item.positionAbsolute\n//         console.log(item.data.person);\n//         if (item.data.person != undefined && item.data.person.length != 0) {\n//           console.log(Number(item.data.person));\n//           // console.log(personList);\n//           let person = person[Number(item.data.person) - 1]\n//           console.log(person);\n//           item.data.principal = person['username'];\n//           item.data.userId = person['id'];\n//         }\n//         obj.data = item.data\n//         params.nodes.push(obj)\n//       })\n//       console.log(params);\n//       // try {\n//       //   let res = services.putRequest(services.requestList.addFlow, params);\n//       //   if (isDataExist(res)) {\n//       //     return res;\n//       //   }\n//       // } catch (error) {\n//       //   console.log(error);\n//       // }\n//     }\n//   }, [reactFlowInstance]);\n//   const onNodeClick = useCallback((event, node) => {\n//     setNodeId(node.id)\n//     setPerArr(node.data.person)\n//     setNodeName(node.data.label)\n//   }, [nodeName], [nodeId])\n//   const handleChange = (value) => {\n//     setPerArr(value);\n//     console.log(`selected ${value}`);\n//   }\n//   function checkChange(checkedValues,a) {\n//     fieldProp[a] = checkedValues\n//   }\n//   return (\n//     <Layout>\n//       <Header className='header'>\n//         <Button type=\"primary\" className='save' onClick={onSave}>保存</Button>\n//       </Header>\n//       <Layout>\n//         <Content>\n//           <Layout>\n//             <Header className='title'>\n//               <Sidebar />\n//             </Header>\n//             <Content>\n//               <div className=\"dndflow\">\n//                 <ReactFlowProvider>\n//                   <Content>\n//                     <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n//                       <ReactFlow\n//                         nodes={nodes}\n//                         edges={edges}\n//                         onNodesChange={onNodesChange}\n//                         onEdgesChange={onEdgesChange}\n//                         onConnect={onConnect}\n//                         onInit={setReactFlowInstance}\n//                         onDrop={onDrop}\n//                         onDragOver={onDragOver}\n//                         nodeTypes={nodeTypes}\n//                         onNodeClick={onNodeClick}\n//                         fitView\n//                       >\n//                         <Controls />\n//                         <MiniMap />\n//                       </ReactFlow>\n//                     </div>\n//                   </Content>\n//                 </ReactFlowProvider>\n//               </div>\n//             </Content>\n//           </Layout>\n//         </Content>\n//         <Sider style={{ backgroundColor: 'white' }} width='300'>\n//           <div className=\"updatenode__controls\">\n//             <div>\n//               <label>节点名:</label>\n//               <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\n//             </div>\n//             <div>\n//               <label>负责人：</label>\n//               <Select\n//                 // mode=\"multiple\"\n//                 allowClear\n//                 style={{ width: '80%', marginTop: '10px' }}\n//                 placeholder=\"Please select\"\n//                 value={perArr}\n//                 onChange={handleChange}\n//               >\n//                 {children}\n//               </Select>\n//             </div>\n//             {\n//               field.map((item) => {\n//                 return <div className='dataInfo'>\n//                   <label>{item.name}:</label>\n//                   <Checkbox.Group name={item.propertyId} options={[{ label: '可见', value: 'vis' }, { label: '可编辑', value: 'edit' }]} onChange={(checkedValues) => checkChange(checkedValues,item.propertyId)}></Checkbox.Group>\n//                 </div>\n//               })\n//             }\n//           </div>\n//         </Sider>\n//       </Layout>\n//     </Layout>\n//   );\n// };\n\nvar DnDFlow = function DnDFlow(_ref) {\n  var DesignStore = _ref.DesignStore;\n  var reactFlowWrapper = useRef(null);\n\n  var _useNodesState = useNodesState(initialNodes),\n      _useNodesState2 = _slicedToArray(_useNodesState, 3),\n      nodes = _useNodesState2[0],\n      setNodes = _useNodesState2[1],\n      onNodesChange = _useNodesState2[2];\n\n  var _useEdgesState = useEdgesState(initialEdges),\n      _useEdgesState2 = _slicedToArray(_useEdgesState, 3),\n      edges = _useEdgesState2[0],\n      setEdges = _useEdgesState2[1],\n      onEdgesChange = _useEdgesState2[2];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      perArr = _useState2[0],\n      setPerArr = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      reactFlowInstance = _useState4[0],\n      setReactFlowInstance = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nodeName = _useState6[0],\n      setNodeName = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      nodeId = _useState8[0],\n      setNodeId = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      person = _useState10[0],\n      setPerson = _useState10[1];\n\n  var children = [];\n  var field = [];\n  var fieldProp = {}; // Object.keys(person).map((item) => {\n  //   if (personList[item] != undefined) {\n  //     children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\n  //   }\n  // })\n  // for (let i = 10; i < 36; i++) {\n  //   children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n  // }\n\n  field.map(function (item) {\n    fieldProp[item.propertyId] = [];\n  }); // useEffect(() => {\n  //   let personList = Object.assign({},props.location.state.PersonListT)\n  //   console.log(personList);\n  //   setPerson(personList);\n  //   console.log(person);\n  //   Object.keys(personList).map((item) => {\n  //     if (personList[item] != undefined) {\n  //       children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\n  //     }\n  //   })\n  //   console.log(children);\n  // },[])\n\n  useEffect(function () {\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === nodeId) {\n          // it's important that you create a new object here\n          // in order to notify react flow about the change\n          node.data = _objectSpread({}, node.data, {\n            label: nodeName,\n            person: perArr\n          });\n        }\n\n        return node;\n      });\n    });\n  }, [nodeName, setNodeName, perArr, setPerArr]);\n  var onConnect = useCallback(function (params) {\n    var obj = {\n      type: MarkerType.Arrow\n    };\n    params.markerEnd = obj;\n    setEdges(function (eds) {\n      return addEdge(params, eds);\n    });\n  }, []);\n  var onDragOver = useCallback(function (event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  var onDrop = useCallback(function (event) {\n    event.preventDefault();\n    var reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    var type = event.dataTransfer.getData('application/reactflow'); // check if the dropped element is valid\n\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n\n    var position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    var newNode = {\n      id: getId(),\n      type: type,\n      position: position,\n      data: {\n        label: \"\".concat(type, \" node\")\n      }\n    };\n    setNodes(function (nds) {\n      return nds.concat(newNode);\n    });\n  }, [reactFlowInstance]);\n  var onSave = useCallback(function () {\n    if (reactFlowInstance) {\n      var flow = reactFlowInstance.toObject(); // personList = Object.assign({},props.location.state.PersonListT)\n\n      var params = {};\n      params.firstFormId = 1;\n      params.edges = flow.edges;\n      params.nodes = [];\n      flow.nodes.map(function (item) {\n        var obj = {};\n        obj.id = item.id;\n        obj.type = item.type;\n        obj.position = item.position;\n        obj.positionAbsolute = item.positionAbsolute;\n        console.log(item.data.person);\n\n        if (item.data.person != undefined && item.data.person.length != 0) {\n          console.log(Number(item.data.person)); // console.log(personList);\n\n          var _person = _person[Number(item.data.person) - 1];\n\n          console.log(_person);\n          item.data.principal = _person['username'];\n          item.data.userId = _person['id'];\n        }\n\n        obj.data = item.data;\n        params.nodes.push(obj);\n      });\n      console.log(params); // try {\n      //   let res = services.putRequest(services.requestList.addFlow, params);\n      //   if (isDataExist(res)) {\n      //     return res;\n      //   }\n      // } catch (error) {\n      //   console.log(error);\n      // }\n    }\n  }, [reactFlowInstance]);\n  var onNodeClick = useCallback(function (event, node) {\n    setNodeId(node.id);\n    setPerArr(node.data.person);\n    setNodeName(node.data.label);\n  }, [nodeName], [nodeId]);\n\n  var handleChange = function handleChange(value) {\n    setPerArr(value);\n    console.log(\"selected \".concat(value));\n  };\n\n  function checkChange(checkedValues, a) {\n    fieldProp[a] = checkedValues;\n  }\n\n  return React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472\n    },\n    __self: this\n  }, React.createElement(Header, {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473\n    },\n    __self: this\n  }, React.createElement(_Button, {\n    type: \"primary\",\n    className: \"save\",\n    onClick: onSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474\n    },\n    __self: this\n  }, \"\\u4FDD\\u5B58\")), React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476\n    },\n    __self: this\n  }, React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477\n    },\n    __self: this\n  }, React.createElement(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, React.createElement(Header, {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479\n    },\n    __self: this\n  }, React.createElement(Sidebar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  })), React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dndflow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483\n    },\n    __self: this\n  }, React.createElement(ReactFlowProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484\n    },\n    __self: this\n  }, React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"reactflow-wrapper\",\n    ref: reactFlowWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect,\n    onInit: setReactFlowInstance,\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    nodeTypes: nodeTypes,\n    onNodeClick: onNodeClick,\n    fitView: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }, React.createElement(Controls, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }), React.createElement(MiniMap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501\n    },\n    __self: this\n  }))))))))), React.createElement(Sider, {\n    style: {\n      backgroundColor: 'white'\n    },\n    width: \"300\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"updatenode__controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }, \"\\u8282\\u70B9\\u540D:\"), React.createElement(\"input\", {\n    value: nodeName,\n    onChange: function onChange(evt) {\n      return setNodeName(evt.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517\n    },\n    __self: this\n  }, \"\\u8D1F\\u8D23\\u4EBA\\uFF1A\"), React.createElement(_Select, {\n    // mode=\"multiple\"\n    allowClear: true,\n    style: {\n      width: '80%',\n      marginTop: '10px'\n    },\n    placeholder: \"Please select\",\n    value: perArr,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518\n    },\n    __self: this\n  }, children)), field.map(function (item) {\n    return React.createElement(\"div\", {\n      className: \"dataInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, item.name, \":\"), React.createElement(_Checkbox.Group, {\n      name: item.propertyId,\n      options: [{\n        label: '可见',\n        value: 'vis'\n      }, {\n        label: '可编辑',\n        value: 'edit'\n      }],\n      onChange: function onChange(checkedValues) {\n        return checkChange(checkedValues, item.propertyId);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }));\n  })))));\n};\n\nexport default inject('DesignStore')(observer(DnDFlow));","map":{"version":3,"sources":["F:\\documents\\bl-device-manage-test\\src\\layouts\\FlowManage\\index.js"],"names":["React","useState","useRef","useCallback","useMemo","useEffect","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","MiniMap","MarkerType","services","Sidebar","FlowNode","CopyNode","EndNode","isDataExist","observable","inject","observer","Header","Sider","Content","Option","initialNodes","initialEdges","nodeTypes","end","id","getId","store","DnDFlow","DesignStore","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","perArr","setPerArr","reactFlowInstance","setReactFlowInstance","nodeName","setNodeName","nodeId","setNodeId","person","setPerson","children","field","fieldProp","map","item","propertyId","nds","node","data","label","onConnect","params","obj","type","Arrow","markerEnd","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","position","project","x","clientX","left","y","clientY","top","newNode","concat","onSave","flow","toObject","firstFormId","positionAbsolute","console","log","undefined","length","Number","principal","userId","push","onNodeClick","handleChange","value","checkChange","checkedValues","a","backgroundColor","evt","target","width","marginTop","name"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,EAA+CC,OAA/C,EAAwDC,SAAxD,QAAyE,OAAzE;AAEA,OAAOC,SAAP,IACEC,iBADF,EAEEC,OAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,QALF,EAMEC,OANF,EAOEC,UAPF,QAQO,qBARP;AASA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;IAEQC,M,WAAAA,M;IAAQC,K,WAAAA,K;IAAOC,O,WAAAA,O;IACfC,M,WAAAA,M;AACR,IAAMC,YAAY,GAAG,CACnB;AACE,QAAM,GADR;AAEE,UAAQ,OAFV;AAGE,UAAQ;AACN,aAAS,MADH;AAEN,cAAU;AAFJ,GAHV;AAOE,cAAY;AACV,SAAK,GADK;AAEV,SAAK,CAAC;AAFI,GAPd;AAWE,sBAAoB;AAClB,SAAK,GADa;AAElB,SAAK,CAAC;AAFY;AAXtB,CADmB,EAiBnB;AACE,QAAM,IADR;AAEE,UAAQ,KAFV;AAGE,UAAQ;AACN,aAAS,MADH;AAEN,cAAU;AAFJ,GAHV;AAQE,cAAY;AACV,SAAK,GADK;AAEV,SAAK;AAFK,GARd;AAYE,sBAAoB;AAClB,SAAK,GADa;AAElB,SAAK;AAFa;AAZtB,CAjBmB,EAkCnB;AACE,QAAM,QADR;AAEE,UAAQ,UAFV;AAGE,cAAY;AACV,SAAK,MADK;AAEV,SAAK;AAFK,GAHd;AAOE,UAAQ;AACN,aAAS,eADH;AAEN,cAAU;AAFJ,GAPV;AAWE,sBAAoB;AAClB,SAAK,MADa;AAElB,SAAK;AAFa;AAXtB,CAlCmB,CAArB;AAmDA,IAAMC,YAAY,GAAG,CACnB;AACE,YAAU,GADZ;AAEE,kBAAgB,IAFlB;AAGE,YAAU,QAHZ;AAIE,kBAAgB,KAJlB;AAKE,eAAa;AACX,YAAQ;AADG,GALf;AAQE,QAAM;AARR,CADmB,EAWnB;AACE,YAAU,QADZ;AAEE,kBAAgB,QAFlB;AAGE,YAAU,IAHZ;AAIE,kBAAgB,IAJlB;AAKE,eAAa;AACX,YAAQ;AADG,GALf;AAQE,QAAM;AARR,CAXmB,CAArB;AAsBA,IAAMC,SAAS,GAAG;AAAEb,EAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,EAAAA,QAAQ,EAAEA,QAAhC;AAA0Ca,EAAAA,GAAG,EAACZ;AAA9C,CAAlB;AAEA,IAAIa,EAAE,GAAG,CAAT;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,wBAAc,EAAED,EAAhB;AAAA,CAAd;;AACA,IAAME,KAAK,GAAGb,UAAU,CAAC,EAAD,CAAxc,OAAO,GAAG,SAAVA,OAAU,OAAmB;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;AACjC,MAAMC,gBAAgB,GAAGlC,MAAM,CAAC,IAAD,CAA/B;;AADiC,uBAEQO,aAAa,CAACkB,YAAD,CAFrB;AAAA;AAAA,MAE1BU,KAF0B;AAAA,MAEnBC,QAFmB;AAAA,MAETC,aAFS;;AAAA,uBAGQ7B,aAAa,CAACkB,YAAD,CAHrB;AAAA;AAAA,MAG1BY,KAH0B;AAAA,MAGnBC,QAHmB;AAAA,MAGTC,aAHS;;AAAA,kBAILzC,QAAQ,CAAC,EAAD,CAJH;AAAA;AAAA,MAI1B0C,MAJ0B;AAAA,MAIlBC,SAJkB;;AAAA,mBAKiB3C,QAAQ,CAAC,IAAD,CALzB;AAAA;AAAA,MAK1B4C,iBAL0B;AAAA,MAKPC,oBALO;;AAAA,mBAMD7C,QAAQ,CAAC,EAAD,CANP;AAAA;AAAA,MAM1B8C,QAN0B;AAAA,MAMhBC,WANgB;;AAAA,mBAOL/C,QAAQ,CAAC,EAAD,CAPH;AAAA;AAAA,MAO1BgD,MAP0B;AAAA,MAOlBC,SAPkB;;AAAA,mBAQNjD,QAAQ,CAAC,EAAD,CARF;AAAA;AAAA,MAQ1BkD,MAR0B;AAAA,MAQnBC,SARmB;;AAUjC,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB,CAZiC,CAajC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,EAAAA,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAU;AAClBF,IAAAA,SAAS,CAACE,IAAI,CAACC,UAAN,CAAT,GAA6B,EAA7B;AACD,GAFD,EArBiC,CAwBjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACArD,EAAAA,SAAS,CAAC,YAAM;AACdiC,IAAAA,QAAQ,CAAC,UAACqB,GAAD;AAAA,aACPA,GAAG,CAACH,GAAJ,CAAQ,UAACI,IAAD,EAAU;AAChB,YAAIA,IAAI,CAAC7B,EAAL,KAAYkB,MAAhB,EAAwB;AACtB;AACA;AACAW,UAAAA,IAAI,CAACC,IAAL,qBACKD,IAAI,CAACC,IADV;AAEEC,YAAAA,KAAK,EAAEf,QAFT;AAGEI,YAAAA,MAAM,EAAER;AAHV;AAKD;;AACD,eAAOiB,IAAP;AACD,OAXD,CADO;AAAA,KAAD,CAAR;AAcD,GAfQ,EAeN,CAACb,QAAD,EAAWC,WAAX,EAAwBL,MAAxB,EAAgCC,SAAhC,CAfM,CAAT;AAiBA,MAAMmB,SAAS,GAAG5D,WAAW,CAAC,UAAC6D,MAAD,EAAY;AACxC,QAAIC,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAErD,UAAU,CAACsD;AADT,KAAV;AAGAH,IAAAA,MAAM,CAACI,SAAP,GAAmBH,GAAnB;AACAxB,IAAAA,QAAQ,CAAC,UAAC4B,GAAD;AAAA,aAAS7D,OAAO,CAACwD,MAAD,EAASK,GAAT,CAAhB;AAAA,KAAD,CAAR;AACD,GAN4B,EAM1B,EAN0B,CAA7B;AAQA,MAAMC,UAAU,GAAGnE,WAAW,CAAC,UAACoE,KAAD,EAAW;AACxCA,IAAAA,KAAK,CAACC,cAAN;AACAD,IAAAA,KAAK,CAACE,YAAN,CAAmBC,UAAnB,GAAgC,MAAhC;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKA,MAAMC,MAAM,GAAGxE,WAAW,CACxB,UAACoE,KAAD,EAAW;AACTA,IAAAA,KAAK,CAACC,cAAN;AAEA,QAAMI,eAAe,GAAGxC,gBAAgB,CAACyC,OAAjB,CAAyBC,qBAAzB,EAAxB;AACA,QAAMZ,IAAI,GAAGK,KAAK,CAACE,YAAN,CAAmBM,OAAnB,CAA2B,uBAA3B,CAAb,CAJS,CAMT;;AACA,QAAI,OAAOb,IAAP,KAAgB,WAAhB,IAA+B,CAACA,IAApC,EAA0C;AACxC;AACD;;AAED,QAAMc,QAAQ,GAAGnC,iBAAiB,CAACoC,OAAlB,CAA0B;AACzCC,MAAAA,CAAC,EAAEX,KAAK,CAACY,OAAN,GAAgBP,eAAe,CAACQ,IADM;AAEzCC,MAAAA,CAAC,EAAEd,KAAK,CAACe,OAAN,GAAgBV,eAAe,CAACW;AAFM,KAA1B,CAAjB;AAIA,QAAMC,OAAO,GAAG;AACdzD,MAAAA,EAAE,EAAEC,KAAK,EADK;AAEdkC,MAAAA,IAAI,EAAJA,IAFc;AAGdc,MAAAA,QAAQ,EAARA,QAHc;AAIdnB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,YAAKI,IAAL;AAAP;AAJQ,KAAhB;AAOA5B,IAAAA,QAAQ,CAAC,UAACqB,GAAD;AAAA,aAASA,GAAG,CAAC8B,MAAJ,CAAWD,OAAX,CAAT;AAAA,KAAD,CAAR;AACD,GAxBuB,EAyBxB,CAAC3C,iBAAD,CAzBwB,CAA1B;AA4BA,MAAM6C,MAAM,GAAGvF,WAAW,CAAC,YAAM;AAC/B,QAAI0C,iBAAJ,EAAuB;AACrB,UAAM8C,IAAI,GAAG9C,iBAAiB,CAAC+C,QAAlB,EAAb,CADqB,CAErB;;AACA,UAAI5B,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAAC6B,WAAP,GAAqB,CAArB;AACA7B,MAAAA,MAAM,CAACxB,KAAP,GAAemD,IAAI,CAACnD,KAApB;AACAwB,MAAAA,MAAM,CAAC3B,KAAP,GAAe,EAAf;AACAsD,MAAAA,IAAI,CAACtD,KAAL,CAAWmB,GAAX,CAAe,UAACC,IAAD,EAAU;AACvB,YAAIQ,GAAG,GAAG,EAAV;AACAA,QAAAA,GAAG,CAAClC,EAAJ,GAAS0B,IAAI,CAAC1B,EAAd;AACAkC,QAAAA,GAAG,CAACC,IAAJ,GAAWT,IAAI,CAACS,IAAhB;AACAD,QAAAA,GAAG,CAACe,QAAJ,GAAevB,IAAI,CAACuB,QAApB;AACAf,QAAAA,GAAG,CAAC6B,gBAAJ,GAAuBrC,IAAI,CAACqC,gBAA5B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYvC,IAAI,CAACI,IAAL,CAAUV,MAAtB;;AACA,YAAIM,IAAI,CAACI,IAAL,CAAUV,MAAV,IAAoB8C,SAApB,IAAiCxC,IAAI,CAACI,IAAL,CAAUV,MAAV,CAAiB+C,MAAjB,IAA2B,CAAhE,EAAmE;AACjEH,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAAC1C,IAAI,CAACI,IAAL,CAAUV,MAAX,CAAlB,EADiE,CAEjE;;AACA,cAAIA,OAAM,GAAGA,OAAM,CAACgD,MAAM,CAAC1C,IAAI,CAACI,IAAL,CAAUV,MAAX,CAAN,GAA2B,CAA5B,CAAnB;;AACA4C,UAAAA,OAAO,CAACC,GAAR,CAAY7C,OAAZ;AACAM,UAAAA,IAAI,CAACI,IAAL,CAAUuC,SAAV,GAAsBjD,OAAM,CAAC,UAAD,CAA5B;AACAM,UAAAA,IAAI,CAACI,IAAL,CAAUwC,MAAV,GAAmBlD,OAAM,CAAC,IAAD,CAAzB;AACD;;AACDc,QAAAA,GAAG,CAACJ,IAAJ,GAAWJ,IAAI,CAACI,IAAhB;AACAG,QAAAA,MAAM,CAAC3B,KAAP,CAAaiE,IAAb,CAAkBrC,GAAlB;AACD,OAjBD;AAkBA8B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,MAAZ,EAzBqB,CA0BrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GApCyB,EAoCvB,CAACnB,iBAAD,CApCuB,CAA1B;AAsCA,MAAM0D,WAAW,GAAGpG,WAAW,CAAC,UAACoE,KAAD,EAAQX,IAAR,EAAiB;AAC/CV,IAAAA,SAAS,CAACU,IAAI,CAAC7B,EAAN,CAAT;AACAa,IAAAA,SAAS,CAACgB,IAAI,CAACC,IAAL,CAAUV,MAAX,CAAT;AACAH,IAAAA,WAAW,CAACY,IAAI,CAACC,IAAL,CAAUC,KAAX,CAAX;AACD,GAJ8B,EAI5B,CAACf,QAAD,CAJ4B,EAIhB,CAACE,MAAD,CAJgB,CAA/B;;AAMA,MAAMuD,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B7D,IAAAA,SAAS,CAAC6D,KAAD,CAAT;AACAV,IAAAA,OAAO,CAACC,GAAR,oBAAwBS,KAAxB;AACD,GAHD;;AAKA,WAASC,WAAT,CAAqBC,aAArB,EAAmCC,CAAnC,EAAsC;AACpCrD,IAAAA,SAAS,CAACqD,CAAD,CAAT,GAAeD,aAAf;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,SAAS,EAAC,MAAjC;AAAwC,IAAA,OAAO,EAAEjB,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAmC,IAAA,GAAG,EAAEtD,gBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEC,KADT;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,aAAa,EAAED,aAHjB;AAIE,IAAA,aAAa,EAAEG,aAJjB;AAKE,IAAA,SAAS,EAAEqB,SALb;AAME,IAAA,MAAM,EAAEjB,oBANV;AAOE,IAAA,MAAM,EAAE6B,MAPV;AAQE,IAAA,UAAU,EAAEL,UARd;AASE,IAAA,SAAS,EAAEzC,SATb;AAUE,IAAA,WAAW,EAAE0E,WAVf;AAWE,IAAA,OAAO,MAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAcE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF,CADF,CADF,CADF,CADF,CAJF,CADF,CADF,EAkCE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEM,MAAAA,eAAe,EAAE;AAAnB,KAAd;AAA4C,IAAA,KAAK,EAAC,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAO,IAAA,KAAK,EAAE9D,QAAd;AAAwB,IAAA,QAAQ,EAAE,kBAAC+D,GAAD;AAAA,aAAS9D,WAAW,CAAC8D,GAAG,CAACC,MAAJ,CAAWN,KAAZ,CAApB;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AACE;AACA,IAAA,UAAU,MAFZ;AAGE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,SAAS,EAAE;AAA3B,KAHT;AAIE,IAAA,WAAW,EAAC,eAJd;AAKE,IAAA,KAAK,EAAEtE,MALT;AAME,IAAA,QAAQ,EAAE6D,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGnD,QARH,CAFF,CALF,EAmBIC,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAU;AAClB,WAAO;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQA,IAAI,CAACyD,IAAb,MADK,EAEL,8BAAU,KAAV;AAAgB,MAAA,IAAI,EAAEzD,IAAI,CAACC,UAA3B;AAAuC,MAAA,OAAO,EAAE,CAAC;AAAEI,QAAAA,KAAK,EAAE,IAAT;AAAe2C,QAAAA,KAAK,EAAE;AAAtB,OAAD,EAAgC;AAAE3C,QAAAA,KAAK,EAAE,KAAT;AAAgB2C,QAAAA,KAAK,EAAE;AAAvB,OAAhC,CAAhD;AAAkH,MAAA,QAAQ,EAAE,kBAACE,aAAD;AAAA,eAAmBD,WAAW,CAACC,aAAD,EAAelD,IAAI,CAACC,UAApB,CAA9B;AAAA,OAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,CAAP;AAID,GALD,CAnBJ,CADF,CAlCF,CAJF,CADF;AAyED,CA3ND;;AA4NA,eAAerC,MAAM,CAAC,aAAD,CAAN,CAAsBC,QAAQ,CAACY,OAAD,CAA9B,CAAf","sourcesContent":["import React, { useState, useRef, useCallback, useMemo, useEffect } from 'react';\r\nimport { Layout, Button, Menu, Dropdown, Divider, Select, Checkbox, List } from 'antd';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Controls,\r\n  MiniMap,\r\n  MarkerType\r\n} from 'react-flow-renderer';\r\nimport * as services from '../../services/design';\r\nimport Sidebar from './Sidebar';\r\nimport FlowNode from './Node/FlowNode'\r\nimport CopyNode from './Node/CopyNode'\r\nimport EndNode from './Node/EndNode'\r\n\r\nimport './index.css';\r\nimport { isDataExist } from 'utils/dataTools';\r\nimport { observable } from 'mobx';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\nconst { Option } = Select;\r\nconst initialNodes = [\r\n  {\r\n    \"id\": \"0\",\r\n    \"type\": \"input\",\r\n    \"data\": {\r\n      \"label\": \"开始流程\",\r\n      'person': []\r\n    },\r\n    \"position\": {\r\n      \"x\": 254,\r\n      \"y\": -76\r\n    },\r\n    \"positionAbsolute\": {\r\n      \"x\": 254,\r\n      \"y\": -76\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"-1\",\r\n    \"type\": \"end\",\r\n    \"data\": {\r\n      \"label\": \"结束流程\",\r\n      'person': []\r\n\r\n    },\r\n    \"position\": {\r\n      \"x\": 198,\r\n      \"y\": 112\r\n    },\r\n    \"positionAbsolute\": {\r\n      \"x\": 198,\r\n      \"y\": 112\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"node_1\",\r\n    \"type\": \"FlowNode\",\r\n    \"position\": {\r\n      \"x\": 236.25,\r\n      \"y\": 32.5\r\n    },\r\n    \"data\": {\r\n      \"label\": \"FlowNode node\",\r\n      'person': []\r\n    },\r\n    \"positionAbsolute\": {\r\n      \"x\": 236.25,\r\n      \"y\": 32.5\r\n    }\r\n  }\r\n];\r\nconst initialEdges = [\r\n  {\r\n    \"source\": \"0\",\r\n    \"sourceHandle\": null,\r\n    \"target\": \"node_1\",\r\n    \"targetHandle\": \"top\",\r\n    \"markerEnd\": {\r\n      \"type\": \"arrow\"\r\n    },\r\n    \"id\": \"reactflow__edge-0-node_1top\"\r\n  },\r\n  {\r\n    \"source\": \"node_1\",\r\n    \"sourceHandle\": \"bottom\",\r\n    \"target\": \"-1\",\r\n    \"targetHandle\": null,\r\n    \"markerEnd\": {\r\n      \"type\": \"arrow\"\r\n    },\r\n    \"id\": \"reactflow__edge-node_1bottom--1\"\r\n  }\r\n]\r\nconst nodeTypes = { FlowNode: FlowNode, CopyNode: CopyNode, end:EndNode };\r\n\r\nlet id = 0;\r\nconst getId = () => `node_${++id}`;\r\nconst store = observable({})\r\n\r\n// function DnDFlow(props) {\r\n//   const reactFlowWrapper = useRef(null);\r\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n//   const [perArr, setPerArr] = useState([]);\r\n//   const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n//   const [nodeName, setNodeName] = useState('');\r\n//   const [nodeId, setNodeId] = useState('');\r\n//   const [person,setPerson] = useState({});\r\n\r\n//   const children = [];\r\n//   const field = [];\r\n//   let fieldProp = {};\r\n//   // Object.keys(person).map((item) => {\r\n//   //   if (personList[item] != undefined) {\r\n//   //     children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\r\n//   //   }\r\n//   // })\r\n//   // for (let i = 10; i < 36; i++) {\r\n//   //   children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\r\n//   // }\r\n//   field.map((item) => {\r\n//     fieldProp[item.propertyId] = []\r\n//   })\r\n//   useEffect(() => {\r\n//     let personList = Object.assign({},props.location.state.PersonListT)\r\n//     console.log(personList);\r\n//     setPerson(personList);\r\n//     console.log(person);\r\n//     Object.keys(personList).map((item) => {\r\n//       if (personList[item] != undefined) {\r\n//         children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\r\n//       }\r\n//     })\r\n//     console.log(children);\r\n//   },[])\r\n//   useEffect(() => { \r\n//     setNodes((nds) =>\r\n//       nds.map((node) => {\r\n//         if (node.id === nodeId) {\r\n//           // it's important that you create a new object here\r\n//           // in order to notify react flow about the change\r\n//           node.data = {\r\n//             ...node.data,\r\n//             label: nodeName,\r\n//             person: perArr\r\n//           };\r\n//         }\r\n//         return node;\r\n//       })\r\n//     );\r\n//   }, [nodeName, setNodeName, perArr, setPerArr]);\r\n\r\n//   const onConnect = useCallback((params) => {\r\n//     let obj = {\r\n//       type: MarkerType.Arrow,\r\n//     }\r\n//     params.markerEnd = obj\r\n//     setEdges((eds) => addEdge(params, eds))\r\n//   }, []);\r\n\r\n//   const onDragOver = useCallback((event) => {\r\n//     event.preventDefault();\r\n//     event.dataTransfer.dropEffect = 'move';\r\n//   }, []);\r\n\r\n//   const onDrop = useCallback(\r\n//     (event) => {\r\n//       event.preventDefault();\r\n\r\n//       const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n//       const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n//       // check if the dropped element is valid\r\n//       if (typeof type === 'undefined' || !type) {\r\n//         return;\r\n//       }\r\n\r\n//       const position = reactFlowInstance.project({\r\n//         x: event.clientX - reactFlowBounds.left,\r\n//         y: event.clientY - reactFlowBounds.top,\r\n//       });\r\n//       const newNode = {\r\n//         id: getId(),\r\n//         type,\r\n//         position,\r\n//         data: { label: `${type} node` },\r\n//       };\r\n\r\n//       setNodes((nds) => nds.concat(newNode));\r\n//     },\r\n//     [reactFlowInstance]\r\n//   );\r\n\r\n//   const onSave = useCallback(() => {\r\n//     if (reactFlowInstance) {\r\n//       const flow = reactFlowInstance.toObject();\r\n//       // personList = Object.assign({},props.location.state.PersonListT)\r\n//       let params = {}\r\n//       params.firstFormId = 1;\r\n//       params.edges = flow.edges\r\n//       params.nodes = []\r\n//       flow.nodes.map((item) => {\r\n//         let obj = {}\r\n//         obj.id = item.id\r\n//         obj.type = item.type\r\n//         obj.position = item.position\r\n//         obj.positionAbsolute = item.positionAbsolute\r\n//         console.log(item.data.person);\r\n//         if (item.data.person != undefined && item.data.person.length != 0) {\r\n//           console.log(Number(item.data.person));\r\n//           // console.log(personList);\r\n//           let person = person[Number(item.data.person) - 1]\r\n//           console.log(person);\r\n//           item.data.principal = person['username'];\r\n//           item.data.userId = person['id'];\r\n//         }\r\n//         obj.data = item.data\r\n//         params.nodes.push(obj)\r\n//       })\r\n//       console.log(params);\r\n//       // try {\r\n//       //   let res = services.putRequest(services.requestList.addFlow, params);\r\n//       //   if (isDataExist(res)) {\r\n//       //     return res;\r\n//       //   }\r\n//       // } catch (error) {\r\n//       //   console.log(error);\r\n//       // }\r\n//     }\r\n//   }, [reactFlowInstance]);\r\n\r\n//   const onNodeClick = useCallback((event, node) => {\r\n//     setNodeId(node.id)\r\n//     setPerArr(node.data.person)\r\n//     setNodeName(node.data.label)\r\n//   }, [nodeName], [nodeId])\r\n\r\n//   const handleChange = (value) => {\r\n//     setPerArr(value);\r\n//     console.log(`selected ${value}`);\r\n//   }\r\n\r\n//   function checkChange(checkedValues,a) {\r\n//     fieldProp[a] = checkedValues\r\n//   }\r\n//   return (\r\n//     <Layout>\r\n//       <Header className='header'>\r\n//         <Button type=\"primary\" className='save' onClick={onSave}>保存</Button>\r\n//       </Header>\r\n//       <Layout>\r\n//         <Content>\r\n//           <Layout>\r\n//             <Header className='title'>\r\n//               <Sidebar />\r\n//             </Header>\r\n//             <Content>\r\n//               <div className=\"dndflow\">\r\n//                 <ReactFlowProvider>\r\n//                   <Content>\r\n//                     <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n//                       <ReactFlow\r\n//                         nodes={nodes}\r\n//                         edges={edges}\r\n//                         onNodesChange={onNodesChange}\r\n//                         onEdgesChange={onEdgesChange}\r\n//                         onConnect={onConnect}\r\n//                         onInit={setReactFlowInstance}\r\n//                         onDrop={onDrop}\r\n//                         onDragOver={onDragOver}\r\n//                         nodeTypes={nodeTypes}\r\n//                         onNodeClick={onNodeClick}\r\n//                         fitView\r\n//                       >\r\n//                         <Controls />\r\n//                         <MiniMap />\r\n//                       </ReactFlow>\r\n//                     </div>\r\n//                   </Content>\r\n//                 </ReactFlowProvider>\r\n//               </div>\r\n//             </Content>\r\n//           </Layout>\r\n//         </Content>\r\n//         <Sider style={{ backgroundColor: 'white' }} width='300'>\r\n//           <div className=\"updatenode__controls\">\r\n//             <div>\r\n//               <label>节点名:</label>\r\n//               <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\r\n//             </div>\r\n//             <div>\r\n//               <label>负责人：</label>\r\n//               <Select\r\n//                 // mode=\"multiple\"\r\n//                 allowClear\r\n//                 style={{ width: '80%', marginTop: '10px' }}\r\n//                 placeholder=\"Please select\"\r\n//                 value={perArr}\r\n//                 onChange={handleChange}\r\n//               >\r\n//                 {children}\r\n//               </Select>\r\n//             </div>\r\n//             {\r\n//               field.map((item) => {\r\n//                 return <div className='dataInfo'>\r\n//                   <label>{item.name}:</label>\r\n//                   <Checkbox.Group name={item.propertyId} options={[{ label: '可见', value: 'vis' }, { label: '可编辑', value: 'edit' }]} onChange={(checkedValues) => checkChange(checkedValues,item.propertyId)}></Checkbox.Group>\r\n//                 </div>\r\n//               })\r\n//             }\r\n//           </div>\r\n//         </Sider>\r\n//       </Layout>\r\n\r\n//     </Layout>\r\n\r\n//   );\r\n// };\r\n\r\nconst DnDFlow = ({DesignStore}) => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const [perArr, setPerArr] = useState([]);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [nodeName, setNodeName] = useState('');\r\n  const [nodeId, setNodeId] = useState('');\r\n  const [person,setPerson] = useState({});\r\n\r\n  const children = [];\r\n  const field = [];\r\n  let fieldProp = {};\r\n  // Object.keys(person).map((item) => {\r\n  //   if (personList[item] != undefined) {\r\n  //     children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\r\n  //   }\r\n  // })\r\n  // for (let i = 10; i < 36; i++) {\r\n  //   children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\r\n  // }\r\n  field.map((item) => {\r\n    fieldProp[item.propertyId] = []\r\n  })\r\n  // useEffect(() => {\r\n  //   let personList = Object.assign({},props.location.state.PersonListT)\r\n  //   console.log(personList);\r\n  //   setPerson(personList);\r\n  //   console.log(person);\r\n  //   Object.keys(personList).map((item) => {\r\n  //     if (personList[item] != undefined) {\r\n  //       children.push(<Option key={personList[item].id}>{personList[item].nickName}</Option>)\r\n  //     }\r\n  //   })\r\n  //   console.log(children);\r\n  // },[])\r\n  useEffect(() => { \r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === nodeId) {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          node.data = {\r\n            ...node.data,\r\n            label: nodeName,\r\n            person: perArr\r\n          };\r\n        }\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeName, setNodeName, perArr, setPerArr]);\r\n\r\n  const onConnect = useCallback((params) => {\r\n    let obj = {\r\n      type: MarkerType.Arrow,\r\n    }\r\n    params.markerEnd = obj\r\n    setEdges((eds) => addEdge(params, eds))\r\n  }, []);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      // check if the dropped element is valid\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n\r\n  const onSave = useCallback(() => {\r\n    if (reactFlowInstance) {\r\n      const flow = reactFlowInstance.toObject();\r\n      // personList = Object.assign({},props.location.state.PersonListT)\r\n      let params = {}\r\n      params.firstFormId = 1;\r\n      params.edges = flow.edges\r\n      params.nodes = []\r\n      flow.nodes.map((item) => {\r\n        let obj = {}\r\n        obj.id = item.id\r\n        obj.type = item.type\r\n        obj.position = item.position\r\n        obj.positionAbsolute = item.positionAbsolute\r\n        console.log(item.data.person);\r\n        if (item.data.person != undefined && item.data.person.length != 0) {\r\n          console.log(Number(item.data.person));\r\n          // console.log(personList);\r\n          let person = person[Number(item.data.person) - 1]\r\n          console.log(person);\r\n          item.data.principal = person['username'];\r\n          item.data.userId = person['id'];\r\n        }\r\n        obj.data = item.data\r\n        params.nodes.push(obj)\r\n      })\r\n      console.log(params);\r\n      // try {\r\n      //   let res = services.putRequest(services.requestList.addFlow, params);\r\n      //   if (isDataExist(res)) {\r\n      //     return res;\r\n      //   }\r\n      // } catch (error) {\r\n      //   console.log(error);\r\n      // }\r\n    }\r\n  }, [reactFlowInstance]);\r\n\r\n  const onNodeClick = useCallback((event, node) => {\r\n    setNodeId(node.id)\r\n    setPerArr(node.data.person)\r\n    setNodeName(node.data.label)\r\n  }, [nodeName], [nodeId])\r\n\r\n  const handleChange = (value) => {\r\n    setPerArr(value);\r\n    console.log(`selected ${value}`);\r\n  }\r\n\r\n  function checkChange(checkedValues,a) {\r\n    fieldProp[a] = checkedValues\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Header className='header'>\r\n        <Button type=\"primary\" className='save' onClick={onSave}>保存</Button>\r\n      </Header>\r\n      <Layout>\r\n        <Content>\r\n          <Layout>\r\n            <Header className='title'>\r\n              <Sidebar />\r\n            </Header>\r\n            <Content>\r\n              <div className=\"dndflow\">\r\n                <ReactFlowProvider>\r\n                  <Content>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                      <ReactFlow\r\n                        nodes={nodes}\r\n                        edges={edges}\r\n                        onNodesChange={onNodesChange}\r\n                        onEdgesChange={onEdgesChange}\r\n                        onConnect={onConnect}\r\n                        onInit={setReactFlowInstance}\r\n                        onDrop={onDrop}\r\n                        onDragOver={onDragOver}\r\n                        nodeTypes={nodeTypes}\r\n                        onNodeClick={onNodeClick}\r\n                        fitView\r\n                      >\r\n                        <Controls />\r\n                        <MiniMap />\r\n                      </ReactFlow>\r\n                    </div>\r\n                  </Content>\r\n                </ReactFlowProvider>\r\n              </div>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Sider style={{ backgroundColor: 'white' }} width='300'>\r\n          <div className=\"updatenode__controls\">\r\n            <div>\r\n              <label>节点名:</label>\r\n              <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>负责人：</label>\r\n              <Select\r\n                // mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: '80%', marginTop: '10px' }}\r\n                placeholder=\"Please select\"\r\n                value={perArr}\r\n                onChange={handleChange}\r\n              >\r\n                {children}\r\n              </Select>\r\n            </div>\r\n            {\r\n              field.map((item) => {\r\n                return <div className='dataInfo'>\r\n                  <label>{item.name}:</label>\r\n                  <Checkbox.Group name={item.propertyId} options={[{ label: '可见', value: 'vis' }, { label: '可编辑', value: 'edit' }]} onChange={(checkedValues) => checkChange(checkedValues,item.propertyId)}></Checkbox.Group>\r\n                </div>\r\n              })\r\n            }\r\n          </div>\r\n        </Sider>\r\n      </Layout>\r\n\r\n    </Layout>\r\n\r\n  );\r\n}\r\nexport default inject('DesignStore')(observer(DnDFlow));\r\n"]},"metadata":{},"sourceType":"module"}