{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _objectSpread from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"F:\\\\documents\\\\bl-device-manage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _temp;\n\nimport { observable, action } from 'mobx';\nimport { isDataExist } from 'Utils/dataTools';\nimport * as services from '../services/basic';\n// import { moment } from 'moment';\nvar DeviceMaintain = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function DeviceMaintain() {\n    _classCallCheck(this, DeviceMaintain);\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"deviceList\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"serverList\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"schemaList\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"schemaPage\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"deviceType\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"maintainType\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"planType\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"currentMain\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"editVisible\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"currentMainServer\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"currentMainSchame\", _descriptor12, this);\n  }\n\n  _createClass(DeviceMaintain, [{\n    key: \"getDevice\",\n    value: function () {\n      var _getDevice = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /* 获取所有的设备类型 */\n                this.isLoading = true;\n                _context.prev = 1;\n                _context.next = 4;\n                return services.gets('getSelectType')();\n\n              case 4:\n                res = _context.sent;\n                this.isLoading = false;\n\n                if (isDataExist(res)) {\n                  this.deviceList = res.data.data;\n                  this.deviceType = res.data.data[0].id;\n                }\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      function getDevice() {\n        return _getDevice.apply(this, arguments);\n      }\n\n      return getDevice;\n    }()\n    /* ---------------- 点检库 */\n\n  }, {\n    key: \"getMaintainServer\",\n    value: function () {\n      var _getMaintainServer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var params,\n            res,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                /* 获取列表 */\n                this.isLoading = true;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return services.gets('getMaintainServer')(_objectSpread({\n                  maintainType: this.maintainType\n                }, params));\n\n              case 5:\n                res = _context2.sent;\n                this.isLoading = false;\n\n                if (isDataExist(res)) {\n                  this.serverList = res.data.data;\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.log(_context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 10]]);\n      }));\n\n      function getMaintainServer() {\n        return _getMaintainServer.apply(this, arguments);\n      }\n\n      return getMaintainServer;\n    }()\n  }, {\n    key: \"getMaintainSchema\",\n    value: function () {\n      var _getMaintainSchema = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var params,\n            res,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                params = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n\n                /* 获取列表 */\n                this.isLoading = true;\n                _context3.prev = 2;\n                _context3.next = 5;\n                return services.gets('getMaintainSchema')(_objectSpread({\n                  // typeId: this.deviceType,\n                  pageIndex: 1,\n                  pageSize: 10,\n                  maintainType: this.maintainType\n                }, params));\n\n              case 5:\n                res = _context3.sent;\n                this.isLoading = false;\n\n                if (isDataExist(res)) {\n                  this.schemaList = res.data.data.items;\n                  this.schemaPage = res.data.data.pageInfo;\n                }\n\n                _context3.next = 13;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](2);\n                console.log(_context3.t0);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 10]]);\n      }));\n\n      function getMaintainSchema() {\n        return _getMaintainSchema.apply(this, arguments);\n      }\n\n      return getMaintainSchema;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(params, type) {\n        var req, data, res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                req = type === 'server' ? 'saveServer' : 'saveSchema';\n                data = _objectSpread({}, params, {\n                  typeId: this.deviceType // console.log(this.status,data);\n\n                });\n                _context4.next = 5;\n                return services.posts(req)(data);\n\n              case 5:\n                res = _context4.sent;\n\n                if (isDataExist(res)) {\n                  _message.success('保存成功');\n                }\n\n                _context4.next = 12;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 12:\n                type === 'server' ? this.getMaintainServer() : this.getMaintainSchema({\n                  typeId: this.deviceType\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 9]]);\n      }));\n\n      function save(_x, _x2) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(params, type) {\n        var req, res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                req = type === 'server' ? 'deleteServer' : 'deleteSchema';\n                _context5.next = 4;\n                return services.posts(req)(params);\n\n              case 4:\n                res = _context5.sent;\n\n                if (isDataExist(res)) {\n                  _message.success('保存成功');\n                }\n\n                _context5.next = 11;\n                break;\n\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.log(_context5.t0);\n\n              case 11:\n                type === 'server' ? this.getMaintainServer() : this.getMaintainSchema();\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 8]]);\n      }));\n\n      function _delete(_x3, _x4) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"getInfo\",\n    value: function () {\n      var _getInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(params, type) {\n        var req, res;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                req = type === 'server' ? 'getServerInfo' : 'getSchemaInfo';\n                _context6.next = 4;\n                return services.gets(req)(params);\n\n              case 4:\n                res = _context6.sent;\n\n                if (isDataExist(res)) {\n                  if (type === 'server') {\n                    this.currentMainServer = res.data.data;\n                  } else {\n                    this.currentMainSchame = res.data.data;\n                  }\n                }\n\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 8]]);\n      }));\n\n      function getInfo(_x5, _x6) {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }()\n  }]);\n\n  return DeviceMaintain;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"deviceList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"serverList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"schemaList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"schemaPage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"deviceType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"maintainType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 1;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"planType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 1;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"currentMain\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"editVisible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getDevice\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getDevice\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMaintainServer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMaintainServer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMaintainSchema\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMaintainSchema\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"save\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"save\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"delete\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"delete\"), _class.prototype), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"currentMainServer\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"currentMainSchame\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getInfo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getInfo\"), _class.prototype)), _class);\nvar DeviceMaintainStore = new DeviceMaintain();\nexport default DeviceMaintainStore;","map":{"version":3,"sources":["F:\\documents\\bl-device-manage\\src\\stores\\DeviceMaintainStore.js"],"names":["observable","action","isDataExist","services","DeviceMaintain","isLoading","gets","res","deviceList","data","deviceType","id","console","log","params","maintainType","serverList","pageIndex","pageSize","schemaList","items","schemaPage","pageInfo","type","req","typeId","posts","success","getMaintainServer","getMaintainSchema","currentMainServer","currentMainSchame","DeviceMaintainStore"],"mappings":"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","sourcesContent":["import { observable, action } from 'mobx';\nimport { isDataExist } from 'Utils/dataTools';\nimport * as services from '../services/basic';\nimport { message } from 'antd';\n// import { moment } from 'moment';\n\nclass DeviceMaintain {\n\t/* 查询页面数据 */\n\t@observable isLoading = false;\n\t@observable deviceList = [];\n\t@observable serverList = [];\n\t@observable schemaList = [];\n\t@observable schemaPage = {};\n\t@observable deviceType = '';\n\t@observable maintainType = 1;\n\t@observable planType = 1;\n\n\t/* 弹窗内容 */\n\t@observable currentMain = {};\n\t@observable editVisible = false\n\n\t@action async getDevice() {\n\t\t/* 获取所有的设备类型 */\n\t\tthis.isLoading = true;\n\t\ttry {\n\t\t\tlet res = await services.gets('getSelectType')();\n\t\t\tthis.isLoading = false;\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tthis.deviceList = res.data.data;\n\t\t\t\tthis.deviceType = res.data.data[0].id;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t/* ---------------- 点检库 */\n\n\t@action async getMaintainServer(params = {}) {\n\t\t/* 获取列表 */\n\t\tthis.isLoading = true;\n\t\ttry {\n\t\t\tlet res = await services.gets('getMaintainServer')({\n\t\t\t\tmaintainType: this.maintainType,\n\t\t\t\t...params\n\t\t\t});\n\t\t\tthis.isLoading = false;\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tthis.serverList = res.data.data;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\t@action async getMaintainSchema(params = {}) {\n\t\t/* 获取列表 */\n\t\tthis.isLoading = true;\n\t\ttry {\n\t\t\tlet res = await services.gets('getMaintainSchema')({\n\t\t\t\t// typeId: this.deviceType,\n\t\t\t\tpageIndex: 1,\n\t\t\t\tpageSize: 10,\n\t\t\t\tmaintainType: this.maintainType,\n\t\t\t\t...params\n\t\t\t});\n\t\t\tthis.isLoading = false;\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tthis.schemaList = res.data.data.items;\n\t\t\t\tthis.schemaPage = res.data.data.pageInfo;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t@action async save(params, type) {\n\t\ttry {\n\t\t\tlet req = type === 'server' ? 'saveServer' : 'saveSchema';\n\t\t\tlet data = {\n\t\t\t\t...params,\n\t\t\t\ttypeId: this.deviceType\n\t\t\t}\n\t\t\t// console.log(this.status,data);\n\t\t\tlet res = await services.posts(req)(data);\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tmessage.success('保存成功');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t\ttype === 'server' ? this.getMaintainServer() : this.getMaintainSchema({ typeId: this.deviceType });\n\t}\n\t@action async delete(params, type) {\n\t\ttry {\n\t\t\tlet req = type === 'server' ? 'deleteServer' : 'deleteSchema';\n\t\t\tlet res = await services.posts(req)(params);\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tmessage.success('保存成功');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t\ttype === 'server' ? this.getMaintainServer() : this.getMaintainSchema();\n\t}\n\t@observable currentMainServer = {}\n\t@observable currentMainSchame = {}\n\t@action async getInfo(params, type) {\n\t\ttry {\n\t\t\tlet req = type === 'server' ? 'getServerInfo' : 'getSchemaInfo';\n\t\t\tlet res = await services.gets(req)(params);\n\t\t\tif (isDataExist(res)) {\n\t\t\t\tif (type === 'server') {\n\t\t\t\t\tthis.currentMainServer = res.data.data;\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentMainSchame = res.data.data;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\n\n}\n\nlet DeviceMaintainStore = new DeviceMaintain();\nexport default DeviceMaintainStore;\n"]},"metadata":{},"sourceType":"module"}