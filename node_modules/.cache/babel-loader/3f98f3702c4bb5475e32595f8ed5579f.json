{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nvar warning_1 = require(\"rc-util/lib/warning\");\n\nvar generateConfig = {\n  // get\n  getNow: function getNow() {\n    return moment_1.default();\n  },\n  getWeekDay: function getWeekDay(date) {\n    return date.clone().locale('en_US').weekday();\n  },\n  getYear: function getYear(date) {\n    return date.year();\n  },\n  getMonth: function getMonth(date) {\n    return date.month();\n  },\n  getDate: function getDate(date) {\n    return date.date();\n  },\n  getHour: function getHour(date) {\n    return date.hour();\n  },\n  getMinute: function getMinute(date) {\n    return date.minute();\n  },\n  getSecond: function getSecond(date) {\n    return date.second();\n  },\n  // set\n  addYear: function addYear(date, diff) {\n    var clone = date.clone();\n    clone.add(diff, 'year');\n    return clone;\n  },\n  addMonth: function addMonth(date, diff) {\n    var clone = date.clone();\n    clone.add(diff, 'month');\n    return clone;\n  },\n  addDate: function addDate(date, diff) {\n    var clone = date.clone();\n    clone.add(diff, 'day');\n    return clone;\n  },\n  setYear: function setYear(date, year) {\n    var clone = date.clone();\n    clone.year(year);\n    return clone;\n  },\n  setMonth: function setMonth(date, month) {\n    var clone = date.clone();\n    clone.month(month);\n    return clone;\n  },\n  setDate: function setDate(date, num) {\n    var clone = date.clone();\n    clone.date(num);\n    return clone;\n  },\n  setHour: function setHour(date, hour) {\n    var clone = date.clone();\n    clone.hour(hour);\n    return clone;\n  },\n  setMinute: function setMinute(date, minute) {\n    var clone = date.clone();\n    clone.minute(minute);\n    return clone;\n  },\n  setSecond: function setSecond(date, second) {\n    var clone = date.clone();\n    clone.second(second);\n    return clone;\n  },\n  // Compare\n  isAfter: function isAfter(date1, date2) {\n    return date1.isAfter(date2);\n  },\n  isValidate: function isValidate(date) {\n    return date.isValid();\n  },\n  locale: {\n    getWeekFirstDay: function getWeekFirstDay(locale) {\n      var date = moment_1.default().locale(locale);\n      return date.localeData().firstDayOfWeek();\n    },\n    getWeek: function getWeek(locale, date) {\n      var clone = date.clone();\n      clone.locale(locale);\n      return clone.week();\n    },\n    getShortWeekDays: function getShortWeekDays(locale) {\n      var date = moment_1.default().locale(locale);\n      return date.localeData().weekdaysMin();\n    },\n    getShortMonths: function getShortMonths(locale) {\n      var date = moment_1.default().locale(locale);\n      return date.localeData().monthsShort();\n    },\n    format: function format(locale, date, _format) {\n      var clone = date.clone();\n      clone.locale(locale);\n      return clone.format(_format);\n    },\n    parse: function parse(locale, text, formats) {\n      var fallbackFormatList = [];\n\n      for (var i = 0; i < formats.length; i += 1) {\n        var format = formats[i];\n        var formatText = text;\n\n        if (format.includes('wo') || format.includes('Wo')) {\n          format = format.replace(/wo/g, 'w').replace(/Wo/g, 'W');\n          var matchFormat = format.match(/[-YyMmDdHhSsWwGg]+/g);\n          var matchText = formatText.match(/[-\\d]+/g);\n\n          if (matchFormat && matchText) {\n            format = matchFormat.join('');\n            formatText = matchText.join('');\n          } else {\n            fallbackFormatList.push(format.replace(/o/g, ''));\n          }\n        }\n\n        var date = moment_1.default(formatText, format, locale, true);\n\n        if (date.isValid()) {\n          return date;\n        }\n      } // Fallback to fuzzy matching, this should always not reach match or need fire a issue\n\n\n      for (var _i = 0; _i < fallbackFormatList.length; _i += 1) {\n        var _date = moment_1.default(text, fallbackFormatList[_i], locale, false);\n        /* istanbul ignore next */\n\n\n        if (_date.isValid()) {\n          warning_1.noteOnce(false, 'Not match any format strictly and fallback to fuzzy match. Please help to fire a issue about this.');\n          return _date;\n        }\n      }\n\n      return null;\n    }\n  }\n};\nexports.default = generateConfig;","map":null,"metadata":{},"sourceType":"script"}