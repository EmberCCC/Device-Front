{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _CheckCircleFilled = _interopRequireDefault(require(\"@ant-design/icons/CheckCircleFilled\"));\n\nvar _CloseCircleFilled = _interopRequireDefault(require(\"@ant-design/icons/CloseCircleFilled\"));\n\nvar _ExclamationCircleFilled = _interopRequireDefault(require(\"@ant-design/icons/ExclamationCircleFilled\"));\n\nvar _LoadingOutlined = _interopRequireDefault(require(\"@ant-design/icons/LoadingOutlined\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rcFieldForm = require(\"rc-field-form\");\n\nvar _useState3 = _interopRequireDefault(require(\"rc-util/lib/hooks/useState\"));\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar _ref2 = require(\"rc-util/lib/ref\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _row = _interopRequireDefault(require(\"../grid/row\"));\n\nvar _reactNode = require(\"../_util/reactNode\");\n\nvar _type = require(\"../_util/type\");\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nvar _context = require(\"./context\");\n\nvar _FormItemInput = _interopRequireDefault(require(\"./FormItemInput\"));\n\nvar _FormItemLabel = _interopRequireDefault(require(\"./FormItemLabel\"));\n\nvar _useDebounce = _interopRequireDefault(require(\"./hooks/useDebounce\"));\n\nvar _useFrameState3 = _interopRequireDefault(require(\"./hooks/useFrameState\"));\n\nvar _useItemRef = _interopRequireDefault(require(\"./hooks/useItemRef\"));\n\nvar _util = require(\"./util\");\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar NAME_SPLIT = '__SPLIT__';\nvar ValidateStatuses = (0, _type.tuple)('success', 'warning', 'error', 'validating', '');\nvar MemoInput = /*#__PURE__*/React.memo(function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (prev, next) {\n  return prev.value === next.value && prev.update === next.update;\n});\n\nfunction hasValidName(name) {\n  if (name === null) {\n    process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', '`null` is passed as `name` property') : void 0;\n  }\n\n  return !(name === undefined || name === null);\n}\n\nfunction genEmptyMeta() {\n  return {\n    errors: [],\n    warnings: [],\n    touched: false,\n    validating: false,\n    name: []\n  };\n}\n\nvar iconMap = {\n  success: _CheckCircleFilled[\"default\"],\n  warning: _ExclamationCircleFilled[\"default\"],\n  error: _CloseCircleFilled[\"default\"],\n  validating: _LoadingOutlined[\"default\"]\n};\n\nfunction FormItem(props) {\n  var name = props.name,\n      noStyle = props.noStyle,\n      dependencies = props.dependencies,\n      customizePrefixCls = props.prefixCls,\n      style = props.style,\n      className = props.className,\n      shouldUpdate = props.shouldUpdate,\n      hasFeedback = props.hasFeedback,\n      help = props.help,\n      rules = props.rules,\n      validateStatus = props.validateStatus,\n      children = props.children,\n      required = props.required,\n      label = props.label,\n      messageVariables = props.messageVariables,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,\n      validateTrigger = props.validateTrigger,\n      hidden = props.hidden,\n      restProps = __rest(props, [\"name\", \"noStyle\", \"dependencies\", \"prefixCls\", \"style\", \"className\", \"shouldUpdate\", \"hasFeedback\", \"help\", \"rules\", \"validateStatus\", \"children\", \"required\", \"label\", \"messageVariables\", \"trigger\", \"validateTrigger\", \"hidden\"]);\n\n  var _useContext = (0, React.useContext)(_configProvider.ConfigContext),\n      getPrefixCls = _useContext.getPrefixCls;\n\n  var _useContext2 = (0, React.useContext)(_context.FormContext),\n      formName = _useContext2.name,\n      requiredMark = _useContext2.requiredMark;\n\n  var isRenderProps = typeof children === 'function';\n  var notifyParentMetaChange = (0, React.useContext)(_context.NoStyleItemContext);\n\n  var _useContext3 = (0, React.useContext)(_rcFieldForm.FieldContext),\n      contextValidateTrigger = _useContext3.validateTrigger;\n\n  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;\n  var hasName = hasValidName(name);\n  var prefixCls = getPrefixCls('form', customizePrefixCls); // ========================= MISC =========================\n  // Get `noStyle` required info\n\n  var listContext = React.useContext(_rcFieldForm.ListContext);\n  var fieldKeyPathRef = React.useRef(); // ======================== Errors ========================\n  // >>>>> Collect sub field errors\n\n  var _useFrameState = (0, _useFrameState3[\"default\"])({}),\n      _useFrameState2 = (0, _slicedToArray2[\"default\"])(_useFrameState, 2),\n      subFieldErrors = _useFrameState2[0],\n      setSubFieldErrors = _useFrameState2[1]; // >>>>> Current field errors\n\n\n  var _useState = (0, _useState3[\"default\"])(function () {\n    return genEmptyMeta();\n  }),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      meta = _useState2[0],\n      setMeta = _useState2[1];\n\n  var onMetaChange = function onMetaChange(nextMeta) {\n    // This keyInfo is not correct when field is removed\n    // Since origin keyManager no longer keep the origin key anymore\n    // Which means we need cache origin one and reuse when removed\n    var keyInfo = listContext === null || listContext === void 0 ? void 0 : listContext.getKey(nextMeta.name); // Destroy will reset all the meta\n\n    setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta, true); // Bump to parent since noStyle\n\n    if (noStyle && notifyParentMetaChange) {\n      var namePath = nextMeta.name;\n\n      if (!nextMeta.destroy) {\n        if (keyInfo !== undefined) {\n          var _keyInfo = (0, _slicedToArray2[\"default\"])(keyInfo, 2),\n              fieldKey = _keyInfo[0],\n              restPath = _keyInfo[1];\n\n          namePath = [fieldKey].concat((0, _toConsumableArray2[\"default\"])(restPath));\n          fieldKeyPathRef.current = namePath;\n        }\n      } else {\n        // Use origin cache data\n        namePath = fieldKeyPathRef.current || namePath;\n      }\n\n      notifyParentMetaChange(nextMeta, namePath);\n    }\n  }; // >>>>> Collect noStyle Field error to the top FormItem\n\n\n  var onSubItemMetaChange = function onSubItemMetaChange(subMeta, uniqueKeys) {\n    // Only `noStyle` sub item will trigger\n    setSubFieldErrors(function (prevSubFieldErrors) {\n      var clone = (0, _extends2[\"default\"])({}, prevSubFieldErrors); // name: ['user', 1] + key: [4] = ['user', 4]\n\n      var mergedNamePath = [].concat((0, _toConsumableArray2[\"default\"])(subMeta.name.slice(0, -1)), (0, _toConsumableArray2[\"default\"])(uniqueKeys));\n      var mergedNameKey = mergedNamePath.join(NAME_SPLIT);\n\n      if (subMeta.destroy) {\n        // Remove\n        delete clone[mergedNameKey];\n      } else {\n        // Update\n        clone[mergedNameKey] = subMeta;\n      }\n\n      return clone;\n    });\n  }; // >>>>> Get merged errors\n\n\n  var _React$useMemo = React.useMemo(function () {\n    var errorList = (0, _toConsumableArray2[\"default\"])(meta.errors);\n    var warningList = (0, _toConsumableArray2[\"default\"])(meta.warnings);\n    Object.values(subFieldErrors).forEach(function (subFieldError) {\n      errorList.push.apply(errorList, (0, _toConsumableArray2[\"default\"])(subFieldError.errors || []));\n      warningList.push.apply(warningList, (0, _toConsumableArray2[\"default\"])(subFieldError.warnings || []));\n    });\n    return [errorList, warningList];\n  }, [subFieldErrors, meta.errors, meta.warnings]),\n      _React$useMemo2 = (0, _slicedToArray2[\"default\"])(_React$useMemo, 2),\n      mergedErrors = _React$useMemo2[0],\n      mergedWarnings = _React$useMemo2[1];\n\n  var debounceErrors = (0, _useDebounce[\"default\"])(mergedErrors);\n  var debounceWarnings = (0, _useDebounce[\"default\"])(mergedWarnings); // ===================== Children Ref =====================\n\n  var getItemRef = (0, _useItemRef[\"default\"])(); // ======================== Status ========================\n\n  var mergedValidateStatus = '';\n\n  if (validateStatus !== undefined) {\n    mergedValidateStatus = validateStatus;\n  } else if (meta === null || meta === void 0 ? void 0 : meta.validating) {\n    mergedValidateStatus = 'validating';\n  } else if (debounceErrors.length) {\n    mergedValidateStatus = 'error';\n  } else if (debounceWarnings.length) {\n    mergedValidateStatus = 'warning';\n  } else if (meta === null || meta === void 0 ? void 0 : meta.touched) {\n    mergedValidateStatus = 'success';\n  }\n\n  var formItemStatusContext = (0, React.useMemo)(function () {\n    var feedbackIcon;\n\n    if (hasFeedback) {\n      var IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];\n      feedbackIcon = IconNode ? /*#__PURE__*/React.createElement(\"span\", {\n        className: (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-item-feedback-icon\"), \"\".concat(prefixCls, \"-item-feedback-icon-\").concat(mergedValidateStatus))\n      }, /*#__PURE__*/React.createElement(IconNode, null)) : null;\n    }\n\n    return {\n      status: mergedValidateStatus,\n      hasFeedback: hasFeedback,\n      feedbackIcon: feedbackIcon,\n      isFormItemInput: true\n    };\n  }, [mergedValidateStatus, hasFeedback]); // ======================== Render ========================\n\n  function renderLayout(baseChildren, fieldId, isRequired) {\n    var _itemClassName;\n\n    if (noStyle && !hidden) {\n      return baseChildren;\n    }\n\n    var itemClassName = (_itemClassName = {}, (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item\"), true), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-with-help\"), help !== undefined && help !== null || debounceErrors.length || debounceWarnings.length), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(className), !!className), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-feedback\"), mergedValidateStatus && hasFeedback), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-success\"), mergedValidateStatus === 'success'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-warning\"), mergedValidateStatus === 'warning'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-error\"), mergedValidateStatus === 'error'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-is-validating\"), mergedValidateStatus === 'validating'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-hidden\"), hidden), _itemClassName); // ======================= Children =======================\n\n    return /*#__PURE__*/React.createElement(_row[\"default\"], (0, _extends2[\"default\"])({\n      className: (0, _classnames[\"default\"])(itemClassName),\n      style: style,\n      key: \"row\"\n    }, (0, _omit[\"default\"])(restProps, ['colon', 'extra', 'fieldKey', 'requiredMark', 'getValueFromEvent', 'getValueProps', 'htmlFor', 'id', 'initialValue', 'isListField', 'labelAlign', 'labelWrap', 'labelCol', 'normalize', 'preserve', 'tooltip', 'validateFirst', 'valuePropName', 'wrapperCol', '_internalItemRender'])), /*#__PURE__*/React.createElement(_FormItemLabel[\"default\"], (0, _extends2[\"default\"])({\n      htmlFor: fieldId,\n      required: isRequired,\n      requiredMark: requiredMark\n    }, props, {\n      prefixCls: prefixCls\n    })), /*#__PURE__*/React.createElement(_FormItemInput[\"default\"], (0, _extends2[\"default\"])({}, props, meta, {\n      errors: debounceErrors,\n      warnings: debounceWarnings,\n      prefixCls: prefixCls,\n      status: mergedValidateStatus,\n      help: help\n    }), /*#__PURE__*/React.createElement(_context.NoStyleItemContext.Provider, {\n      value: onSubItemMetaChange\n    }, /*#__PURE__*/React.createElement(_context.FormItemInputContext.Provider, {\n      value: formItemStatusContext\n    }, baseChildren))));\n  }\n\n  if (!hasName && !isRenderProps && !dependencies) {\n    return renderLayout(children);\n  }\n\n  var variables = {};\n\n  if (typeof label === 'string') {\n    variables.label = label;\n  } else if (name) {\n    variables.label = String(name);\n  }\n\n  if (messageVariables) {\n    variables = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, variables), messageVariables);\n  } // >>>>> With Field\n\n\n  return /*#__PURE__*/React.createElement(_rcFieldForm.Field, (0, _extends2[\"default\"])({}, props, {\n    messageVariables: variables,\n    trigger: trigger,\n    validateTrigger: mergedValidateTrigger,\n    onMetaChange: onMetaChange\n  }), function (control, renderMeta, context) {\n    var mergedName = (0, _util.toArray)(name).length && renderMeta ? renderMeta.name : [];\n    var fieldId = (0, _util.getFieldId)(mergedName, formName);\n    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {\n      if (rule && (0, _typeof2[\"default\"])(rule) === 'object' && rule.required && !rule.warningOnly) {\n        return true;\n      }\n\n      if (typeof rule === 'function') {\n        var ruleEntity = rule(context);\n        return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;\n      }\n\n      return false;\n    })); // ======================= Children =======================\n\n    var mergedControl = (0, _extends2[\"default\"])({}, control);\n    var childNode = null;\n    process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!(shouldUpdate && dependencies), 'Form.Item', \"`shouldUpdate` and `dependencies` shouldn't be used together. See https://ant.design/components/form/#dependencies.\") : void 0;\n\n    if (Array.isArray(children) && hasName) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', '`children` is array of render props cannot have `name`.') : void 0;\n      childNode = children;\n    } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!!(shouldUpdate || dependencies), 'Form.Item', '`children` of render props only work with `shouldUpdate` or `dependencies`.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!hasName, 'Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\") : void 0;\n    } else if (dependencies && !isRenderProps && !hasName) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.') : void 0;\n    } else if ((0, _reactNode.isValidElement)(children)) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(children.props.defaultValue === undefined, 'Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.') : void 0;\n      var childProps = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, children.props), mergedControl);\n\n      if (!childProps.id) {\n        childProps.id = fieldId;\n      }\n\n      if ((0, _ref2.supportRef)(children)) {\n        childProps.ref = getItemRef(mergedName, children);\n      } // We should keep user origin event handler\n\n\n      var triggers = new Set([].concat((0, _toConsumableArray2[\"default\"])((0, _util.toArray)(trigger)), (0, _toConsumableArray2[\"default\"])((0, _util.toArray)(mergedValidateTrigger))));\n      triggers.forEach(function (eventName) {\n        childProps[eventName] = function () {\n          var _a2, _c2;\n\n          var _a, _b, _c;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));\n        };\n      });\n      childNode = /*#__PURE__*/React.createElement(MemoInput, {\n        value: mergedControl[props.valuePropName || 'value'],\n        update: children\n      }, (0, _reactNode.cloneElement)(children, childProps));\n    } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {\n      childNode = children(context);\n    } else {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.') : void 0;\n      childNode = children;\n    }\n\n    return renderLayout(childNode, fieldId, isRequired);\n  });\n}\n\nvar _default = FormItem;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}