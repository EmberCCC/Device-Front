{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createSuper\"));\n\nvar _CloseCircleFilled = _interopRequireDefault(require(\"@ant-design/icons/CloseCircleFilled\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _context = require(\"../form/context\");\n\nvar _reactNode = require(\"../_util/reactNode\");\n\nvar _statusUtils = require(\"../_util/statusUtils\");\n\nvar _type = require(\"../_util/type\");\n\nvar ClearableInputType = (0, _type.tuple)('text', 'input');\n\nfunction hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\n\nvar ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(ClearableLabeledInput, _React$Component);\n\n  var _super = (0, _createSuper2[\"default\"])(ClearableLabeledInput);\n\n  function ClearableLabeledInput() {\n    (0, _classCallCheck2[\"default\"])(this, ClearableLabeledInput);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2[\"default\"])(ClearableLabeledInput, [{\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _classNames;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          readOnly = _this$props.readOnly,\n          handleReset = _this$props.handleReset,\n          suffix = _this$props.suffix;\n      var needClear = !disabled && !readOnly && value;\n      var className = \"\".concat(prefixCls, \"-clear-icon\");\n      return /*#__PURE__*/React.createElement(_CloseCircleFilled[\"default\"], {\n        onClick: handleReset,\n        // Do not trigger onBlur when clear input\n        // https://github.com/ant-design/ant-design/issues/31200\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        },\n        className: (0, _classnames[\"default\"])((_classNames = {}, (0, _defineProperty2[\"default\"])(_classNames, \"\".concat(className, \"-hidden\"), !needClear), (0, _defineProperty2[\"default\"])(_classNames, \"\".concat(className, \"-has-suffix\"), !!suffix), _classNames), className),\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderTextAreaWithClearIcon\",\n    value: function renderTextAreaWithClearIcon(prefixCls, element, statusContext) {\n      var _classNames2;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          allowClear = _this$props2.allowClear,\n          className = _this$props2.className,\n          style = _this$props2.style,\n          direction = _this$props2.direction,\n          bordered = _this$props2.bordered,\n          hidden = _this$props2.hidden,\n          customStatus = _this$props2.status;\n      var contextStatus = statusContext.status,\n          hasFeedback = statusContext.hasFeedback;\n\n      if (!allowClear) {\n        return (0, _reactNode.cloneElement)(element, {\n          value: value\n        });\n      }\n\n      var affixWrapperCls = (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-affix-wrapper\"), \"\".concat(prefixCls, \"-affix-wrapper-textarea-with-clear-btn\"), (0, _statusUtils.getStatusClassNames)(\"\".concat(prefixCls, \"-affix-wrapper\"), (0, _statusUtils.getMergedStatus)(contextStatus, customStatus), hasFeedback), (_classNames2 = {}, (0, _defineProperty2[\"default\"])(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-rtl\"), direction === 'rtl'), (0, _defineProperty2[\"default\"])(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-borderless\"), !bordered), (0, _defineProperty2[\"default\"])(_classNames2, \"\".concat(className), !hasAddon(this.props) && className), _classNames2));\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: style,\n        hidden: hidden\n      }, (0, _reactNode.cloneElement)(element, {\n        style: null,\n        value: value\n      }), this.renderClearIcon(prefixCls));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/React.createElement(_context.FormItemInputContext.Consumer, null, function (statusContext) {\n        var _this$props3 = _this.props,\n            prefixCls = _this$props3.prefixCls,\n            inputType = _this$props3.inputType,\n            element = _this$props3.element;\n\n        if (inputType === ClearableInputType[0]) {\n          return _this.renderTextAreaWithClearIcon(prefixCls, element, statusContext);\n        }\n      });\n    }\n  }]);\n  return ClearableLabeledInput;\n}(React.Component);\n\nvar _default = ClearableLabeledInput;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}