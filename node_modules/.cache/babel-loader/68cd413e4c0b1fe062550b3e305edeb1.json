{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport classNames from 'classnames';\nimport RcUpload from 'rc-upload';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport warning from '../_util/warning';\nimport UploadList from './UploadList';\nimport { file2Obj, getFileItem, removeFileItem, updateFileList } from './utils';\nexport var LIST_IGNORE = \"__LIST_IGNORE_\".concat(Date.now(), \"__\");\n\nvar InternalUpload = function InternalUpload(props, ref) {\n  var _classNames2;\n\n  var fileList = props.fileList,\n      defaultFileList = props.defaultFileList,\n      onRemove = props.onRemove,\n      showUploadList = props.showUploadList,\n      listType = props.listType,\n      onPreview = props.onPreview,\n      onDownload = props.onDownload,\n      onChange = props.onChange,\n      onDrop = props.onDrop,\n      previewFile = props.previewFile,\n      disabled = props.disabled,\n      propLocale = props.locale,\n      iconRender = props.iconRender,\n      isImageUrl = props.isImageUrl,\n      progress = props.progress,\n      customizePrefixCls = props.prefixCls,\n      className = props.className,\n      type = props.type,\n      children = props.children,\n      style = props.style,\n      itemRender = props.itemRender,\n      maxCount = props.maxCount;\n\n  var _useMergedState = useMergedState(defaultFileList || [], {\n    value: fileList,\n    postState: function postState(list) {\n      return list !== null && list !== void 0 ? list : [];\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedFileList = _useMergedState2[0],\n      setMergedFileList = _useMergedState2[1];\n\n  var _React$useState = React.useState('drop'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragState = _React$useState2[0],\n      setDragState = _React$useState2[1];\n\n  var upload = React.useRef();\n  process.env.NODE_ENV !== \"production\" ? warning('fileList' in props || !('value' in props), 'Upload', '`value` is not a valid prop, do you mean `fileList`?') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!('transformFile' in props), 'Upload', '`transformFile` is deprecated. Please use `beforeUpload` directly.') : void 0; // Control mode will auto fill file uid if not provided\n\n  React.useMemo(function () {\n    var timestamp = Date.now();\n    (fileList || []).forEach(function (file, index) {\n      if (!file.uid && !Object.isFrozen(file)) {\n        file.uid = \"__AUTO__\".concat(timestamp, \"_\").concat(index, \"__\");\n      }\n    });\n  }, [fileList]);\n\n  var onInternalChange = function onInternalChange(file, changedFileList, event) {\n    var cloneList = _toConsumableArray(changedFileList); // Cut to match count\n\n\n    if (maxCount === 1) {\n      cloneList = cloneList.slice(-1);\n    } else if (maxCount) {\n      cloneList = cloneList.slice(0, maxCount);\n    }\n\n    setMergedFileList(cloneList);\n    var changeInfo = {\n      file: file,\n      fileList: cloneList\n    };\n\n    if (event) {\n      changeInfo.event = event;\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);\n  };\n\n  var mergedBeforeUpload = function mergedBeforeUpload(file, fileListArgs) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var beforeUpload, transformFile, parsedFile, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              beforeUpload = props.beforeUpload, transformFile = props.transformFile;\n              parsedFile = file;\n\n              if (!beforeUpload) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 5;\n              return beforeUpload(file, fileListArgs);\n\n            case 5:\n              result = _context.sent;\n\n              if (!(result === false)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", false);\n\n            case 8:\n              // Hack for LIST_IGNORE, we add additional info to remove from the list\n              delete file[LIST_IGNORE];\n\n              if (!(result === LIST_IGNORE)) {\n                _context.next = 12;\n                break;\n              }\n\n              Object.defineProperty(file, LIST_IGNORE, {\n                value: true,\n                configurable: true\n              });\n              return _context.abrupt(\"return\", false);\n\n            case 12:\n              if (_typeof(result) === 'object' && result) {\n                parsedFile = result;\n              }\n\n            case 13:\n              if (!transformFile) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 16;\n              return transformFile(parsedFile);\n\n            case 16:\n              parsedFile = _context.sent;\n\n            case 17:\n              return _context.abrupt(\"return\", parsedFile);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n\n  var onBatchStart = function onBatchStart(batchFileInfoList) {\n    // Skip file which marked as `LIST_IGNORE`, these file will not add to file list\n    var filteredFileInfoList = batchFileInfoList.filter(function (info) {\n      return !info.file[LIST_IGNORE];\n    }); // Nothing to do since no file need upload\n\n    if (!filteredFileInfoList.length) {\n      return;\n    }\n\n    var objectFileList = filteredFileInfoList.map(function (info) {\n      return file2Obj(info.file);\n    }); // Concat new files with prev files\n\n    var newFileList = _toConsumableArray(mergedFileList);\n\n    objectFileList.forEach(function (fileObj) {\n      // Replace file if exist\n      newFileList = updateFileList(fileObj, newFileList);\n    });\n    objectFileList.forEach(function (fileObj, index) {\n      // Repeat trigger `onChange` event for compatible\n      var triggerFileObj = fileObj;\n\n      if (!filteredFileInfoList[index].parsedFile) {\n        // `beforeUpload` return false\n        var originFileObj = fileObj.originFileObj;\n        var clone;\n\n        try {\n          clone = new File([originFileObj], originFileObj.name, {\n            type: originFileObj.type\n          });\n        } catch (e) {\n          clone = new Blob([originFileObj], {\n            type: originFileObj.type\n          });\n          clone.name = originFileObj.name;\n          clone.lastModifiedDate = new Date();\n          clone.lastModified = new Date().getTime();\n        }\n\n        clone.uid = fileObj.uid;\n        triggerFileObj = clone;\n      } else {\n        // Inject `uploading` status\n        fileObj.status = 'uploading';\n      }\n\n      onInternalChange(triggerFileObj, newFileList);\n    });\n  };\n\n  var onSuccess = function onSuccess(response, file, xhr) {\n    try {\n      if (typeof response === 'string') {\n        response = JSON.parse(response);\n      }\n    } catch (e) {\n      /* do nothing */\n    } // removed\n\n\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    var targetItem = file2Obj(file);\n    targetItem.status = 'done';\n    targetItem.percent = 100;\n    targetItem.response = response;\n    targetItem.xhr = xhr;\n    var nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  var onProgress = function onProgress(e, file) {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    var targetItem = file2Obj(file);\n    targetItem.status = 'uploading';\n    targetItem.percent = e.percent;\n    var nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList, e);\n  };\n\n  var onError = function onError(error, response, file) {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    var targetItem = file2Obj(file);\n    targetItem.error = error;\n    targetItem.response = response;\n    targetItem.status = 'error';\n    var nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  var handleRemove = function handleRemove(file) {\n    var currentFile;\n    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {\n      var _a; // Prevent removing file\n\n\n      if (ret === false) {\n        return;\n      }\n\n      var removedFileList = removeFileItem(file, mergedFileList);\n\n      if (removedFileList) {\n        currentFile = _extends(_extends({}, file), {\n          status: 'removed'\n        });\n        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(function (item) {\n          var matchKey = currentFile.uid !== undefined ? 'uid' : 'name';\n\n          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {\n            item.status = 'removed';\n          }\n        });\n        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);\n        onInternalChange(currentFile, removedFileList);\n      }\n    });\n  };\n\n  var onFileDrop = function onFileDrop(e) {\n    setDragState(e.type);\n\n    if (e.type === 'drop') {\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);\n    }\n  }; // Test needs\n\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      onBatchStart: onBatchStart,\n      onSuccess: onSuccess,\n      onProgress: onProgress,\n      onError: onError,\n      fileList: mergedFileList,\n      upload: upload.current\n    };\n  });\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('upload', customizePrefixCls);\n\n  var rcUploadProps = _extends(_extends({\n    onBatchStart: onBatchStart,\n    onError: onError,\n    onProgress: onProgress,\n    onSuccess: onSuccess\n  }, props), {\n    prefixCls: prefixCls,\n    beforeUpload: mergedBeforeUpload,\n    onChange: undefined\n  });\n\n  delete rcUploadProps.className;\n  delete rcUploadProps.style; // Remove id to avoid open by label when trigger is hidden\n  // !children: https://github.com/ant-design/ant-design/issues/14298\n  // disabled: https://github.com/ant-design/ant-design/issues/16478\n  //           https://github.com/ant-design/ant-design/issues/24197\n\n  if (!children || disabled) {\n    delete rcUploadProps.id;\n  }\n\n  var renderUploadList = function renderUploadList(button, buttonVisible) {\n    return showUploadList ? /*#__PURE__*/React.createElement(LocaleReceiver, {\n      componentName: \"Upload\",\n      defaultLocale: defaultLocale.Upload\n    }, function (locale) {\n      var _ref = typeof showUploadList === 'boolean' ? {} : showUploadList,\n          showRemoveIcon = _ref.showRemoveIcon,\n          showPreviewIcon = _ref.showPreviewIcon,\n          showDownloadIcon = _ref.showDownloadIcon,\n          removeIcon = _ref.removeIcon,\n          previewIcon = _ref.previewIcon,\n          downloadIcon = _ref.downloadIcon;\n\n      return /*#__PURE__*/React.createElement(UploadList, {\n        prefixCls: prefixCls,\n        listType: listType,\n        items: mergedFileList,\n        previewFile: previewFile,\n        onPreview: onPreview,\n        onDownload: onDownload,\n        onRemove: handleRemove,\n        showRemoveIcon: !disabled && showRemoveIcon,\n        showPreviewIcon: showPreviewIcon,\n        showDownloadIcon: showDownloadIcon,\n        removeIcon: removeIcon,\n        previewIcon: previewIcon,\n        downloadIcon: downloadIcon,\n        iconRender: iconRender,\n        locale: _extends(_extends({}, locale), propLocale),\n        isImageUrl: isImageUrl,\n        progress: progress,\n        appendAction: button,\n        appendActionVisible: buttonVisible,\n        itemRender: itemRender\n      });\n    }) : button;\n  };\n\n  if (type === 'drag') {\n    var _classNames;\n\n    var dragCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag-uploading\"), mergedFileList.some(function (file) {\n      return file.status === 'uploading';\n    })), _defineProperty(_classNames, \"\".concat(prefixCls, \"-drag-hover\"), dragState === 'dragover'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    return /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: dragCls,\n      onDrop: onFileDrop,\n      onDragOver: onFileDrop,\n      onDragLeave: onFileDrop,\n      style: style\n    }, /*#__PURE__*/React.createElement(RcUpload, _extends({}, rcUploadProps, {\n      ref: upload,\n      className: \"\".concat(prefixCls, \"-btn\")\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-drag-container\")\n    }, children))), renderUploadList());\n  }\n\n  var uploadButtonCls = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-select\"), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-select-\").concat(listType), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames2));\n\n  var renderUploadButton = function renderUploadButton(uploadButtonStyle) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: uploadButtonCls,\n      style: uploadButtonStyle\n    }, /*#__PURE__*/React.createElement(RcUpload, _extends({}, rcUploadProps, {\n      ref: upload\n    })));\n  };\n\n  var uploadButton = renderUploadButton(children ? undefined : {\n    display: 'none'\n  });\n\n  if (listType === 'picture-card') {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(\"\".concat(prefixCls, \"-picture-card-wrapper\"), className)\n    }, renderUploadList(uploadButton, !!children));\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: className\n  }, uploadButton, renderUploadList());\n};\n\nvar Upload = /*#__PURE__*/React.forwardRef(InternalUpload);\n\nif (process.env.NODE_ENV !== 'production') {\n  Upload.displayName = 'Upload';\n}\n\nUpload.defaultProps = {\n  type: 'select',\n  multiple: false,\n  action: '',\n  data: {},\n  accept: '',\n  showUploadList: true,\n  listType: 'text',\n  className: '',\n  disabled: false,\n  supportServerRender: true\n};\nexport default Upload;","map":null,"metadata":{},"sourceType":"module"}