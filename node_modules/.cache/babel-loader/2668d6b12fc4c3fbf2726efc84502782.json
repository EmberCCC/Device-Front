{"ast":null,"code":"var _excluded = [\"schema\"],\n    _excluded2 = [\"onChange\", \"value\", \"defaultValue\", \"schema\", \"readOnly\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport { defaultGetValueFromEvent } from './utils';\nexport var createWidget = function createWidget(mapProps, extraSchema) {\n  return function (Component) {\n    return function (props) {\n      var schema = props.schema,\n          rest = _objectWithoutProperties(props, _excluded);\n\n      var _schema = _objectSpread(_objectSpread({}, schema), extraSchema);\n\n      var propsMap = typeof mapProps === 'function' ? mapProps(_objectSpread({\n        schema: _schema\n      }, rest)) : {};\n\n      var _props = _objectSpread(_objectSpread({\n        schema: _schema\n      }, rest), propsMap);\n\n      var finalProps = transformProps(_props);\n      return /*#__PURE__*/React.createElement(Component, finalProps);\n    };\n  };\n};\nexport var transformProps = function transformProps(props) {\n  var onChange = props.onChange,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      ownSchema = props.schema,\n      readOnly = props.readOnly,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var schema = _objectSpread({}, ownSchema);\n\n  var _ref = schema || {},\n      trigger = _ref.trigger,\n      valuePropName = _ref.valuePropName;\n\n  var controlProps = {};\n  var _valuePropName = 'value';\n\n  var _value = value === undefined ? defaultValue : value;\n\n  if (valuePropName && typeof valuePropName === 'string') {\n    _valuePropName = valuePropName;\n    controlProps[valuePropName] = _value;\n  } else {\n    controlProps.value = _value;\n  }\n\n  var _onChange = function _onChange() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var newValue = defaultGetValueFromEvent.apply(void 0, [_valuePropName].concat(args));\n    onChange(newValue);\n  };\n\n  if (trigger && typeof trigger === 'string') {\n    controlProps.onChange = _onChange;\n    controlProps[trigger] = _onChange;\n  } else {\n    controlProps.onChange = _onChange;\n  }\n\n  var usefulPropsFromSchema = {\n    disabled: schema.disabled || schema['ui:disabled'],\n    readOnly: schema.readOnly || schema['ui:readonly'] || readOnly,\n    hidden: schema.hidden || schema['ui:hidden']\n  };\n\n  var _props = _objectSpread(_objectSpread(_objectSpread({}, controlProps), {}, {\n    schema: schema\n  }, usefulPropsFromSchema), rest);\n\n  return _props;\n};","map":null,"metadata":{},"sourceType":"module"}