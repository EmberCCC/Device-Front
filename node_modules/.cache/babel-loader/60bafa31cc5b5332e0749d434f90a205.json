{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { get, set, unset } from 'lodash-es';\nimport { cleanEmpty, clone, isObject, removeEmptyItemFromList, removeHiddenFromResult } from './utils'; // 提交前需要先处理formData的逻辑\n\nexport var processData = function processData(data, flatten, removeHiddenData) {\n  // 1. 去掉 hidden = true 的元素\n  var _data = clone(data);\n\n  if (removeHiddenData) {\n    _data = removeHiddenFromResult(data, flatten);\n  } // 2. bind 的处理\n\n\n  _data = transformDataWithBind(_data, flatten); // 3. 去掉list里面所有的空值\n\n  _data = removeEmptyItemFromList(_data); // 4. 去掉所有的 undefined\n\n  _data = cleanEmpty(_data);\n  return _data;\n};\nexport var transformDataWithBind = function transformDataWithBind(data, flatten) {\n  var _data = data;\n  var unbindKeys = [];\n  var bindKeys = [];\n  var bindArrKeys = [];\n\n  var isMultiBind = function isMultiBind(bind) {\n    return Array.isArray(bind) && bind.every(function (item) {\n      return typeof item === 'string';\n    });\n  };\n\n  Object.keys(flatten).forEach(function (key) {\n    var bind = flatten[key] && flatten[key].schema && flatten[key].schema.bind;\n\n    var _key = key.replace('[]', '');\n\n    if (bind === false) {\n      unbindKeys.push(_key);\n    } else if (typeof bind === 'string') {\n      bindKeys.push({\n        key: _key,\n        bind: bind\n      });\n    } else if (isMultiBind(bind)) {\n      bindArrKeys.push({\n        key: _key,\n        bind: bind\n      });\n    }\n  });\n\n  var handleBindData = function handleBindData(formData) {\n    unbindKeys.forEach(function (key) {\n      unset(formData, key); // TODO: maybe removing upper structure\n    });\n    bindKeys.forEach(function (item) {\n      var key = item.key,\n          bind = item.bind;\n      var temp = get(formData, key);\n      var oldVal = get(formData, bind);\n\n      if (isObject(oldVal)) {\n        temp = _objectSpread(_objectSpread({}, oldVal), temp);\n      }\n\n      set(formData, bind, temp);\n      unset(formData, key);\n    });\n    bindArrKeys.forEach(function (item) {\n      var key = item.key,\n          bind = item.bind;\n      var temp = get(formData, key);\n      unset(formData, key);\n\n      if (Array.isArray(temp)) {\n        temp.forEach(function (t, i) {\n          if (bind[i]) {\n            set(formData, bind[i], t);\n          }\n        });\n      }\n    });\n  };\n\n  handleBindData(_data);\n  return _data;\n};\nexport var transformDataWithBind2 = function transformDataWithBind2(data, flatten) {\n  var _data = clone(data);\n\n  var bindKeys = [];\n  var bindArrKeys = [];\n\n  var isMultiBind = function isMultiBind(bind) {\n    return Array.isArray(bind) && bind.every(function (item) {\n      return typeof item === 'string';\n    });\n  };\n\n  Object.keys(flatten).forEach(function (key) {\n    var bind = flatten[key] && flatten[key].schema && flatten[key].schema.bind;\n\n    var _key = key.replace('[]', '');\n\n    if (typeof bind === 'string') {\n      bindKeys.push({\n        key: _key,\n        bind: bind\n      });\n    } else if (isMultiBind(bind)) {\n      bindArrKeys.push({\n        key: _key,\n        bind: bind\n      });\n    }\n  });\n\n  var handleBindData2 = function handleBindData2(newData) {\n    bindKeys.forEach(function (item) {\n      var key = item.key,\n          bind = item.bind;\n      var temp = get(newData, bind); // 如果已经有值了，要和原来的值合并，而不是覆盖\n\n      var oldVal = get(newData, key);\n\n      if (isObject(oldVal)) {\n        temp = _objectSpread(_objectSpread({}, oldVal), temp);\n      }\n\n      set(newData, key, temp);\n      unset(newData, bind);\n    });\n    bindArrKeys.forEach(function (item) {\n      var key = item.key,\n          bind = item.bind;\n      var temp = [];\n      bind.forEach(function (b) {\n        var bindValue = get(newData, b);\n\n        if (bindValue !== undefined) {\n          temp.push(bindValue);\n        }\n\n        unset(newData, b);\n      });\n\n      if (temp.length > 0) {\n        set(newData, key, temp);\n      }\n    });\n  };\n\n  handleBindData2(_data);\n  return _data;\n};","map":null,"metadata":{},"sourceType":"module"}