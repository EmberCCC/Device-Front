{"ast":null,"code":"var _excluded = [\"id\", \"_item\", \"dataIndex\", \"hideTitle\", \"hideValidation\", \"debugCss\"],\n    _excluded2 = [\"id\", \"item\", \"dataIndex\", \"dataPath\", \"hideTitle\", \"hideValidation\", \"debugCss\", \"schema\", \"_value\", \"dependValues\", \"displayType\", \"labelAlign\", \"column\", \"labelWidth\", \"readOnly\", \"errorFields\", \"effectiveLabelWidth\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useRef } from 'react';\nimport { useStore, useStore2 } from '../hooks';\nimport { clone, getDataPath, getParentPath, getParentProps, getValueByPath, isCheckBoxType, isCssLength, isListType, isLooselyNumber, isObjType, parseRootValueInSchema } from '../utils';\nimport RenderList from './RenderChildren/RenderList';\nimport RenderObject from './RenderChildren/RenderObject';\nimport RenderField from './RenderField';\n\nvar Core = function Core(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? '#' : _ref$id,\n      _item = _ref._item,\n      _ref$dataIndex = _ref.dataIndex,\n      dataIndex = _ref$dataIndex === void 0 ? [] : _ref$dataIndex,\n      _ref$hideTitle = _ref.hideTitle,\n      hideTitle = _ref$hideTitle === void 0 ? false : _ref$hideTitle,\n      _ref$hideValidation = _ref.hideValidation,\n      hideValidation = _ref$hideValidation === void 0 ? false : _ref$hideValidation,\n      debugCss = _ref.debugCss,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var snapShot = useRef();\n\n  var _useStore = useStore(),\n      flatten = _useStore.flatten,\n      errorFields = _useStore.errorFields,\n      isEditing = _useStore.isEditing,\n      formData = _useStore.formData,\n      allTouched = _useStore.allTouched;\n\n  var _useStore2 = useStore2(),\n      displayType = _useStore2.displayType,\n      column = _useStore2.column,\n      labelWidth = _useStore2.labelWidth,\n      readOnly = _useStore2.readOnly,\n      labelAlign = _useStore2.labelAlign;\n\n  var item = _item ? _item : flatten[id];\n  if (!item) return null;\n  var dataPath = getDataPath(id, dataIndex);\n  var parentPath = getParentPath(dataPath);\n\n  var _value = getValueByPath(formData, dataPath);\n\n  var schema = clone(item.schema);\n  var dependencies = schema.dependencies;\n  var dependValues = [];\n  var rootValue;\n\n  try {\n    if (Array.isArray(dependencies)) {\n      dependencies.forEach(function (item) {\n        var itemPath = getDataPath(item, dataIndex);\n        var result = getValueByPath(formData, itemPath);\n        dependValues.push(result);\n      });\n    }\n  } catch (error) {\n    console.error(\"dependencies \\u8BA1\\u7B97\\u62A5\\u9519\\uFF0C\".concat(dependencies));\n  }\n\n  try {\n    rootValue = getValueByPath(formData, parentPath);\n  } catch (error) {} // 节流部分逻辑，编辑时不执行\n\n\n  if (isEditing && snapShot.current) {\n    schema = snapShot.current;\n  } else {\n    if (JSON.stringify(schema).indexOf('rootValue') > -1) {\n      schema = parseRootValueInSchema(schema, rootValue);\n    }\n\n    snapShot.current = schema;\n  } // 真正有效的label宽度需要从现在所在item开始一直往上回溯（设计成了继承关系），找到的第一个有值的 ui:labelWidth\n\n\n  var effectiveLabelWidth = getParentProps('labelWidth', id, flatten) || labelWidth;\n\n  var dataProps = _objectSpread({\n    id: id,\n    item: item,\n    // 如果直接传了item，就不用id去取item, 暂时是内部属性，不外用\n    dataIndex: dataIndex,\n    // 数据来源是数组的第几个index，上层每有一个list，就push一个index\n    dataPath: dataPath,\n    _value: _value,\n    dependValues: dependValues,\n    hideTitle: hideTitle,\n    hideValidation: hideValidation,\n    debugCss: debugCss,\n    schema: schema,\n    displayType: displayType,\n    column: column,\n    labelWidth: labelWidth,\n    readOnly: readOnly,\n    errorFields: errorFields,\n    effectiveLabelWidth: effectiveLabelWidth,\n    allTouched: allTouched,\n    labelAlign: labelAlign\n  }, rest);\n\n  return /*#__PURE__*/React.createElement(CoreRender, dataProps);\n};\n\nvar CoreRender = function CoreRender(_ref2) {\n  var id = _ref2.id,\n      item = _ref2.item,\n      dataIndex = _ref2.dataIndex,\n      dataPath = _ref2.dataPath,\n      hideTitle = _ref2.hideTitle,\n      hideValidation = _ref2.hideValidation,\n      debugCss = _ref2.debugCss,\n      schema = _ref2.schema,\n      _value = _ref2._value,\n      dependValues = _ref2.dependValues,\n      displayType = _ref2.displayType,\n      labelAlign = _ref2.labelAlign,\n      column = _ref2.column,\n      labelWidth = _ref2.labelWidth,\n      readOnly = _ref2.readOnly,\n      errorFields = _ref2.errorFields,\n      effectiveLabelWidth = _ref2.effectiveLabelWidth,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  if (schema.hidden) {\n    return null;\n  } // 样式的逻辑全放在这层\n  // displayType 一层层网上找值\n\n\n  var _displayType = schema.displayType || rest.displayType || displayType || 'column';\n\n  var _labelAlign = schema.labelAlign || rest.labelAlign || labelAlign || 'right';\n\n  var isList = isListType(schema);\n  var isObj = isObjType(schema);\n  var isComplex = isObj || isList;\n  var isCheckBox = isCheckBoxType(schema, readOnly);\n  var width = schema.width || schema['ui:width'];\n  var containerClass = \"fr-field \".concat(_displayType === 'inline' ? '' : 'w-100', \" flex\");\n  var labelClass = \"fr-label\";\n  var contentClass = \"fr-content\";\n\n  if (typeof schema.className === 'string') {\n    containerClass += ' ' + schema.className;\n  } // common classNames dispite row or column\n\n\n  switch (schema.type) {\n    case 'object':\n      if (isObj) {\n        if (schema.title) {\n          labelClass += ' fr-label-object';\n        }\n\n        containerClass += ' fr-field-object';\n      }\n\n      break;\n\n    case 'array':\n      // list 有两种展示形式！\n      if (isList) {\n        if (schema.title) {\n          labelClass += ' fr-label-list';\n        }\n\n        containerClass += ' fr-field-column';\n      }\n\n      break;\n\n    case 'boolean':\n      if (isCheckBox) {\n        contentClass += ' fr-content-column'; // checkbox高度短，需要居中对齐\n\n        containerClass += \" flex \".concat(_displayType === 'column' ? 'flex-column' : '');\n      }\n\n      break;\n\n    default:\n  } // column specific className\n\n\n  if (!isComplex && !isCheckBox) {\n    if (_displayType === 'column') {\n      containerClass += ' flex-column';\n      labelClass += ' fr-label-column';\n      contentClass += ' fr-content-column';\n\n      switch (schema.type) {\n        case 'object':\n          break;\n\n        case 'array':\n          if (schema.title && !schema.enum) {// labelClass += ' b mb2';\n          }\n\n          break;\n\n        case 'boolean':\n          break;\n\n        default:\n      }\n    } else if (_displayType === 'row') {\n      // row specific className\n      containerClass += '';\n      labelClass += \" fr-label-row \".concat(_labelAlign === 'right' ? 'fr-label-align-right' : 'fr-label-align-left');\n      contentClass += ' fr-content-row';\n\n      if (!isObj && !isCheckBox) {\n        labelClass += ' flex-shrink-0 fr-label-row';\n        contentClass += ' flex-grow-1 relative';\n      }\n    }\n  } // style part\n\n\n  var columnStyle = {};\n\n  if (schema.hidden) {\n    columnStyle.display = 'none';\n  } // if (!isComplex) {\n  // }\n\n\n  if (!isObj) {\n    if (width) {\n      columnStyle.width = width;\n      columnStyle.paddingRight = 8;\n    } else if (column > 1) {\n      columnStyle.width = \"calc(100% /\".concat(column, \")\");\n      columnStyle.paddingRight = 8;\n    }\n  }\n\n  var _labelWidth = isLooselyNumber(effectiveLabelWidth) ? Number(effectiveLabelWidth) : isCssLength(effectiveLabelWidth) ? effectiveLabelWidth : 110; // 默认是 110px 的长度\n\n\n  var labelStyle = {\n    width: _labelWidth\n  };\n\n  if (isComplex || _displayType === 'column') {\n    labelStyle = {\n      flexGrow: 1\n    };\n  }\n\n  if (_displayType === 'inline') {\n    labelStyle = {\n      marginTop: 5,\n      paddingLeft: 12\n    };\n    labelClass = '';\n    contentClass += ' fr-content-inline';\n\n    if (containerClass.indexOf('fr-field-object') === -1) {\n      containerClass += ' fr-field-inline';\n    }\n  }\n\n  var hasChildren = item.children && item.children.length > 0;\n  var fieldProps = {\n    $id: id,\n    dataIndex: dataIndex,\n    dataPath: dataPath,\n    _value: _value,\n    dependValues: dependValues,\n    _schema: schema,\n    labelClass: labelClass,\n    labelStyle: labelStyle,\n    contentClass: contentClass,\n    errorFields: errorFields,\n    // 层级间可使用的字段\n    displayType: _displayType,\n    hideTitle: hideTitle,\n    hideValidation: hideValidation\n  };\n  var objChildren = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-wrap\"\n  }, /*#__PURE__*/React.createElement(RenderObject, {\n    dataIndex: dataIndex,\n    errorFields: errorFields,\n    displayType: _displayType,\n    labelAlign: _labelAlign,\n    hideTitle: hideTitle\n  }, item.children));\n  var listChildren = /*#__PURE__*/React.createElement(RenderList, {\n    parentId: id,\n    schema: schema,\n    dataIndex: dataIndex,\n    errorFields: errorFields,\n    displayType: _displayType,\n    hideTitle: hideTitle\n  }, item.children); // 计算 children\n\n  var _children = null;\n\n  if (hasChildren) {\n    if (isObj) {\n      _children = objChildren;\n    } else if (isList) {\n      _children = listChildren;\n    }\n  } else if (isCheckBox) {\n    _children = schema.title;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: columnStyle,\n    className: \"\".concat(containerClass, \" \").concat(debugCss ? 'debug' : '')\n  }, /*#__PURE__*/React.createElement(RenderField, fieldProps, _children));\n}; // haven't used\n\n\nvar areEqual = function areEqual(prev, current) {\n  if (prev.allTouched !== current.allTouched) {\n    return false;\n  }\n\n  if (prev.displayType !== current.displayType) {\n    return false;\n  }\n\n  if (prev.column !== current.column) {\n    return false;\n  }\n\n  if (prev.labelWidth !== current.labelWidth) {\n    return false;\n  }\n\n  if (prev.readOnly !== current.readOnly) {\n    return false;\n  }\n\n  if (prev.disabled !== current.disabled) {\n    return false;\n  }\n\n  if (prev.schema && current.schema) {\n    if (prev.schema.$id === '#') {\n      return false;\n    }\n  }\n\n  if (isObjType(prev.schema) && isObjType(current.schema)) {\n    return false;\n  }\n\n  if (JSON.stringify(prev.dependValues) !== JSON.stringify(current.dependValues)) {\n    return false;\n  }\n\n  if (JSON.stringify(prev._value) === JSON.stringify(current._value) && JSON.stringify(prev.schema) === JSON.stringify(current.schema) && JSON.stringify(prev.errorFields) === JSON.stringify(current.errorFields)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default Core;","map":null,"metadata":{},"sourceType":"module"}